
RomConst = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0000:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0010:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0020:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0030:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0040:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0050:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0060:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0070:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0080:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0090:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 00A0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 00B0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 00C0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 00D0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 00E0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 00F0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0100:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0110:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0120:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0130:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0140:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0150:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0160:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0170:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0180:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0190:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 01A0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 01B0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 01C0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 01D0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 01E0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 01F0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0200:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0210:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0220:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0230:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0240:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0250:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0260:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0270:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0280:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 0290:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 02A0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 02B0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 02C0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 02D0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 02E0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 02F0:
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]


def Setu8_ArmCm4(Adr, lu8Value):
    lu8Value = lu8Value & 0xFF
    RomConst[Adr]     = lu8Value & 0xFF
    RomConst[Adr + 1] = lu8Value >> 8

def Setu16_ArmCm4(Adr, lu16Value):
    lu16Value = lu16Value & 0xFFFF
    RomConst[Adr]     = lu16Value & 0xFF
    RomConst[Adr + 1] = (lu16Value >> 8) & 0xFF

def Setu32_ArmCm4(Adr, lu32Value):
    lu32Value = lu32Value & 0xFFFFFFFF
    RomConst[Adr]     = lu32Value & 0xFF
    RomConst[Adr + 1] = (lu32Value >> 8) & 0xFF
    RomConst[Adr + 2] = (lu32Value >> 16) & 0xFF
    RomConst[Adr + 3] = (lu32Value >> 24) & 0xFF

def SetString(Adr, lszString, liMaxSize):
    liChrIdx = 0

    while (liChrIdx < liMaxSize) and (liChrIdx < len(lszString)):
        RomConst[Adr+liChrIdx] = ord(lszString[liChrIdx])
        liChrIdx += 1

def SetHeader(lszDeviceName, lszPlatformName, lszPlatformInfo, lu16BnDeviceID, lu16DBnAdr, lu8PartitionCnt, lu32IapRamSize):
    lAdr = 0

    SetString(lAdr, lszDeviceName, 16); lAdr += 16
    SetString(lAdr, lszPlatformName, 16); lAdr += 16
    SetString(lAdr, lszPlatformInfo, 32); lAdr += 32

    Setu16_ArmCm4(lAdr, lu16BnDeviceID); lAdr += 2
    Setu16_ArmCm4(lAdr, lu16DBnAdr); lAdr += 2
    lAdr += 4

    Setu8_ArmCm4(lAdr, lu8PartitionCnt); lAdr += 1
    lAdr += 3
    Setu32_ArmCm4(lAdr, lu32IapRamSize); lAdr += 4


def PartitionIdx2Adr(liIdx):
    return 0x50 + liIdx * 32


def SetPartition(liIdx, lszName, lu16Sort, lu16Type, lu32Start_Adr, lu32Size, lu32BlockSize):
    lAdr = PartitionIdx2Adr(liIdx)

    SetString(lAdr, lszName, 16)
    lAdr += 16

    Setu16_ArmCm4(lAdr, lu16Sort); lAdr += 2
    Setu16_ArmCm4(lAdr, lu16Type); lAdr += 2

    Setu32_ArmCm4(lAdr, lu32Start_Adr); lAdr += 4
    Setu32_ArmCm4(lAdr, lu32Size); lAdr += 4
    Setu32_ArmCm4(lAdr, lu32BlockSize); lAdr += 4

def SetFooter(lszMagicPattern):
    lAdr = 0x25C
    SetString(lAdr, lszMagicPattern, 4)


def convert_byte_to_ascii(lu8Byte):
    lszStr = chr(int(lu8Byte))

    if lszStr.isprintable() == False:
        return "."
    return lszStr


SetHeader("SolBox2 Motor", "STM32L433CCT6", "Cortex-M4,Rom 256KB,Ram 64KB",   20, 0x1100, 6, 4*1024)

SetPartition(0, "Flash Bl",  16, 0, 0x08000000,                            32*1024, 0x0800)
SetPartition(1, "Flash App", 16, 0, 0x08000000 +  32 * 1024,              144*1024, 0x0800)
SetPartition(2, "Flash IAP", 16, 0, 0x08000000 +  (32 + 144) * 1024,       76*1024, 0x0800)
SetPartition(3, "Flash EEP", 16, 0, 0x08000000 +  (32 + 144 + 76) * 1024,   4*1024, 0x0800)

SetPartition(4, "Ram",        0, 0, 0x20000000,                            48*1024, 1)
SetPartition(5, "CCM",        0, 0, 0x10000000,                            16*1024, 1)

SetFooter("FLKA")

lu32Checksum = 1
for u8Byte in RomConst[0:0x260-8]:
    lu32Checksum += int(u8Byte)
print("Checksumme : " + str(lu32Checksum) + " (" + hex(lu32Checksum) + ")")

Setu32_ArmCm4(0x258, lu32Checksum)


t = 0
print('       0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F')
while ((t + 15) < len(RomConst)):
    print('%04x: ' % t, end='')
    lszHexStr = ''.join('%02x.' % i for i in RomConst[t:t+16])
    print(lszHexStr + ": " + ''.join('%s' % convert_byte_to_ascii(i) for i in RomConst[t:t+16]))
    t += 16


newFileByteArray = bytearray(RomConst)
newFile = open("RomConst_0x0803F000.bin", "wb")
newFile.write(newFileByteArray)