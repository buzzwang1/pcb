
#include "main.h"

// STM32L433CCT
// ARM®-based Cortex®-M4 32b MCU
// Rom 256KB
// Ram 64KB



//  Mainboard01. BotNetId 21 = 0x15
//
//  PB09  -> Status Led
//
//
//   Switch:
//      PA08: Solid State Enable SSEN
//
//      PA00: LED1 (TIM2_CH1, AF1)
//      PA01: LED2 (TIM2_CH2, AF1)
//      PA02: LED3 (TIM2_CH3, AF1)
//      PA06: Led_Sig (e.g. WS2812)
//
//
//  I2C1  -> BotNet
//    PB06  -> I2C2 SCL
//    PB07  -> I2C2 SDA
//
//  U1    -> BotNet
//    PA09  -> U1 Tx/Rx
//
//
//  I2C2  -> INA3221, Temperatursensoren
//    PB10  -> I2C2 SCL AF4
//    PB14  -> I2C2 SDA AF4
//
//
//  Timer Usage:
//    TIM2  -> PWM für LED1..3 <-> DiffTimer (optional)
//    TIM6  -> CyclicCaller
//    TIM15 -> BotCom MpHd
//    TIM16 -> PWM für WS2812 vir DMA1.Chl3
//
//  DMA Usage:
//    DMA1:
//      0:
//      1:
//      2:
//      3: TIM16 für WS2812
//      4: I2C2 Tx: Mainboard  CS:3
//      5: I2C2 Rx: Mainboard  CS:3
//      6: I2C1 Tx: BotNet CS:3 / Usart2 Rx BotNet CS:2
//      7: I2C1 Rx: BotNet CS:3 / Usart2 Tx BotNet CS:2
//
//    DMA2:
//      0:
//      1:
//      2:
//      3:
//      4:
//      5:
//      6: I2C1 Rx: BotNet CS:5 / Usart1 Tx BotNet CS:2
//      7: I2C1 Tx: BotNet CS:5 / Usart1 Rx BotNet CS:2
//
//  Interrupt Usage:
//    TIM6_DAC_IRQHandler:      CyclicCaller:  Prio: 8.8
//    I2C1_EV_IRQHandler:       BotCom:        Prio: 8.8
//    I2C1_ER_IRQHandler:       BotCom:        Prio: 8.8
//    I2C2_EV_IRQHandler:       Board:         Prio: 8.8
//    I2C2_ER_IRQHandler:       Board:         Prio: 8.8
//    DMA2_Channel6_IRQHandler: BotNet U1 Tx:  Prio: 6.8 => U1
//    DMA2_Channel7_IRQHandler: BotNet U1 Rx:  Prio: 6.8 => U1
//    USART1_IRQHandler:        BotNet U1:     Prio: 6.8 => U1
//    TIM1_UP_TIM16_IRQHandler: BotCom U1:     Prio: 6.8 => U1
//
// Backup-Register Usage:
//    00: Clock Valid by Clock
//    01: Wakeup Counter
//



//   R  |  G  |  B  |    12V        |    5V        |
//------+-----+-----+---------------+--------------+
//  64  |  64 |  64 |  11480/1890   |  5050/3700   | mini560 ok
// 255  |   0 |   0 |  11300/2630   |  5023/4820   | mini560 am limit, Pfeift manchmal
//  70  |  70 |  70 |  11450/2000   |  5040/3950   | mini560 am limit, Pfeift selten
// 192  |   0 |   0 |  11590/1450   |  5062/3000   |
//  32  |  32 |  32 |  11720/ 950   |  5080/2018   |
// 100  |   0 | 100 |  11580/1500   |  5056/3100   |
// 112  |   0 | 112 |  11540/1560   |  5056/3150   |




__IO uint32_t TimingDelay = 0;

cClockInfo  mcClockInfo;

cStatusLed<GPIOB_BASE, 9> mcStatusLed(False);

// I2C1:
cGpPin mcI2c1_SCL_Bn(GPIOB_BASE, 6, GPIO_MODE_AF_OD, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, 0);
cGpPin mcI2c1_SDA_Bn(GPIOB_BASE, 7, GPIO_MODE_AF_OD, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, 0);

// I2C2:
cGpPin mcI2c2_SCL_Board(GPIOB_BASE, 10, GPIO_MODE_AF_OD, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, 0);
cGpPin mcI2c2_SDA_Board(GPIOB_BASE, 14, GPIO_MODE_AF_OD, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, 0);

cI2cMaster           mcI2C2_Board(I2C2, &mcI2c2_SCL_Board, &mcI2c2_SDA_Board, 8);

cWorkMode            mcOpMode;
cBoard               mcBoard(&mcI2C2_Board);
cClock               mClock;   // Clock muss vor Powermanager sein, weil der Powermanager die
                               // WUF- zurücksetzt.


cStr_Create(mszErrorInfo, 128);

u8 mu8MyLedMemory[LEDCTRL_MEMSIZE(256)];
cWs2812 mcWs2812(mu8MyLedMemory, 256);

class cLedHandler
{
  public:
  u8 mu8_220V;
  u8 mu8Pwm1;
  u8 mu8Pwm2;
  u8 mu8Pwm3;
  u8 mu8RR;
  u8 mu8GG;
  u8 mu8BB;

  u16 mu16StateCounter;


  cLedHandler()
  {
    vUpdate(0, 0, 0, 0, 0, 0, 0);
  }

  void vUpdate(u8 lu8_220V, u8 lu8Pwm1, u8 lu8Pwm2, u8 lu8Pwm3, u8 lu8RR, u8 lu8GG, u8 lu8BB)
  {
    mu16StateCounter = 0;

    mu8_220V = lu8_220V;
    mu8Pwm1 = lu8Pwm1;
    mu8Pwm2 = lu8Pwm2;
    mu8Pwm3 = lu8Pwm3;
    mu8RR = lu8RR;
    mu8GG = lu8GG;
    mu8BB = lu8BB;
  }


  void Process_10ms()
  {
    switch (mu16StateCounter)
    {
      case 0:
        if ((mu8_220V & 1) == 1) mcBoard.vRelaisOn();
                            else mcBoard.vRelaisOff();
        break; 
      case 100:
        for (u16 lu16i = 0; lu16i < 256; lu16i++)
        {
          mcWs2812.vSetLed(lu16i, mu8RR, mu8GG, mu8BB);
        }
        break;
      case 110: mcWs2812.vSetPwm(mu8Pwm1, mu8Pwm2, mu8Pwm3); break;
    }
    if (mu16StateCounter < 1000) mu16StateCounter += 10;
  }
};

cLedHandler mcLedHandler;



class cBn_MsgProcess : public cBotNet_MsgSysProcess
{
public:

  bool bMsg(cBotNetMsg_MsgProt& lcMsg, cBotNet* lpcBn)
  {
    bool lbConsumed = False;
    (void)lpcBn;
    (void)lcMsg;

    switch (lcMsg.mu16Idx)
    {
      case 0x11:
        // Überprüfen, ob es eine Clock Nachricht ist
        //                         0    1  2    3    4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19    20 21 22 23 24
        //                              0  1    2    3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
        //  Clock:                11 | DH DL | 10 | 00.XX.XX.XX XX.XX.XX.XX YH.YL.MM.DD HH.MM.SS.VV || 00 00 SA SA 80
        // Clock Nachricht ?
        if ((lcMsg.cGetSAdr() == 0x1000) &&
            (lcMsg.u8Len() == 25))
        {
          u16 lu16SourceAdr = (lcMsg.mcPayload[0] << 8) + lcMsg.mcPayload[1];
          if (lu16SourceAdr == 0x08) // Clock Device Adress
          {
            mClock.vDeserialize(&lcMsg.mcPayload[11]);
            ////mu32ClockResyncTimeout = 0;
            lbConsumed = True;
          }
        }
        break;
      case 80:
        mcLedHandler.vUpdate(lcMsg.mcPayload[0], lcMsg.mcPayload[1], lcMsg.mcPayload[2], lcMsg.mcPayload[3],
                             lcMsg.mcPayload[4], lcMsg.mcPayload[5], lcMsg.mcPayload[6]);
        break;
    }
    return lbConsumed;
  }
};


cBotNetCfg mcMyBotNetCfg((const char8*)RomConst_stDevice_Info->szDevice_Name, RomConst_stDevice_Info->u16BnDeviceId, RomConst_stDevice_Info->u16BnNodeAdr);

cBn_MsgProcess mcBn_MsgProcess;


cGpPin                     mcU1TxRx(GPIOA_BASE, 9, GPIO_MODE_OUTPUT_OD, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 1);
cUartMpHdSlave             mcSlaveUartMpHdU1(USART1, 200000);
//cBotNet_UpLinkUsartMpHd mcUpLink(&mcSlaveUartMpHdU1);
cBotNet_UpLinkUsartMpHd_RMsg mcUpLink(&mcSlaveUartMpHdU1);

cBotNet mcBn(&mcMyBotNetCfg, &mcBn_MsgProcess);



void NMI_Handler(void)
{
  while (1)
  {
  }
}

void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
}


void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
}


void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
}


void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
}


void SVC_Handler(void)
{
  while (1)
  {
  }
}

void DebugMon_Handler(void)
{
  while (1)
  {
  }
}


void PendSV_Handler(void)
{
  while (1)
  {
  }
}

void Delay(__IO uint32_t nTime)
{
  TimingDelay = nTime;

  while(TimingDelay != 0);
}


void TimingDelay_Decrement(void)
{
  if (TimingDelay != 0x00)
  {
    TimingDelay--;
  }
}


void SysTick_Handler(void)
{
  TimingDelay_Decrement();
  HAL_IncTick();
}


#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif


void EnableRTC(void)
{
  /*##-1- Enables the PWR Clock and Enables access to the backup domain #######*/
  /* To change the source clock of the RTC feature (LSE, LSI), you have to:
     - Enable the power clock
     - Enable write access to configure the RTC clock source (to be done once after reset).
     - Reset the Back up Domain
     - Configure the needed RTC clock source */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
  LL_PWR_EnableBkUpAccess();
}


class cCliCmd_SysInfo2 : public cCliCmd
{
public:
  cCliCmd_SysInfo2() :cCliCmd((const char*)"SysInfo2", (const char*)"System Info")
  {}

  bool bProzessCmd(cStr& lcParam, cCli* lcCli, bool lbFirstCall, void* lCallerAdr) override
  {
    cStr_Create(lszStr, 32);

    UNUSED(lcParam);
    UNUSED(lbFirstCall);
    UNUSED(lCallerAdr);

    lcCli->bPrintLn((const char8*)"Clock:");
    lszStr.Setf((const char8*)"Core: %dMHz", cClockInfo::u32GetClockCore() / 1000000); lcCli->bPrintLn(lszStr);
    lszStr.Setf((const char8*)"Sys:  %dMHz", cClockInfo::u32GetClockSys() / 1000000); lcCli->bPrintLn(lszStr);
    lszStr.Setf((const char8*)"Port: %dMHz", cClockInfo::u32GetClockPort() / 1000000); lcCli->bPrintLn(lszStr);

    if (FLASH->ACR & FLASH_ACR_ICEN) { lszStr.Setf((const char8*)"Flash Data cache: enable");  lcCli->bPrintLn(lszStr); }
    else { lszStr.Setf((const char8*)"Flash Data cache: disable"); lcCli->bPrintLn(lszStr); }

    if (FLASH->ACR & FLASH_ACR_DCEN) { lszStr.Setf((const char8*)"Flash Instruction cache: enable");  lcCli->bPrintLn(lszStr); }
    else { lszStr.Setf((const char8*)"Flash Instruction cache: disable"); lcCli->bPrintLn(lszStr); }

    if (FLASH->ACR & FLASH_ACR_PRFTEN) { lszStr.Setf((const char8*)"Flash Prefetch: enable");  lcCli->bPrintLn(lszStr); }
    else { lszStr.Setf((const char8*)"Flash Prefetch: disable"); lcCli->bPrintLn(lszStr); }

    u8 lu8Lat = (u8)((u32)(FLASH->ACR & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
    lszStr.Setf((const char8*)"Flash Latency: %d", lu8Lat); lcCli->bPrintLn(lszStr);

    return True;
  }
};

class cCliCmd_SysClock : public cCliCmd
{
public:
  cCliCmd_SysClock() :cCliCmd((const char*)"Clock", (const char*)"System Time")
  {}

  bool bProzessCmd(cStr& lcParam, cCli* lcCli, bool lbFirstCall, void* lCallerAdr) override
  {
    cStr_Create(lszStr, 32);

    UNUSED(lcParam);
    UNUSED(lbFirstCall);
    UNUSED(lCallerAdr);

    lcCli->bPrintLn((const char8*)"Time:");
    //lszStr.Setf((const char8*)"%02d:%02d:%02d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC)), __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC))); lcCli->bPrintLn(lszStr);
    lcCli->bPrintLn(mClock.toString(lszStr));
    if (mClock.IsValid()) lcCli->bPrintLn((const char8*)"Is Valid");
                     else lcCli->bPrintLn((const char8*)"Is Not Valid");

    return True;
  }
};


class cCliCmd_HwStatus : public cCliCmd
{
public:
  cCliCmd_HwStatus() :cCliCmd((const char*)"hwstatus", (const char*)"Status")
  {}

  bool bProzessCmd(cStr& lcParam, cCli* lcCli, bool lbFirstCall, void* lCallerAdr) override
  {
    cStr_Create(lszStr, 32);

    UNUSED(lcParam);
    UNUSED(lbFirstCall);
    UNUSED(lCallerAdr);

    lcCli->bPrintLn((rsz)"");
    lcCli->bPrintLn((rsz)"Ina:");
    lszStr.Setf((rsz)"Led1:  %d mV; %d mA", (u16)mcBoard.i16GetLedVoltageAbs(1), (u16)mcBoard.i16GetLedCurrentAbs(1)); lcCli->bPrintLn(lszStr);
    lszStr.Setf((rsz)"Led2:  %d mV; %d mA", (u16)mcBoard.i16GetLedVoltageAbs(2), (u16)mcBoard.i16GetLedCurrentAbs(2)); lcCli->bPrintLn(lszStr);
    lszStr.Setf((rsz)"Led2:  %d mV; %d mA", (u16)mcBoard.i16GetLedVoltageAbs(3), (u16)mcBoard.i16GetLedCurrentAbs(3)); lcCli->bPrintLn(lszStr);


    lcCli->bPrintLn((rsz)"");
    lszStr.Setf((const char8*)"Mode %s (%d)", mcOpMode.ToString(), mcOpMode.mCounter);
    lcCli->bPrintLn(lszStr);

      return True;
  }
};






class cMiniCli : public cBotNetStreamPort
{
  public:
  cCliCmd_SysInfo2    mcBnCliCmd_SysInfo2;
  cCliCmd_SysClock    mcBnCliCmd_Clock;
  cCliCmd_HwStatus    mcBnCliCmd_HwStatus;


  cMiniCli()
  {
    mszName     = (const char*)"BnBoardCntl v01.00.00";
  }

  inline uint32 SizeOf()
  {
    return sizeof(cCliCmd);
  }

  void vAddedToBn(cBotNet* lcBotNet) override
  {
    lcBotNet->mcStreamSys.mcCmdPort.bAddCmd(&mcBnCliCmd_SysInfo2);
    lcBotNet->mcStreamSys.mcCmdPort.bAddCmd(&mcBnCliCmd_Clock);
    lcBotNet->mcStreamSys.mcCmdPort.bAddCmd(&mcBnCliCmd_HwStatus);
  }


  void vProcess(void) override
  {
  }
};

cMiniCli mcMiniCli;


// --------------------- I2C1 ------------------------------------------

////void I2C1_EV_IRQHandler(void)
////{
////  mcI2C1_BnMaster.I2C_EV_IRQHandler();
////}
////
////void I2C1_ER_IRQHandler(void)
////{
////  mcI2C1_BnMaster.I2C_ER_IRQHandler();
////}


// --------------------- I2C2 ------------------------------------------

void I2C2_EV_IRQHandler(void)
{
  mcI2C2_Board.I2C_EV_IRQHandler();
}

void I2C2_ER_IRQHandler(void)
{
  mcI2C2_Board.I2C_ER_IRQHandler();
}



// ---------------------------- U1 ---------------------------

void DMA2_Channel6_IRQHandler(void)
{
  // USART1 TX
  DMA2_Channel6->CCR &= ~DMA_CCR_EN;
  DMA2->IFCR = DMA_FLAG_TC6;
  mcSlaveUartMpHdU1.ComIrqHandler(cComNode::tenEventType::enEvTyIrq, cComNode::tenEvent::enEvDmaTxTc);
}


void DMA2_Channel7_IRQHandler(void)
{
  // USART1 RX
  DMA2_Channel7->CCR &= ~DMA_CCR_EN;
  DMA2->IFCR = DMA_FLAG_TC7;
  mcSlaveUartMpHdU1.ComIrqHandler(cComNode::tenEventType::enEvTyIrq, cComNode::tenEvent::enEvDmaRxTc);
}

void USART1_IRQHandler(void)
{

  if (USART1->ISR & LL_USART_ISR_TC)
  {
    USART1->ICR = LL_USART_ISR_TC;
    mcSlaveUartMpHdU1.ComIrqHandler(cComNode::tenEventType::enEvTyIrq, cComNode::tenEvent::enEvUsartTc);
  }
  if (USART1->ISR & 0xF)
  {
    USART1->ICR = LL_USART_ISR_ORE;
    mcSlaveUartMpHdU1.ComIrqHandler(cComNode::tenEventType::enEvTyError, cComNode::tenEvent::enEvUsartErOre);
  }
}

void TIM1_BRK_TIM15_IRQHandler(void)
{
  if (TIM15->SR & TIM_SR_UIF) // if UIF flag is set
  {
    TIM15->SR &= ~TIM_SR_UIF; // clear UIF flag
    TIM15->CR1 &= ~(TIM_CR1_CEN); //disable/stop timer
    mcSlaveUartMpHdU1.TIM_EV_IRQHandler();
  }
}



void MAIN_vTick1msHp(void)
{
  mcBn.vTickHp1ms();
}

void MAIN_vTick1msLp(void)
{
  mcI2C2_Board.bStartNext();
}

void MAIN_vTick10msLp(void)
{
  mcBoard.vUpdateAll(mcOpMode.IsAuto());

  mcBn.vTickLp10ms();
  mcI2C2_Board.vTick10ms();
  mcLedHandler.Process_10ms();
}



void vLedXY(u8 x, u8 y, u8 r, u8 g, u8 b)
{
  u16 Idx = y * 16 + x;
  mcWs2812.vSetLed(Idx, r, g, b);
}



void MAIN_vTick100msLp(void)
{
  cStatusLedMode::tenMode lenModeLed1;

  lenModeLed1 = cStatusLedMode::nStToggle1000ms;

  if (!mcOpMode.IsAuto())
  {
    lenModeLed1 = cStatusLedMode::nStToggle200ms;
  }

  mcStatusLed.vSetMode(lenModeLed1);
  mcStatusLed.vTick100ms();

  cBnSpop_vResetWdog();
}


void MAIN_vTick1000msLp(void)
{
  mcOpMode.vTick1000ms();
  mClock.vAdd1s();

  //if (mu32ClockResync)
  //{
  //  mu32ClockResync--;
  //}
  //else
  //{
  //  mu32ClockResyncTimeout = 3 * 60;
  //  mu32ClockResync        = 24 * 60 * 60;
  //}
}


void MAIN_vInitSystem()
{
  SysTick_Config(cClockInfo::mstClocks.HCLK_Frequency / 100);

  cBnSpop_vResetWdog();
  HAL_Init();


  EnableRTC();
  LL_RTC_DisableWriteProtection(RTC);
  LL_RTC_SetAlarmOutEvent(RTC, LL_RTC_ALARMOUT_DISABLE);

  HAL_NVIC_DisableIRQ(USART2_IRQn);
  HAL_NVIC_SetPriority(USART2_IRQn, 7, 8);
  HAL_NVIC_EnableIRQ(USART2_IRQn);

  mcBn.bAddLink((cBotNet_LinkBase*)&mcUpLink);

  // Connect the CmdPort's output to external Port (to PC CmdPort 0xE000.0)
  mcBn.vStreamPortConnect(0, 0xE000, 0);

  // Add MemPort and connect the MemPort's output to external Port  (to PC CmdPort 0xE000.1)
  // Should be Index 1
  mcBn.vStreamPortConnect(1, 0xE000, 1);
  mcBn.u16StreamPortAdd(&mcMiniCli);



  ////mu32ClockResync = 24 * 60 * 60;
  ////mu32ClockResyncTimeout = 0;

  ////if (!mClock.IsValid() && ((cBnSpop_u32ReadBackupData(1) % 5760) == 0))
  ////{
  ////  // Funk-Empfänger vorhanden
  ////  if (mcSideLink.mStatus.IsInit)
  ////  {
  ////    mu32ClockResyncTimeout = 3 * 60;
  ////    mcSideLink.vKeepReceiverOnWhileWaiting(True);
  ////  }
  ////}

  CycCall_Start(MAIN_vTick1msHp /*1ms_HP*/,
                NULL /*10ms_HP*/,
                NULL /*100ms_HP*/,
                NULL /*1s_HP*/,

                MAIN_vTick1msLp    /*1ms_LP*/,
                MAIN_vTick10msLp   /*10ms_LP*/,
                MAIN_vTick100msLp  /*100ms_LP*/,
                MAIN_vTick1000msLp /*1s_LP*/);

  cBnSpop_vResetWdog();

  #ifdef PCB_PROJECTCFG_Test
    #ifdef TESTSYSRUNTIME
      mcPB00.vSet0();
      mcTestClassTim[2].vSetMaxTimer(cDiffTimerHw::u32GetTimer());
    #endif
  #endif

  mcBoard.vUpdateAll(True);
  // I2C Bausteine Initialisieren
  if (mcI2C2_Board.bStartNext())
  {
    cClockInfo::Delay_ms(3);
    mcBoard.vUpdateAll(True);

    mcI2C2_Board.bStartNext();
    cClockInfo::Delay_ms(3);
    mcBoard.vUpdateAll(True);

    mcI2C2_Board.bStartNext();
    cClockInfo::Delay_ms(3);
    mcBoard.vUpdateAll(True);
  }

  mszErrorInfo = "";
  ////if (mcI2C1_BnMaster.mSm == cComNode::enStError) mszErrorInfo += (rsz)" ErrI2cBn";
  if (mcI2C2_Board.mSm    == cComNode::enStError) mszErrorInfo += (rsz)" ErrI2cBoard";
  else
  {
    if (mcBoard.mu8InaErr & 1) mszErrorInfo += (rsz)" ErrI2cBoardIna1";
  }
  mszErrorInfo.Trim();
  mszErrorInfo.ToString();

  mcLedHandler.vUpdate(0, 0, 0, 0, 0, 0, 0);
}




/* Main functions ---------------------------------------------------------*/
int main(void)
{
  MAIN_vInitSystem();

  while (1)
  {
    CycCall_vIdle();

    __asm("wfi");
  }
}

void SysError_Handler()
{
  while (1)
  {};
}

void SystemClock_Config(void)
{
  // SystemClock = HSI (== 16Mhz)
  // kein Pll

  RCC_OscInitTypeDef RCC_OscInitStruct = {};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {};

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    SysError_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    SysError_Handler();
  }
  PeriphClkInit.PeriphClockSelection = //RCC_PERIPHCLK_USART3| // Wird nicht benötigt
                                       RCC_PERIPHCLK_USART2|
                                       RCC_PERIPHCLK_USART1|
                                       //RCC_PERIPHCLK_I2C3|   // Wird nicht benötigt
                                       RCC_PERIPHCLK_I2C2|
                                       RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
  //PeriphClkInit.Usart3ClockSelection = RCC_USART2CLKSOURCE_HSI; // Wird nicht benötigt
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
  //PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI; // Wird nicht benötigt
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    SysError_Handler();
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_RCC_RTCAPB_CLK_ENABLE();

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    SysError_Handler();
  }
}


// This is called from the Startup Code, before the c++ constructors
void MainSystemInit()
{
  SystemInit();
  HAL_Init();
  SystemClock_Config(); // Decomment for 16Mhz HSI
  SystemCoreClockUpdate();

  if (!RomConst_IsValid())
  {
    // RomConst Error
    mcBn.mcAdr.Set(0x1EEE);
  }
}

