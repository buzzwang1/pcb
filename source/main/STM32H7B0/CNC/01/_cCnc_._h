

#ifndef _C_CNC_H
#define _C_CNC_H

#include "TYPEDEF.h"
#include "stm32h7xx.h"
#include "stm32h7xx_hal.h"
#include "stm32h7xx_ll_system.h"
#include "stm32h7xx_ll_tim.h"
#include "stm32h7xx_ll_exti.h"

#include "cRingBufT.h"
#include "cStrT.h"
#include "cPal.h"
#include "math.h"
#include "ClockInfo.h"
#include "tGPPin.h"



class cCncAchseHW
{
public:
  u8  mu8Ref;
  u32 mu32StepsSoll;    // [Ticks]
  u32 mu32StepsIst;     // [Ticks]
  u32 mu32StepsStart;   // [Ticks]
  double mdSpeedSoll;   // [Hz]
  double mdSpeedStart;  // [Hz]
  double mdSpeedIst;    // [Hz]
  double mdSpeedAccMax; // [Hz/ms]

  bool bisDriving;

  typedef enum
  {
    enSpeedAccel = 0,
    enSpeedKeep,
    enSpeedStop
  }tenSpeedMode;

  tenSpeedMode menSpeedMode;

  TIM_TypeDef* mstTimDelay;
  TIM_TypeDef* mstTimStep;

  cGpPin* mPinRef;
  cGpPin* mPinDir;
  cGpPin* mPinTakt;

  cCncAchseHW(TIM_TypeDef* lstTimDelay, TIM_TypeDef* lstTimStep, cGpPin* lPinRef, cGpPin* lPinDir, cGpPin* lPinTakt)
  {
    TIM_HandleTypeDef lhTimX = {};

    mstTimDelay = lstTimDelay;
    mstTimStep  = lstTimStep;
    mPinRef     = lPinRef;
    mPinDir     = lPinDir;
    mPinTakt    = lPinTakt;

    mu8Ref = 0;
    mu32StepsSoll  = 0;            // [Ticks]
    mu32StepsIst   = 0;            // [Ticks]
    mu32StepsStart = 0;            // [Ticks]
    mdSpeedSoll   = 0.0;           // [Hz]
    mdSpeedIst    = 0.0;           // [Hz]
    mdSpeedAccMax = 100.0;         // [Hz/ms]
    menSpeedMode  = enSpeedAccel;
    bisDriving     = False;


    mstTimDelay = lstTimDelay;
    mstTimStep = lstTimStep;

    lhTimX.Init.Prescaler = (cClockInfo::mstClocks.HCLK_Frequency / 1000000) - 1;
    lhTimX.Init.CounterMode = TIM_COUNTERMODE_UP;
    lhTimX.Init.Period = 20 - 1; // 20us
    lhTimX.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    lhTimX.Init.RepetitionCounter = 0;
    lhTimX.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

    lhTimX.Instance = lstTimStep;
    HAL_TIM_Base_Init(&lhTimX);


    if (lstTimStep == TIM12)
    {
      HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 8, 8);
      HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
      __HAL_RCC_TIM12_CLK_ENABLE();
      LL_TIM_EnableIT_UPDATE(TIM12);
      LL_TIM_SetOnePulseMode(TIM12, LL_TIM_ONEPULSEMODE_SINGLE);
    }

    if (lstTimStep == TIM13)
    {
      HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 8, 8);
      HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
      __HAL_RCC_TIM13_CLK_ENABLE();
      LL_TIM_EnableIT_UPDATE(TIM13);
      LL_TIM_SetOnePulseMode(TIM13, LL_TIM_ONEPULSEMODE_SINGLE);
    }

    if (lstTimStep == TIM14)
    {
      HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 8, 8);
      HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
      __HAL_RCC_TIM14_CLK_ENABLE();
      LL_TIM_EnableIT_UPDATE(TIM14);
      LL_TIM_SetOnePulseMode(TIM14, LL_TIM_ONEPULSEMODE_SINGLE);
    }


    // 20000Hz =>    50us
    //    30Hz => 33333us
    lhTimX.Init.Prescaler = (cClockInfo::mstClocks.HCLK_Frequency / 1000000) - 1;
    lhTimX.Init.CounterMode = TIM_COUNTERMODE_UP;
    lhTimX.Init.Period = 50000 - 1; // 50ms
    lhTimX.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    lhTimX.Init.RepetitionCounter = 0;
    lhTimX.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

    lhTimX.Instance = mstTimDelay;
    HAL_TIM_Base_Init(&lhTimX);

    if (mstTimDelay == TIM15)
    {
      HAL_NVIC_SetPriority(TIM15_IRQn, 8, 8);
      HAL_NVIC_EnableIRQ(TIM15_IRQn);
      __HAL_RCC_TIM15_CLK_ENABLE(); // General-purpose up, down, up/down auto-reload counter.
      LL_TIM_EnableIT_UPDATE(TIM15);
      LL_TIM_SetOnePulseMode(TIM15, LL_TIM_ONEPULSEMODE_SINGLE);
    }

    if (mstTimDelay == TIM16)
    {
      HAL_NVIC_SetPriority(TIM16_IRQn, 8, 8);
      HAL_NVIC_EnableIRQ(TIM16_IRQn);
      __HAL_RCC_TIM16_CLK_ENABLE(); // General-purpose up, down, up/down auto-reload counter.
      LL_TIM_EnableIT_UPDATE(TIM16);
      LL_TIM_SetOnePulseMode(TIM16, LL_TIM_ONEPULSEMODE_SINGLE);
    }

    if (mstTimDelay == TIM17)
    {
      HAL_NVIC_SetPriority(TIM17_IRQn, 8, 8);
      HAL_NVIC_EnableIRQ(TIM17_IRQn);
      __HAL_RCC_TIM17_CLK_ENABLE(); // General-purpose up, down, up/down auto-reload counter.
      LL_TIM_EnableIT_UPDATE(TIM17);
      LL_TIM_SetOnePulseMode(TIM17, LL_TIM_ONEPULSEMODE_SINGLE);
    }
  }

  int32 i32TicksToDeaccelerate()
  {
    double ldTime = fabs(mdSpeedSoll - mdSpeedIst) / mdSpeedAccMax;                // v = a * t => t = v / a
    double ldTicks = 0.5 * mdSpeedAccMax * ldTime * ldTime + mdSpeedIst * ldTime;  // s = 0.5 * a*t^2 + vi * t

    return (i32)(ldTicks + 0.5);
  }


  int32 i32TimeNextTick(double ldSpeedStart, double ldSpeedEnd, i32 li32Step) // [us]
  {
    if (((ldSpeedStart + 0.2) >= ldSpeedEnd) &&
        ((ldSpeedStart - 0.2) <= ldSpeedEnd))
    {
      return (1 / ldSpeedStart) * 1000000;
    }
    else
    {
      // s = 0.5 * a*t^2 => t = sqrt(2 * s / a)
      double ldTime1 = sqrt(2 * li32Step / mdSpeedAccMax) * 1000000;

      if (li32Step > 1)
      {
        double ldTime2 = sqrt(2 * (li32Step - 1) / mdSpeedAccMax) * 1000000;
        return (i32)(ldTime1 - ldTime2 + 0.5);
      }
      return (i32)(ldTime1 + 0.5);
    }
    return 0;
  }

  double bTimeToDeaccelerate()
  {
    double lsTickstoStop = mdSpeedIst / mdSpeedAccMax;
    double ldDist = mu32StepsSoll - mu32StepsIst;

    return (lsTickstoStop < ldDist);
  }


  bool isRefSwitch()
  {
    u8 lu8Ref = !mPinRef->ui8Get();
    if (mu8Ref != lu8Ref)
    {
      mu8Ref = lu8Ref;
    }
    return (mu8Ref > 0);
  };

  //  Der Richtungsausgang gibt je nach vorgegebener Drehrichtung des Schrittmotors
  //  ein + 5 V - Signal(Drehrichtung CCW) oder ein 0 V - Signal(Drehrichtung CW) aus.
  // positive Bewegungen finden in der Richtung vom Motor weg statt.
  // 0 = negative Drehrichtung des Schrittmotors CW; 1 = positive Drehrichtung des Schrittmotors CCW
  void vSetDir(u8 lu8Dir)
  {
    mPinDir->vSet(lu8Dir);
  };

  // 0..50000Hz
  void vSetSpeed_Hz(u16 lu16Speed)
  {
    UNUSED(lu16Speed);
  };


  void vDoStepStart(u32 lu32Steps, double ldSpeed, double ldAccel)
  {
    if (lu32Steps > 0)
    {
      mu32StepsIst  = 0;
      mu32StepsSoll = lu32Steps;
      mdSpeedStart  = mdSpeedIst;
      mdSpeedSoll   = ldSpeed;
      mdSpeedAccMax = ldAccel;
      menSpeedMode  = enSpeedAccel;

      bisDriving     = True;

      mPinTakt->vSet1();
      LL_TIM_EnableCounter(mstTimStep);
      vSetDelayCounter();
    }
  };

  bool isDriving()
  {
    return bisDriving;
  }

  void vDoStepEnd()
  {
    bisDriving = False;
  };

  void vSetDelayCounter()
  {
    if (mu32StepsSoll < mu32StepsIst)
    {
      // Nächstes Delay ermitteln
      u32 lu32StepDiff = mu32StepsSoll - mu32StepsIst;
      u32 lu32StepsToStop = i32TicksToDeaccelerate();

      switch (menSpeedMode)
      {
        case enSpeedAccel:
          // Überprüfen, ob abgebremst werden muss
          if (lu32StepDiff <= lu32StepsToStop)
          {
            menSpeedMode = enSpeedStop;
            mdSpeedStart = mdSpeedIst;
            mdSpeedSoll = 0.0;
          }
          else
            // Überprüfen, ob Sollgeschwindikeit erreicht ist
            // Wenn ja, dann die Rampe verlassen
            if (mdSpeedIst >= mdSpeedSoll)
            {
              menSpeedMode = enSpeedKeep;
              mdSpeedStart = mdSpeedIst = mdSpeedSoll;
            }
          break;
        case enSpeedKeep:
          // Überprüfen, ob abgebremst werden muss
          if (lu32StepDiff <= lu32StepsToStop)
          {
            menSpeedMode = enSpeedStop;
            mdSpeedStart = mdSpeedIst;
            mdSpeedSoll = 0.0;
          }
          break;
        // Bremsen - Ramp Down
        case enSpeedStop:
          break;
      }

      u32 lu32NextTimValue = i32TimeNextTick(mdSpeedStart, mdSpeedSoll, mu32StepsIst);
      if (lu32NextTimValue > 50000) lu32NextTimValue = 50000;
      mstTimDelay->CNT = (u16)((u32)65536 - lu32NextTimValue);
      LL_TIM_EnableCounter(mstTimDelay);
    }
  }

  void vIrqHandlerTimDelay()
  {
    mPinTakt->vSet1();
    LL_TIM_EnableCounter(mstTimStep);
    vSetDelayCounter();
  };

  void vIrqHandlerTimStep()
  {
    mPinTakt->vSet0();
    isRefSwitch();
    mu32StepsIst++;

    if (mu32StepsSoll == mu32StepsIst)
    {
      vDoStepEnd();
    }
  };
};




class cCncAchse: public cCncAchseHW
{
public:
  double mdRefSpeed;     // [Hz]

  double mdPosSoll;      // [Ticks]
  double mdPosIst;       // [Ticks]

  u32    mdTimeNoMove;       // [ms]
  u32    mdTimeNoMoveReload; // [ms]

  double mdDirection;

  bool   mbEnable;


  bool   mbRefEnable;
  bool   mbRefFinished;
  u32    mu32Ref1s;
  u32    mu32RefTimeout;
  u32    mu32RefTimeoutReload;
  typedef enum
  {
    enMove1sForward1 = 0,
    enMove1sForward2,
    enMoveOnRefSwitch1,
    enMoveOnRefSwitch2,
    enMoveOffRefSwitch1,
    enMoveOffRefSwitch2,
  }tenRefMode;
  tenRefMode menRefMode;

  cCncAchse(TIM_TypeDef* lstTimDelay, TIM_TypeDef* lstTimStep, cGpPin* lPinRef, cGpPin* lPinDir, cGpPin* lPinTakt)
    : cCncAchseHW(lstTimDelay, lstTimStep, lPinRef, lPinDir, lPinTakt)
  {
    mdRefSpeed    = 2000.0;   // [Hz]

    mdPosSoll     = 0.0;      // [Ticks]
    mdPosIst      = 0.0;      // [Ticks]

    mdDirection    = 1.0;

    mdTimeNoMove = mdTimeNoMoveReload = 1 * 1000; // 1s

    mbEnable       = False;


    mbRefEnable    = False;
    mbRefFinished  = False;
    mu32Ref1s = 1 * 1000; // 1s
    mu32RefTimeout = mu32RefTimeoutReload = 1 * 1000 * 60; // 1min
    menRefMode = enMove1sForward1;
  }

  void vSetSpeed(double ldSpeed)
  {
    mdSpeedSoll = ldSpeed;
  }

  void vStop()
  {
    mdSpeedSoll = 0.0;
  }

  void vBreak()
  {
    mdSpeedSoll = 0.0;
  }


  void vStartRef()
  {
    mbRefEnable = False;
    mbRefFinished = False;
    mu32RefTimeout = mu32RefTimeoutReload;
    menRefMode = enMove1sForward1;
  }

  void DoProcessRef1ms()
  {
    if (mu32RefTimeout)
    {
      mu32RefTimeout--;
    }
    else
    {
      mbRefEnable = False;
      mbRefFinished = False;
    }

    switch (menRefMode)
    {
      case enMove1sForward1: // 1s vorfahren, falls man auf dem Referenzschalter steht
        if (isRefSwitch())
        {
          menRefMode = enMoveOnRefSwitch1;
        }
        else
        {
          vSetDir(1);
          //DoProcessSetSpeed(mdRefSpeed);
          if (mu32Ref1s)
          {
            mu32Ref1s--;
          }
          else
          {
            menRefMode = enMove1sForward2;
            mu32Ref1s = 1 * 1000; // 1s
          }
        }
        break;

      case enMove1sForward2: // Runter-Bremsen
        vSetDir(1);
        //DoProcessSetSpeed(0);
        if (mdSpeedIst <= 0.1)
        {
          menRefMode = enMoveOnRefSwitch1;
        }
        break;

      case enMoveOnRefSwitch1: // Auf Referenzschalter fahren
        vSetDir(0);
        //DoProcessSetSpeed(mdRefSpeed);

        if (isRefSwitch())
        {
          menRefMode = enMoveOffRefSwitch2;
        }
        break;

      case enMoveOnRefSwitch2: // Runter-Bremsen
        vSetDir(0);
        //DoProcessSetSpeed(0);
        if (mdSpeedIst <= 0.1)
        {
          menRefMode = enMoveOffRefSwitch1;
        }
        break;

      case enMoveOffRefSwitch1: // Von Referenzschalter runterfahren
        vSetDir(1);
        if (isRefSwitch())
        {
          vDoStepStart(1, 1500, mdSpeedAccMax);
        }
        else
        {
          mdPosIst = 0.0;
          menRefMode = enMove1sForward1;
          mbRefEnable = False;
          mbRefFinished = True;
        }
        break;

      default:
        break;
    }
  }


  void DoProcess1ms()
  {
    if (mbEnable)
    {
      if (mbRefEnable)
      {
        DoProcessRef1ms();
      }
      else
      {
      }
    }
  }
};


class cCnc: public cPalCmd
{
  public:
    cCncAchse* X;
    cCncAchse* Y;
    cCncAchse* Z;

    u8 mu8AxisCount;

    typedef enum
    {
      enModeSingle = 0,
      enMode2D5,
      enMode3D
    }tenMoveMode;

    tenMoveMode menMode;

    typedef enum
    {
      enCmdNop = 0,
      enCmdAchsenanzahl_setzen,
      enCmdReferenzfahrt,
      enCmdReferenzgeschwindigkeit_setzen,
      enCmdBewegung_relativ,
      enCmdBewegung_zur_Position,
      enCmdStop,
      enCmdBreak
    }tenProcessedCmd;

    bool mbAnswer;

    tenProcessedCmd menProcessedCmd;

    cRingBufT<uint8, uint16>* mcStreamOut;

    cCnc(cCncAchse *lcAX, cCncAchse *lcAY, cCncAchse *lcAZ,
         cRingBufT<uint8, uint16>* lcStreamOut)
    {
      mu8AxisCount = 0;
      menMode      = enMode2D5;
      menProcessedCmd = enCmdNop;
      mcStreamOut     = lcStreamOut;
      mbAnswer = False;

      X = lcAX;
      Y = lcAY;
      Z = lcAZ;
    }


    void vStringToParam(cStr* lcStrIn, u8 lu8Seperator, i32 li32Values[], u16 lu16ValueSize)
    {
      cStr_Create(lcZwerg, 64);
      cStr_Create(lcValue, 64);

      u16 lu16t;
      for (lu16t = 0; lu16t < lu16ValueSize; lu16t++)
      {
        li32Values[lu16t] = 0;
      }

      lcZwerg = *lcStrIn;

      u16 lu16SepCnt = lcZwerg.CountOf(lu8Seperator);

      if (lu16SepCnt >= lu16ValueSize) lu16SepCnt = lu16ValueSize - 1;

      u16 lu16PosStart = 0;
      u16 lu16PosEnd   = 0;

      for (lu16t = 0; lu16t < lu16SepCnt; lu16t++)
      {
        lu16PosEnd = lcZwerg.Instr(lu16PosStart, lu8Seperator);
        lcValue = lcZwerg;
        lcValue.Mid(lu16PosStart, lu16PosEnd - lu16PosStart);
        li32Values[lu16t] = lcValue.Atoi();
        lu16PosStart = lu16PosEnd + 1;
      }

      lu16PosEnd = lcZwerg.Len();
      lcValue = lcZwerg;
      lcValue.Mid(lu16PosStart, lu16PosEnd - lu16PosStart);
      li32Values[lu16t] = lcValue.Atoi();
    }

    void vSet(double ldPosX, double ldSpeedX,
              double ldPosY, double ldSpeedY,
              double ldPosZ, double ldSpeedZ)
    {
      double lfDistX = fabs(X->mdPosSoll - X->mdPosIst);
      double lfDistY = fabs(Y->mdPosSoll - Y->mdPosIst);
      double lfDistZ = fabs(Z->mdPosSoll - Z->mdPosIst);

      if (ldPosX < 0) ldPosX = 0;
      if (ldPosY < 0) ldPosY = 0;
      if (ldPosZ < 0) ldPosZ = 0;

      switch (menMode)
      {
        case enModeSingle:
          X->mdPosSoll = ldPosX;
          X->mdSpeedSoll = ldSpeedX;

          Y->mdPosSoll = ldPosY;
          Y->mdSpeedSoll = ldSpeedY;

          Z->mdPosSoll = ldPosZ;
          Z->mdSpeedSoll = ldSpeedZ;
          break;
        case enMode2D5:
          //  Im 2, 5D - Interpolationsbetrieb wird die
          //    Geschwindigkeitsangabe der Achse mit dem längsten
          //    Weg als Bahngeschwindigkeit übernommen, die
          //    Geschwindigkeit der anderen Achse entsprechend dem
          //    Wegeverhältnis angepasst.
          if (lfDistX > lfDistY)
          {
            X->mdPosSoll = ldPosX;
            X->mdSpeedSoll = ldSpeedX;

            Y->mdPosSoll = ldPosY;
            if (lfDistY > 0) Y->mdSpeedSoll = ldSpeedX * lfDistY / lfDistX;
          }
          else
          {
            X->mdPosSoll = ldPosX;
            if (lfDistX > 0) X->mdSpeedSoll = ldSpeedY * lfDistX / lfDistY;

            Y->mdPosSoll = ldPosY;
            Y->mdSpeedSoll = ldPosY;
          }

          Z->mdPosSoll = ldPosZ;
          Z->mdSpeedSoll = ldPosZ;
          break;
        case enMode3D:
          // Im Gegensatz dazu wird im 3D - Interpolationsbetrieb die
          //   Geschwindigkeitsangabe der X - Achse als Vorgabewert
          //   für die Bahngeschwindigkeit herangezogen.

          X->mdPosSoll = ldPosX;
          X->mdSpeedSoll = ldSpeedX;

          Y->mdPosSoll = ldPosY;
          if (lfDistY > 0) Y->mdSpeedSoll = ldSpeedX * lfDistY / lfDistX;

          Z->mdPosSoll = ldPosZ;
          if (lfDistZ > 0) Z->mdSpeedSoll = ldSpeedX * lfDistZ / lfDistX;
          break;
      }

      X->vDoStepStart((u32)fabs(X->mdPosSoll - X->mdPosIst), X->mdSpeedSoll, X->mdSpeedAccMax);
      Y->vDoStepStart((u32)fabs(Y->mdPosSoll - Y->mdPosIst), Y->mdSpeedSoll, Y->mdSpeedAccMax);
      Z->vDoStepStart((u32)fabs(Z->mdPosSoll - Z->mdPosIst), Z->mdSpeedSoll, Z->mdSpeedAccMax);
    }


    // Takt 0..50khz
    // Beschleunigung  25 Hz/ms, 50 Hz/ms, 75 Hz/ms, 100 Hz/ms

    // Durch Übergeben der Achsenanzahl wird die Prozessorkarte
    // neu initialisiert.Dabei wird der Datenspeicher gelöscht und zur
    // Speicheroptimierung entsprechend der Anzahl der Achsen neu
    // eingeteilt.
    void vAchsenanzahl_setzen(cStr* lcStrIn, bool lbAnswer) override
    { // @07
      UNUSED(lbAnswer);

      menProcessedCmd = enCmdAchsenanzahl_setzen;
      mbAnswer = lbAnswer;

      switch (lcStrIn->mpu8Data[2])
      {
        case '1': // x
          X->mbEnable = True;
          mu8AxisCount = 1;
          break;
        case '3': // xy
          X->mbEnable = True;
          Y->mbEnable = True;
          mu8AxisCount = 2;
          break;
        case '5': // xz
          X->mbEnable = True;
          Z->mbEnable = True;
          mu8AxisCount = 2;
          break;
        case '7': // xyz
          X->mbEnable = True;
          Y->mbEnable = True;
          Z->mbEnable = True;
          mu8AxisCount = 3;
          break;
      }
    }

    // Die Prozessorkarte verfährt alle angegebenen Achsen an ihre
    // Nullpunkte(Referenzpunkte).Die Referenzpunkte der Achsen
    // liegen bei isel - Systemen an der dem Motor zugewandten
    // Seite; positive Bewegungen finden in der Richtung vom Motor
    // weg statt.
    void vReferenzfahrt(cStr* lcStrIn, bool lbAnswer) override
    {
      UNUSED(lbAnswer);

      menProcessedCmd = enCmdReferenzfahrt;
      mbAnswer = lbAnswer;

      // @0R7 oder @0r7
      switch (lcStrIn->mpu8Data[2])
      {
        case '1': // x
          X->vStartRef();
          break;
        case '2': // y
          Y->vStartRef();
          break;
        case '3': // xy
          X->vStartRef();
          Y->vStartRef();
          break;
        case '4': // z
          Z->vStartRef();
          break;
        case '5': // xz
          X->vStartRef();
          Z->vStartRef();
          break;
        case '6': // yz
          Y->vStartRef();
          Z->vStartRef();
          break;
        case '7': // xyz
          X->vStartRef();
          Y->vStartRef();
          Z->vStartRef();
          break;
      }
    }

    // Der Befehl definiert - getrennt für jede Achse - die Geschwindigkeit,
    // mit der eine Referenzfahrt ausgeführt wird.Dabei handelt es sich nur
    // um die Geschwindigkeit, mit der die Achse in negativer Richtung auf
    // den Motor zuläuft; die Geschwindigkeit aus dem Schalter heraus lässt
    // sich nicht beeinflussen(vgl.Referenzfahrt).
    void vReferenzgeschwindigkeit_setzen(cStr* lcStrIn, bool lbAnswer) override
    {
      UNUSED(lbAnswer);

      menProcessedCmd = enCmdReferenzgeschwindigkeit_setzen;
      mbAnswer = lbAnswer;

      cStr_Create(lcZwerg, 64);

      lcZwerg = *lcStrIn;

      // @0d1000, 3000, 9000
      lcZwerg.Cut(0, 3); // "@0d" entfernen

      u16 lu16Commas = lcZwerg.CountOf(',');
      u16 lu16ExpectedCommas = 0;
      if (Y->mbEnable) lu16ExpectedCommas += 1;
      if (Z->mbEnable) lu16ExpectedCommas += 1;

      i32 li32Value[3];

      vStringToParam(&lcZwerg, ',', li32Value, lu16ExpectedCommas);

      if (lu16ExpectedCommas == lu16Commas)
      {
        switch (mu8AxisCount)
        {
          case 1:
            X->mdRefSpeed = li32Value[0];
            break;
          case 2:
            X->mdRefSpeed = li32Value[0];
            if (Y->mbEnable) Y->mdRefSpeed = li32Value[1];
                        else Z->mdRefSpeed = li32Value[1];
            break;
          case 3:
            X->mdRefSpeed = li32Value[0];
            Y->mdRefSpeed = li32Value[1];
            Z->mdRefSpeed = li32Value[2];
            break;
        }
      }
    }

    // Die Prozessorkarte gibt entsprechend der übergebenen
    // Schrittanzahl und Schrittgeschwindigkeit für jede
    // Leistungsendstufe eine Impulskette aus.Die Verfahrbewegung
    // wird sofort ausgeführt oder gespeichert.

    // Im 2,5D-Interpolationsbetrieb wird die
    // Geschwindigkeitsangabe der Achse mit dem längsten
    // Weg als Bahngeschwindigkeit übernommen, die
    // Geschwindigkeit der anderen Achse entsprechend dem
    // Wegeverhältnis angepasst.
    // Im Gegensatz dazu wird im 3D - Interpolationsbetrieb die
    // Geschwindigkeitsangabe der X - Achse als Vorgabewert
    // für die Bahngeschwindigkeit herangezogen.
    void vBewegung_relativ(cStr* lcStrIn, bool lbAnswer) override
    {
      UNUSED(lbAnswer);

      menProcessedCmd = enCmdBewegung_relativ;
      mbAnswer = lbAnswer;

      cStr_Create(lcZwerg, 64);

      lcZwerg = *lcStrIn;

      // @0A 30,800,10,900,4,90,-4,30
      lcZwerg.Cut(0, 3); // "@0a" entfernen

      u16 lu16Commas = lcZwerg.CountOf(',');
      u16 lu16ExpectedCommas = 1;
      if (Y->mbEnable) lu16ExpectedCommas += 2;
      if (Z->mbEnable) lu16ExpectedCommas += 4;

      i32 li32Value[8];

      vStringToParam(&lcZwerg, ',', li32Value, lu16ExpectedCommas);

      if (lu16Commas == lu16ExpectedCommas)
      {
        switch (mu8AxisCount)
        {
        case 1:
          vSet(X->mdPosSoll + li32Value[0], li32Value[1], 0.0, 0.0, 0.0, 0.0);
          break;
        case 2:
          if (Y->mbEnable)
          {
            vSet(X->mdPosSoll + li32Value[0], li32Value[1],
                 Y->mdPosSoll + li32Value[2], li32Value[3],
                 0.0, 0.0);
          }
          else
          {
            vSet(X->mdPosSoll + li32Value[0], li32Value[1],
                 0.0, 0.0,
                 Z->mdPosSoll + li32Value[4], li32Value[5]);
          }
          break;
        case 3:
            vSet(X->mdPosSoll + li32Value[0], li32Value[1],
                 Y->mdPosSoll + li32Value[2], li32Value[3],
                 Z->mdPosSoll + li32Value[4], li32Value[5]);
          break;
        }
      }
    }

    // Die Prozessorkarte fährt mit den angegebenen
    // Geschwindigkeiten an die angegebene Position.Die
    // Verfahrbewegung wird sofort ausgeführt.
    void vBewegung_zur_Position(cStr* lcStrIn, bool lbAnswer) override
    {
      UNUSED(lbAnswer);

      menProcessedCmd = enCmdBewegung_zur_Position;
      mbAnswer = lbAnswer;

      cStr_Create(lcZwerg, 64);

      lcZwerg = *lcStrIn;

      // @0A 30,800,10,900,4,90,-4,30
      lcZwerg.Cut(0, 3); // "@0a" entfernen

      u16 lu16Commas = lcZwerg.CountOf(',');
      u16 lu16ExpectedCommas = 1;
      if (Y->mbEnable) lu16ExpectedCommas += 2;
      if (Z->mbEnable) lu16ExpectedCommas += 4;

      i32 li32Value[8];

      vStringToParam(&lcZwerg, ',', li32Value, lu16ExpectedCommas);

      if (lu16Commas == lu16ExpectedCommas)
      {
        switch (mu8AxisCount)
        {
        case 1:
          vSet(li32Value[0], li32Value[1], 0.0, 0.0, 0.0, 0.0);
          break;
        case 2:
          if (Y->mbEnable)
          {
            vSet(li32Value[0], li32Value[1],
                 li32Value[2], li32Value[3],
                 0.0, 0.0);
          }
          else
          {
            vSet(li32Value[0], li32Value[1],
                 0.0, 0.0,
                 li32Value[4], li32Value[5]);
          }
          break;
        case 3:
            vSet(li32Value[0], li32Value[1],
                 li32Value[2], li32Value[3],
                 li32Value[4], li32Value[5]);
          break;
        }
      }
    }

    // Die Prozessorkarte bricht eine momentane Verfahrbewegung ab.
    void vStop(cStr* lcStrIn, bool lbAnswer) override
    {
      UNUSED(lcStrIn);
      UNUSED(lbAnswer);
      menProcessedCmd = enCmdStop;
      mbAnswer = lbAnswer;
    }

    // Der Break - Befehl dient zum Abbruch des Aktuellen Positioniervorganges.
    void vBreak(cStr* lcStrIn, bool lbAnswer) override
    {
      UNUSED(lcStrIn);
      UNUSED(lbAnswer);
      menProcessedCmd = enCmdBreak;
      mbAnswer = lbAnswer;
    }

    void DoProcess1ms()
    {
      X->DoProcess1ms();
      Y->DoProcess1ms();
      Z->DoProcess1ms();

      if ((X->mdTimeNoMove == 0) &&
          (Y->mdTimeNoMove == 0) &&
          (Z->mdTimeNoMove == 0))
      {
        // Alle Achsen wurden seit 1s nicht mehr bewegt.
        // Stromabsenkung
      }


      switch (menProcessedCmd)
      {
        case enCmdNop:
          menProcessedCmd = enCmdNop;
          break;
        case enCmdAchsenanzahl_setzen:
          menProcessedCmd = enCmdNop;
          break;
        case enCmdReferenzfahrt:
          if (!((X->mbRefEnable) ||
                (Y->mbRefEnable) ||
                (Z->mbRefEnable)))
          {
            menProcessedCmd = enCmdNop;
            if (mbAnswer)
            {
              mbAnswer = False;
              mcStreamOut->put('0');
            }
          }
          break;
        case enCmdReferenzgeschwindigkeit_setzen:
          menProcessedCmd = enCmdNop;
          break;
        case enCmdBewegung_relativ:
          if ((!X->isDriving()) &&
              (!Y->isDriving()) &&
              (!Z->isDriving()))
          {
            menProcessedCmd = enCmdNop;
            if (mbAnswer)
            {
              mbAnswer = False;
              mcStreamOut->put('0');
            }
          }
          break;
        case enCmdBewegung_zur_Position:
          if ((!X->isDriving()) &&
              (!Y->isDriving()) &&
              (!Z->isDriving()))
          {
            menProcessedCmd = enCmdNop;
            if (mbAnswer)
            {
              mbAnswer = False;
              mcStreamOut->put('0');
            }
          }
          break;
        case enCmdStop:
          menProcessedCmd = enCmdNop;
          break;
        case enCmdBreak:
          menProcessedCmd = enCmdNop;
          break;
      }
    }
};

#endif /* _C_CNC_H */
