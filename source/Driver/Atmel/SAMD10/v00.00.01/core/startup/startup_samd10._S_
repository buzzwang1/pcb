/* File: startup_ARMCM3.S
 * Purpose: startup file for Cortex-M3 devices. Should use with
 *   GCC for ARM Embedded Processors
 * Version: V1.3
 * Date: 08 Feb 2012
 *
 * Copyright (c) 2012, ARM Limited
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the ARM Limited nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ARM LIMITED BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES//
 * LOSS OF USE, DATA, OR PROFITS// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
    .syntax unified
    .arch armv7-m

    .section .stack
    .align 3
#ifdef __STACK_SIZE
    .equ    Stack_Size, __STACK_SIZE
#else
    .equ    Stack_Size, 0x400
#endif
    .globl    __StackTop
    .globl    __StackLimit
__StackLimit:
    .space    Stack_Size
    .size __StackLimit, . - __StackLimit
__StackTop:
    .size __StackTop, . - __StackTop

    .section .heap
    .align 3
#ifdef __HEAP_SIZE
    .equ    Heap_Size, __HEAP_SIZE
#else
    .equ    Heap_Size, 0xC00
#endif
    .globl    __HeapBase
    .globl    __HeapLimit
__HeapBase:
    .if    Heap_Size
    .space    Heap_Size
    .endif
    .size __HeapBase, . - __HeapBase
__HeapLimit:
    .size __HeapLimit, . - __HeapLimit

    .section .isr_vector
    .align 2
    .globl __isr_vector
__isr_vector:
    .long    __StackTop            /* Top of Stack */
    .long    Reset_Handler         /* Reset Handler */
    .long    NMI_Handler           /* NMI Handler */
    .long    HardFault_Handler     /* Hard Fault Handler */
    .long    0                     /* MPU Fault Handler */
    .long    0                     /* Bus Fault Handler */
    .long    0                     /* Usage Fault Handler */
    .long    0                     /* Reserved */
    .long    0                     /* Reserved */
    .long    0                     /* Reserved */
    .long    0                     /* Reserved */
    .long    SVC_Handler           /* SVCall Handler */
    .long    0                     /* Debug Monitor Handler */
    .long    0                     /* Reserved */
    .long    PendSV_Handler        /* PendSV Handler */
    .long    SysTick_Handler       /* SysTick Handler */


    /* Configurable interrupts */
    .long PM_Handler,             /*  0 Power Manager */
    .long SYSCTRL_Handler,        /*  1 System Control */
    .long WDT_Handler,            /*  2 Watchdog Timer */
    .long RTC_Handler,            /*  3 Real-Time Counter */
    .long EIC_Handler,            /*  4 External Interrupt Controller */
    .long NVMCTRL_Handler,        /*  5 Non-Volatile Memory Controller */
    .long DMAC_Handler,           /*  6 Direct Memory Access Controller */
    .long USB_Handler,            /*  7 Universal Serial Bus */
    .long EVSYS_Handler,          /*  8 Event System Interface */
    .long SERCOM0_Handler,        /*  9 Serial Communication Interface 0 */
    .long SERCOM1_Handler,        /* 10 Serial Communication Interface 1 */
    .long SERCOM2_Handler,        /* 11 Serial Communication Interface 2 */
    .long TCC0_Handler,           /* 12 Timer Counter Control */
    .long TC1_Handler,            /* 13 Basic Timer Counter 0 */
    .long TC2_Handler,            /* 14 Basic Timer Counter 1 */
    .long ADC_Handler,            /* 15 Analog Digital Converter */
    .long AC_Handler,             /* 16 Analog Comparators */
    .long DAC_Handler,            /* 17 Digital Analog Converter */
    .long PTC_Handler             /* 18 Peripheral Touch Controller */

    .size    __isr_vector, . - __isr_vector

    .text
    .thumb
    .thumb_func
    .align 2
    .globl    Reset_Handler
    .type    Reset_Handler, %function
Reset_Handler:
/*     Loop to copy data from read only memory to RAM. The ranges
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */


    ldr    r0, =PreMain
    blx    r0

    ldr    r0, =_start
    bx    r0
    .pool
    .size Reset_Handler, . - Reset_Handler

/* Our weak _start alternative if we don't use the library _start
 * The zero init section must be cleared, otherwise the librtary is
 * doing that */
    .align 1
    .thumb_func
    .weak _start
    .type _start, %function
_start:

    /* Zero fill the bss segment. */
    ldr   r1, = __bss_start__
    ldr   r2, = __bss_end__
    movs  r3, #0
    b  .fill_zero_bss
.loop_zero_bss:
    str  r3, [r1], #4

.fill_zero_bss:
    cmp  r1, r2
    bcc  .loop_zero_bss

    /* Jump to our main */
    bl main
    b .
    .size    _start, . - _start

/*    Macro to define default handlers. Default handler
 *    will be weak symbol and just dead loops. They can be
 *    overwritten by other handlers */
    .macro    def_irq_handler    handler_name
    .align 1
    .thumb_func
    .weak    \handler_name
    .type    \handler_name, %function
\handler_name :
    b    .
    .size    \handler_name, . - \handler_name
    .endm

    def_irq_handler    NMI_Handler
    def_irq_handler    HardFault_Handler
    def_irq_handler    SVC_Handler
    def_irq_handler    DebugMon_Handler
    def_irq_handler    PendSV_Handler
    def_irq_handler    SysTick_Handler


    /* Configurable interrupts */
    def_irq_handler PM_Handler,             /*  0 Power Manager */
    def_irq_handler SYSCTRL_Handler,        /*  1 System Control */
    def_irq_handler WDT_Handler,            /*  2 Watchdog Timer */
    def_irq_handler RTC_Handler,            /*  3 Real-Time Counter */
    def_irq_handler EIC_Handler,            /*  4 External Interrupt Controller */
    def_irq_handler NVMCTRL_Handler,        /*  5 Non-Volatile Memory Controller */
    def_irq_handler DMAC_Handler,           /*  6 Direct Memory Access Controller */
    def_irq_handler USB_Handler,            /*  7 Universal Serial Bus */
    def_irq_handler EVSYS_Handler,          /*  8 Event System Interface */
    def_irq_handler SERCOM0_Handler,        /*  9 Serial Communication Interface 0 */
    def_irq_handler SERCOM1_Handler,        /* 10 Serial Communication Interface 1 */
    def_irq_handler SERCOM2_Handler,        /* 11 Serial Communication Interface 2 */
    def_irq_handler TCC0_Handler,           /* 12 Timer Counter Control */
    def_irq_handler TC1_Handler,            /* 13 Basic Timer Counter 0 */
    def_irq_handler TC2_Handler,            /* 14 Basic Timer Counter 1 */
    def_irq_handler ADC_Handler,            /* 15 Analog Digital Converter */
    def_irq_handler AC_Handler,             /* 16 Analog Comparators */
    def_irq_handler DAC_Handler,            /* 17 Digital Analog Converter */
    def_irq_handler PTC_Handler             /* 18 Peripheral Touch Controller */

    .end
