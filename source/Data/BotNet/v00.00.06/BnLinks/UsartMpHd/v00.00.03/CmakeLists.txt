# PCB: 20210330
# --------------------- Set package name -------------------------------------
# Insert here a the package library name. Else it is taken from the genlists.cmake
# set(PCB_PkgName "${PCB_PkgPrefix}[MyPackage]")
set(PCB_PkgName "")

# ---------------------  Load configuration of root and all variants. From root to variant -------------------------------------
if (EXISTS "${CMAKE_CURRENT_LIST_DIR}/_PkgCfg.cmake")
  message(STATUS "  Include package's configuration: ./_PkgCfg.cmake")
  include("${CMAKE_CURRENT_LIST_DIR}/_PkgCfg.cmake")
endif()
# Load option variant configuration to overwrite the root
if (PCB_PkgVar)
  if (NOT ${PCB_PkgVar} STREQUAL "")
    # Try to split at ':'
    string(REPLACE ":" ";" lLstVariants ${PCB_PkgVar})
    set(lszVariantsFolder "")
    foreach(lszVariant ${lLstVariants})
      set(lszVariantsFolder "${lszVariantsFolder}/_var/${lszVariant}")
      if (EXISTS "${CMAKE_CURRENT_LIST_DIR}/${lszVariantsFolder}/_PkgCfg.cmake")
        message(STATUS "  Include package's variant configuration: .${lszVariantsFolder}/_PkgCfg.cmake")
        include("${CMAKE_CURRENT_LIST_DIR}/${lszVariantsFolder}/_PkgCfg.cmake")
      endif()
    endforeach()
  endif()
endif()

# --------------------- Add package genlist  -------------------------------------
set (lszVariantsFolder  "")
if (PCB_PkgVar)
  if (NOT ${PCB_PkgVar} STREQUAL "")
    string(REPLACE ":" "/_var/" lszVariantsFolder ${PCB_PkgVar})
    set (lszVariantsFolder  "/_var/${lszVariantsFolder}")
  endif()
endif()

if (EXISTS "${CMAKE_CURRENT_LIST_DIR}${lszVariantsFolder}/_PkgGenLists.cmake")
  message(STATUS "  Include package's genlist: .${lszVariantsFolder}/_PkgGenLists.cmake")
  include("${CMAKE_CURRENT_LIST_DIR}${lszVariantsFolder}/_PkgGenLists.cmake")
  # overwrite the module_name with the name from the genlist
  if ("${PCB_PkgName}" STREQUAL "")
    set(PCB_PkgName "${PCB_PkgPrefix}${gen_pkg_name}")
  endif()

  # get the file lists
  set (this_files               ${gen_files})
  set (this_include_directories ${gen_include_directories})

  list(APPEND this_files ${gen_asmfiles})
else()
  message(WARNING "No package genlist found: ${CMAKE_CURRENT_LIST_DIR}${lszVariantsFolder}/_PkgGenLists.cmake")
endif()

if ("${PCB_PkgName}" STREQUAL "") 
  message(WARNING "No package name defined")
endif()


# Use LinkLibraries defined in _PkgCfg.cmake
if (PkgCfg_ListLinkLibraries)
  set(lListLinkLibraries ${PkgCfg_ListLinkLibraries})
endif()
if (lListLinkLibraries)
  message(STATUS "  Manual linked to ${lListLinkLibraries}")
endif() 

# check if there are any source files. If not, make an interface library
if(NOT this_files)
  # --------------------- Interface library (only header files) -------------------------------------
  # interface library
  message(STATUS "  Interface library")
  add_library(${PCB_PkgName}_lib INTERFACE)
  target_include_directories(${PCB_PkgName}_lib INTERFACE ${this_include_directories})
  
  # In case the package should be linked with a certain library
  if (lListLinkLibraries)
    target_link_libraries(${PCB_PkgName}_lib INTERFACE ${lListLinkLibraries})
  endif() 
else()
  # --------------------- Standard library (source + header files) -------------------------------------
  # standard library
  add_library(${PCB_PkgName}_lib ${this_files})
  target_include_directories(${PCB_PkgName}_lib PUBLIC ${this_include_directories})

  # Optional set package specific compile options
  if (PkgCfg_TargetCompileOption)
    message(STATUS "  TargetCompileOptions(package): ${PkgCfg_TargetCompileOption}")
    target_compile_options(${PCB_PkgName}_lib PRIVATE ${PkgCfg_TargetCompileOption})	
  endif()
  
   
  # Optional set package specific compile options passed by the package list
  if (PCB_PkgBuildOptions)
    if (NOT ${PCB_PkgBuildOptions} STREQUAL "") 
      string(REPLACE "," ";" PCB_PkgBuildOptions2 ${PCB_PkgBuildOptions})
      message(STATUS "  TargetCompileOptions(packagelist): ${PCB_PkgBuildOptions2}")
	    target_compile_options(${PCB_PkgName}_lib PRIVATE ${PCB_PkgBuildOptions2})
    endif()
  endif()
  
  
  # In case the package should be linked with a certain library
  if (lListLinkLibraries)
    target_link_libraries(${PCB_PkgName}_lib PUBLIC ${lListLinkLibraries})
  endif()
endif()


set(PCB_ListTargetLinkLibs "${PCB_ListTargetLinkLibs};${PCB_PkgName}_lib"               PARENT_SCOPE)

# --------------------- main package -------------------------------------
# In case it is the main module return the main.c and the include files
if ("${PCB_PkgName}" STREQUAL "main")
  message(STATUS "  Main library")
  set(PCB_ListTargetExeFiles "${PCB_ListTargetExeFiles};${PkgCfg_ListTargetExeFiles}" PARENT_SCOPE)
  foreach(lRelFolder ${this_include_directories})
    list(APPEND lLstDirInclude "${CMAKE_CURRENT_LIST_DIR}/${lRelFolder}") 
  endforeach()
  set(PCB_ListTargetIncDirs  "${PCB_ListTargetIncDirs};${lLstDirInclude}"  PARENT_SCOPE)
endif()
