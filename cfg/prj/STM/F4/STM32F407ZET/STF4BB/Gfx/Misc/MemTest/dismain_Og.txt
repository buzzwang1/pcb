
U:\E2\Projekte\SW\Code\pcb\bin\STM\F4\STM32F407ZET\STF4BB\Gfx\MemTest\Debug\cmake\source\main\STM32F407ZET\STF4BB\Gfx\MemTest\CMakeFiles\main_lib.dir\main.cpp.obj:     file format elf32-littlearm


Disassembly of section .text._ZN20cScreen_Bpp16_5R6G5B17u32PxlIdx2ByteIdxEm:

00000000 <cScreen_Bpp16_5R6G5B::u32PxlIdx2ByteIdx(unsigned long)>:
      : cScreen(liGfxAOIx1, liGfxAOIy1, liGfxAOIx2, liGfxAOIy2, lcBm) {};
    cScreen_Bpp16_5R6G5B(GfxInt liGfxAOIx1, GfxInt liGfxAOIy1, GfxInt liGfxAOIx2, GfxInt liGfxAOIy2, cScreen* lcScreen)
      : cScreen(liGfxAOIx1, liGfxAOIy1, liGfxAOIx2, liGfxAOIy2, lcScreen) {};
    ~cScreen_Bpp16_5R6G5B() {};

    SCREEN_INLINE u32 u32PxlIdx2ByteIdx(u32 lui32PxlIdx)  {return (lui32PxlIdx  * 2);};
   0:	0048      	lsls	r0, r1, #1
   2:	4770      	bx	lr

Disassembly of section .text._ZN20cScreen_Bpp16_5R6G5B17u32ByteIdx2PxlIdxEm:

00000000 <cScreen_Bpp16_5R6G5B::u32ByteIdx2PxlIdx(unsigned long)>:
    SCREEN_INLINE u32 u32ByteIdx2PxlIdx(u32 lui32ByteIdx) {return (lui32ByteIdx / 2);};
   0:	0848      	lsrs	r0, r1, #1
   2:	4770      	bx	lr

Disassembly of section .text._ZN20cScreen_Bpp16_5R6G5B5vFillEm:

00000000 <cScreen_Bpp16_5R6G5B::vFill(unsigned long)>:

    SCREEN_INLINE void vFill(u32 lui32Col)
   0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4:	4607      	mov	r7, r0
   6:	460c      	mov	r4, r1
    {
      GfxInt liGfxY;
      GfxInt liGfxWidth;

      u16* lpui16Data = (u16*)&mpcBm->mpui8Data[u32PxlIdx2ByteIdx(mpcBm->u32PxlIdx(miGfxClipPosx1, miGfxClipPosy1))];
   8:	6943      	ldr	r3, [r0, #20]
   a:	681d      	ldr	r5, [r3, #0]
   c:	6802      	ldr	r2, [r0, #0]
   e:	6812      	ldr	r2, [r2, #0]
  10:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
  14:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
    BM_INLINE bool   bChkInit()                                      {return (mpui8Data != BM_INVALID);};
    BM_INLINE bool   bChkSize(GfxInt liGfxWidth, GfxInt liGfxHeight) {return ((miGfxWidth == liGfxWidth) && (miGfxHeight == liGfxHeight));};
    BM_INLINE bool   bChkSize(cBitmap lcBm)                          {return ((miGfxWidth == lcBm.miGfxWidth) && (miGfxHeight == lcBm.miGfxHeight));};
    BM_INLINE u32    u32PosX(u32 lui32PxlIdx)                        {return ((lui32PxlIdx) % miGfxWidth);};
    BM_INLINE u32    u32PosY(u32 lui32PxlIdx)                        {return ((lui32PxlIdx) / miGfxWidth);};
    BM_INLINE u32    u32PxlIdx(GfxInt liGfxX, GfxInt liGfxY)         {return ((uint32)((liGfxY) * miGfxWidth + (liGfxX)));};
  18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  1c:	fb03 6101 	mla	r1, r3, r1, r6
  20:	4790      	blx	r2
  22:	eb05 0800 	add.w	r8, r5, r0

      liGfxWidth  = miGfxClipPosx2 - miGfxClipPosx1 + 1;
  26:	89be      	ldrh	r6, [r7, #12]
  28:	893b      	ldrh	r3, [r7, #8]
  2a:	1af6      	subs	r6, r6, r3
  2c:	b2b6      	uxth	r6, r6
  2e:	3601      	adds	r6, #1
  30:	b236      	sxth	r6, r6

      lui32Col = u32GetCol(lui32Col);
  32:	683b      	ldr	r3, [r7, #0]
  34:	695b      	ldr	r3, [r3, #20]
  36:	4621      	mov	r1, r4
  38:	4638      	mov	r0, r7
  3a:	4798      	blx	r3

      for (liGfxY = miGfxClipPosy1; liGfxY <= miGfxClipPosy2; liGfxY++)
  3c:	f9b7 c00a 	ldrsh.w	ip, [r7, #10]
  40:	e014      	b.n	6c <cScreen_Bpp16_5R6G5B::vFill(unsigned long)+0x6c>

      lui32Value = (lui16Value << 16) + lui16Value;

      if (luixSize > 7)
      {
        luixCount = luixSize >> 3; // 8Byte Blöcke
  42:	08f5      	lsrs	r5, r6, #3
        luixSize &= 7;
  44:	f006 0207 	and.w	r2, r6, #7
      uint32* lpui32Dest = (uint32*)lpui16Dest;
  48:	4643      	mov	r3, r8

        while (luixCount > 0) // 4 * 4 Byte = 16Byte
  4a:	b1d5      	cbz	r5, 82 <cScreen_Bpp16_5R6G5B::vFill(unsigned long)+0x82>
        {
          *lpui32Dest++ = lui32Value;
  4c:	6019      	str	r1, [r3, #0]
          *lpui32Dest++ = lui32Value;
  4e:	6059      	str	r1, [r3, #4]
          *lpui32Dest++ = lui32Value;
  50:	6099      	str	r1, [r3, #8]
          *lpui32Dest++ = lui32Value;
  52:	60d9      	str	r1, [r3, #12]
          luixCount--;
  54:	3d01      	subs	r5, #1
          *lpui32Dest++ = lui32Value;
  56:	3310      	adds	r3, #16
  58:	e7f7      	b.n	4a <cScreen_Bpp16_5R6G5B::vFill(unsigned long)+0x4a>
      {
        cMemTools::vMemSet16(lpui16Data, lui32Col, liGfxWidth);
        lpui16Data += mpcBm->miGfxWidth;
  5a:	697b      	ldr	r3, [r7, #20]
  5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  60:	eb08 0843 	add.w	r8, r8, r3, lsl #1
      for (liGfxY = miGfxClipPosy1; liGfxY <= miGfxClipPosy2; liGfxY++)
  64:	f10c 0c01 	add.w	ip, ip, #1
  68:	fa0f fc8c 	sxth.w	ip, ip
  6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  70:	4563      	cmp	r3, ip
  72:	db0c      	blt.n	8e <cScreen_Bpp16_5R6G5B::vFill(unsigned long)+0x8e>
        cMemTools::vMemSet16(lpui16Data, lui32Col, liGfxWidth);
  74:	b284      	uxth	r4, r0
  76:	4632      	mov	r2, r6
      lui32Value = (lui16Value << 16) + lui16Value;
  78:	eb04 4104 	add.w	r1, r4, r4, lsl #16
      if (luixSize > 7)
  7c:	2e07      	cmp	r6, #7
  7e:	d8e0      	bhi.n	42 <cScreen_Bpp16_5R6G5B::vFill(unsigned long)+0x42>
  80:	4643      	mov	r3, r8
        }
        lpui16Dest = (uint16*)lpui32Dest;
      }

      // Den Rest byteweise
      while (luixSize > 0)
  82:	2a00      	cmp	r2, #0
  84:	d0e9      	beq.n	5a <cScreen_Bpp16_5R6G5B::vFill(unsigned long)+0x5a>
      {
        *lpui16Dest++ = lui16Value;
  86:	801c      	strh	r4, [r3, #0]
        luixSize--;
  88:	3a01      	subs	r2, #1
        *lpui16Dest++ = lui16Value;
  8a:	3302      	adds	r3, #2
  8c:	e7f9      	b.n	82 <cScreen_Bpp16_5R6G5B::vFill(unsigned long)+0x82>
      }
    }
  8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section .text._ZN20cScreen_Bpp16_5R6G5B9vPpAbsRawEssm:

00000000 <cScreen_Bpp16_5R6G5B::vPpAbsRaw(short, short, unsigned long)>:

    SCREEN_INLINE void vPpAbsRaw(GfxInt liGfxX, GfxInt liGfxY, u32 lui32Col)
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4605      	mov	r5, r0
   4:	460e      	mov	r6, r1
   6:	4614      	mov	r4, r2
    {
      lui32Col = u32GetCol(lui32Col);
   8:	6802      	ldr	r2, [r0, #0]
   a:	6952      	ldr	r2, [r2, #20]
   c:	4619      	mov	r1, r3
   e:	4790      	blx	r2
      SCREEN_BPP16_5R6G5B_PP(liGfxX, liGfxY, mpcBm, lui32Col);
  10:	696b      	ldr	r3, [r5, #20]
      cMemTools::vMemSet16((u16*)mpui8Data, lui16Col, u32Size());
    }

    BM_INLINE void vPp(GfxInt liGfxX, GfxInt liGfxY, u16 lui16Col)
    {
      u16* lpui16Data = (u16*)mpui8Data;
  12:	681a      	ldr	r2, [r3, #0]
  14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  18:	fb03 6404 	mla	r4, r3, r4, r6
      lpui16Data[u32PxlIdx(liGfxX, liGfxY)] = lui16Col;
  1c:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]
    }
  20:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN20cScreen_Bpp16_5R6G5B11u32GpAbsRawEss:

00000000 <cScreen_Bpp16_5R6G5B::u32GpAbsRaw(short, short)>:
    SCREEN_INLINE u32 u32GpAbsRaw(GfxInt liGfxX, GfxInt liGfxY)
    {
      u8 r, g, b;
      u16 lu16Col;

      lu16Col = SCREEN_BPP16_5R6G5B_GP(liGfxX, liGfxY, mpcBm);
   0:	6943      	ldr	r3, [r0, #20]
    }

    BM_INLINE u16 u16Gp(GfxInt liGfxX, GfxInt liGfxY)
    {
      u16* lpui16Data = (u16*)mpui8Data;
   2:	6818      	ldr	r0, [r3, #0]
   4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   8:	fb03 1202 	mla	r2, r3, r2, r1
      return lpui16Data[u32PxlIdx(liGfxX, liGfxY)];
   c:	f830 3012 	ldrh.w	r3, [r0, r2, lsl #1]

      if (!lu16Col)
  10:	b973      	cbnz	r3, 30 <cScreen_Bpp16_5R6G5B::u32GpAbsRaw(short, short)+0x30>
      {
        if (lu16Col < 0xFFFF)
  12:	f64f 72ff 	movw	r2, #65535	; 0xffff
  16:	4293      	cmp	r3, r2
  18:	d00c      	beq.n	34 <cScreen_Bpp16_5R6G5B::u32GpAbsRaw(short, short)+0x34>
        {
          r = BM_BPP16_5R6G5B_GET_R(lu16Col) << 3;
          g = BM_BPP16_5R6G5B_GET_G(lu16Col) << 2;
  1a:	115a      	asrs	r2, r3, #5
  1c:	0092      	lsls	r2, r2, #2
          b = BM_BPP16_5R6G5B_GET_B(lu16Col) << 3;
  1e:	00d8      	lsls	r0, r3, #3
          return BM_BPP32_8R8G8B_RGB(r, g, b);
  20:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
  24:	b2d2      	uxtb	r2, r2
  26:	4413      	add	r3, r2
  28:	b2c0      	uxtb	r0, r0
  2a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
  2e:	4770      	bx	lr
        else
        {
          return BM_BPP32_8R8G8B_RGB(0xFF, 0xFF, 0xFF);
        }
      }
      return 0;
  30:	2000      	movs	r0, #0
  32:	4770      	bx	lr
          return BM_BPP32_8R8G8B_RGB(0xFF, 0xFF, 0xFF);
  34:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    }
  38:	4770      	bx	lr

Disassembly of section .text._ZN20cScreen_Bpp16_5R6G5B9u32GetColEm:

00000000 <cScreen_Bpp16_5R6G5B::u32GetCol(unsigned long)>:

    SCREEN_INLINE u32 u32GetCol(u32 lui32Col)
    {
      if (lui32Col)
   0:	4608      	mov	r0, r1
   2:	b181      	cbz	r1, 26 <cScreen_Bpp16_5R6G5B::u32GetCol(unsigned long)+0x26>
      {
        if (lui32Col < BM_BPP32_8R8G8B_RGB(0xFF, 0xFF, 0xFF))
   4:	4b08      	ldr	r3, [pc, #32]	; (28 <cScreen_Bpp16_5R6G5B::u32GetCol(unsigned long)+0x28>)
   6:	4299      	cmp	r1, r3
   8:	d80b      	bhi.n	22 <cScreen_Bpp16_5R6G5B::u32GetCol(unsigned long)+0x22>
        {
          u8 r, g, b;
          r = BM_BPP32_8R8G8B_GET_R(lui32Col) >> 3;
   a:	f3c1 42c4 	ubfx	r2, r1, #19, #5
          g = BM_BPP32_8R8G8B_GET_G(lui32Col) >> 2;
   e:	f3c1 2385 	ubfx	r3, r1, #10, #6
          b = BM_BPP32_8R8G8B_GET_B(lui32Col) >> 3;
  12:	f3c1 00c4 	ubfx	r0, r1, #3, #5
          lui32Col = BM_BPP16_5R6G5B_RGB(r, g, b);
  16:	eb03 1382 	add.w	r3, r3, r2, lsl #6
  1a:	015b      	lsls	r3, r3, #5
  1c:	b29b      	uxth	r3, r3
  1e:	4418      	add	r0, r3
  20:	4770      	bx	lr
        }
        else
        {
          return 0xFFFF;
  22:	f64f 70ff 	movw	r0, #65535	; 0xffff
        }
      }
      return lui32Col;
    }
  26:	4770      	bx	lr
  28:	00fffffe 	.word	0x00fffffe

Disassembly of section .text._ZN20cScreen_Bpp16_5R6G5B12vLineHAbsRawEsssm:

00000000 <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long)>:

    // Zeichnet eine horizontale Linie
    SCREEN_INLINE void vLineHAbsRaw(GfxInt liGfxX1, GfxInt liGfxX2, GfxInt liGfxY1, uint32 lui32Col)
   0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2:	4605      	mov	r5, r0
   4:	460c      	mov	r4, r1
   6:	4616      	mov	r6, r2


  SCREEN_INLINE void vSort(GfxInt &liGfxV1, GfxInt &liGfxV2)
  {
    GfxInt liGfxV;
    if (liGfxV1 > liGfxV2)
   8:	4291      	cmp	r1, r2
   a:	dc01      	bgt.n	10 <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long)+0x10>
   c:	460e      	mov	r6, r1
   e:	4614      	mov	r4, r2
        u32  lui32Idx;
        u32  lui32BytePos;

        vSort(liGfxX1, liGfxX2);

        lui32Idx = mpcBm->u32PxlIdx(liGfxX1, liGfxY1);
  10:	696a      	ldr	r2, [r5, #20]
  12:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
        lui32BytePos = u32PxlIdx2ByteIdx(lui32Idx);
  16:	682a      	ldr	r2, [r5, #0]
  18:	6812      	ldr	r2, [r2, #0]
  1a:	fb01 6103 	mla	r1, r1, r3, r6
  1e:	4628      	mov	r0, r5
  20:	4790      	blx	r2
  22:	4607      	mov	r7, r0

        lui32Col = u32GetCol(lui32Col);
  24:	682b      	ldr	r3, [r5, #0]
  26:	695b      	ldr	r3, [r3, #20]
  28:	9906      	ldr	r1, [sp, #24]
  2a:	4628      	mov	r0, r5
  2c:	4798      	blx	r3

        lpui16Data = (uint16*)(mpcBm->mpui8Data + lui32BytePos);
  2e:	696b      	ldr	r3, [r5, #20]
  30:	681b      	ldr	r3, [r3, #0]
  32:	443b      	add	r3, r7
        cMemTools::vMemSet16(lpui16Data, lui32Col, liGfxX2 - liGfxX1 + 1);
  34:	b280      	uxth	r0, r0
  36:	1ba1      	subs	r1, r4, r6
  38:	3101      	adds	r1, #1
      lui32Value = (lui16Value << 16) + lui16Value;
  3a:	eb00 4200 	add.w	r2, r0, r0, lsl #16
      if (luixSize > 7)
  3e:	2907      	cmp	r1, #7
  40:	d90a      	bls.n	58 <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long)+0x58>
        luixCount = luixSize >> 3; // 8Byte Blöcke
  42:	08cc      	lsrs	r4, r1, #3
        luixSize &= 7;
  44:	f001 0107 	and.w	r1, r1, #7
        while (luixCount > 0) // 4 * 4 Byte = 16Byte
  48:	b134      	cbz	r4, 58 <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long)+0x58>
          *lpui32Dest++ = lui32Value;
  4a:	601a      	str	r2, [r3, #0]
          *lpui32Dest++ = lui32Value;
  4c:	605a      	str	r2, [r3, #4]
          *lpui32Dest++ = lui32Value;
  4e:	609a      	str	r2, [r3, #8]
          *lpui32Dest++ = lui32Value;
  50:	60da      	str	r2, [r3, #12]
          luixCount--;
  52:	3c01      	subs	r4, #1
          *lpui32Dest++ = lui32Value;
  54:	3310      	adds	r3, #16
  56:	e7f7      	b.n	48 <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long)+0x48>
      while (luixSize > 0)
  58:	b119      	cbz	r1, 62 <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long)+0x62>
        *lpui16Dest++ = lui16Value;
  5a:	8018      	strh	r0, [r3, #0]
        luixSize--;
  5c:	3901      	subs	r1, #1
        *lpui16Dest++ = lui16Value;
  5e:	3302      	adds	r3, #2
  60:	e7fa      	b.n	58 <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long)+0x58>
      }
    }
  62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text._ZN20cScreen_Bpp16_5R6G5B12vLineHAbsRawEsssmm:

00000000 <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long, unsigned long)>:


    // Zeichnet eine horizontale Linie
    SCREEN_INLINE void vLineHAbsRaw(GfxInt liGfxX1, GfxInt liGfxX2, GfxInt liGfxY1, uint32 lui32Col1, uint32 lui32Col2)
   0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	b085      	sub	sp, #20
   6:	9303      	str	r3, [sp, #12]
   8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    {
      //if (bChkInit())
      {
        if (lui32Col1 == lui32Col2)
   c:	429c      	cmp	r4, r3
   e:	d02a      	beq.n	66 <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long, unsigned long)+0x66>
  10:	4291      	cmp	r1, r2
  12:	dc02      	bgt.n	1a <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long, unsigned long)+0x1a>
  14:	4615      	mov	r5, r2
  16:	460a      	mov	r2, r1
  18:	4629      	mov	r1, r5
          u8 r, g, b;
          GfxInt liGfxPos;

          vSort(liGfxX1, liGfxX2);

          r1 = BM_BPP32_8R8G8B_GET_R(lui32Col1) >> 3;
  1a:	f3c4 4ac4 	ubfx	sl, r4, #19, #5
          g1 = BM_BPP32_8R8G8B_GET_G(lui32Col1) >> 2;
  1e:	f3c4 2985 	ubfx	r9, r4, #10, #6
          b1 = BM_BPP32_8R8G8B_GET_B(lui32Col1) >> 3;
  22:	f3c4 04c4 	ubfx	r4, r4, #3, #5
  26:	fa5f fb84 	uxtb.w	fp, r4

          r2 = BM_BPP32_8R8G8B_GET_R(lui32Col2) >> 3;
          g2 = BM_BPP32_8R8G8B_GET_G(lui32Col2) >> 2;
          b2 = BM_BPP32_8R8G8B_GET_B(lui32Col2) >> 3;
  2a:	f3c3 06c4 	ubfx	r6, r3, #3, #5

          r_inc = ((r2 - r1) * 65536) / ((liGfxX2 - liGfxX1) + 1);
  2e:	f3c3 48c4 	ubfx	r8, r3, #19, #5
  32:	eba8 080a 	sub.w	r8, r8, sl
  36:	ea4f 4808 	mov.w	r8, r8, lsl #16
  3a:	eba1 0e02 	sub.w	lr, r1, r2
  3e:	f10e 0501 	add.w	r5, lr, #1
  42:	fb98 f8f5 	sdiv	r8, r8, r5
          g_inc = ((g2 - g1) * 65536) / ((liGfxX2 - liGfxX1) + 1);
  46:	f3c3 2c85 	ubfx	ip, r3, #10, #6
  4a:	ebac 0c09 	sub.w	ip, ip, r9
  4e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  52:	fb9c fcf5 	sdiv	ip, ip, r5
          b_inc = ((b2 - b1) * 65536) / ((liGfxX2 - liGfxX1) + 1);
  56:	eba6 0e04 	sub.w	lr, r6, r4
  5a:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
  5e:	fb9e fef5 	sdiv	lr, lr, r5

          liGfxPos = 0;
  62:	2600      	movs	r6, #0
  64:	e019      	b.n	9a <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long, unsigned long)+0x9a>
          vLineHAbsRaw(liGfxX1, liGfxX2, liGfxY1, lui32Col1);
  66:	6803      	ldr	r3, [r0, #0]
  68:	699d      	ldr	r5, [r3, #24]
  6a:	9400      	str	r4, [sp, #0]
  6c:	9b03      	ldr	r3, [sp, #12]
  6e:	47a8      	blx	r5
            liGfxX1++;
            liGfxPos++;
          }
        }
      }
    }
  70:	b005      	add	sp, #20
  72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SCREEN_BPP16_5R6G5B_PP(liGfxX1, liGfxY1, mpcBm, BM_BPP16_5R6G5B_RGB(r, g, b));
  76:	6947      	ldr	r7, [r0, #20]
  78:	eb03 1385 	add.w	r3, r3, r5, lsl #6
  7c:	015b      	lsls	r3, r3, #5
  7e:	b29b      	uxth	r3, r3
  80:	441c      	add	r4, r3
      u16* lpui16Data = (u16*)mpui8Data;
  82:	683b      	ldr	r3, [r7, #0]
  84:	f9b7 5004 	ldrsh.w	r5, [r7, #4]
  88:	9f03      	ldr	r7, [sp, #12]
  8a:	fb05 2507 	mla	r5, r5, r7, r2
      lpui16Data[u32PxlIdx(liGfxX, liGfxY)] = lui16Col;
  8e:	f823 4015 	strh.w	r4, [r3, r5, lsl #1]
            liGfxX1++;
  92:	3201      	adds	r2, #1
  94:	b212      	sxth	r2, r2
            liGfxPos++;
  96:	3601      	adds	r6, #1
  98:	b236      	sxth	r6, r6
          while (liGfxX1 <= liGfxX2)
  9a:	428a      	cmp	r2, r1
  9c:	dce8      	bgt.n	70 <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long, unsigned long)+0x70>
            temp = liGfxPos * r_inc;
  9e:	4637      	mov	r7, r6
  a0:	fb08 f406 	mul.w	r4, r8, r6
            r = r1 + (temp >> 16);
  a4:	f3c4 4507 	ubfx	r5, r4, #16, #8
  a8:	4455      	add	r5, sl
  aa:	b2ed      	uxtb	r5, r5
            if (temp & 0x8000) r++;
  ac:	f414 4f00 	tst.w	r4, #32768	; 0x8000
  b0:	d001      	beq.n	b6 <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long, unsigned long)+0xb6>
  b2:	3501      	adds	r5, #1
  b4:	b2ed      	uxtb	r5, r5
            temp = liGfxPos * g_inc;
  b6:	fb0c f407 	mul.w	r4, ip, r7
            g = g1 + (temp >> 16);
  ba:	f3c4 4307 	ubfx	r3, r4, #16, #8
  be:	444b      	add	r3, r9
  c0:	b2db      	uxtb	r3, r3
            if (temp & 0x8000) g++;
  c2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
  c6:	d001      	beq.n	cc <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long, unsigned long)+0xcc>
  c8:	3301      	adds	r3, #1
  ca:	b2db      	uxtb	r3, r3
            temp = liGfxPos * b_inc;
  cc:	fb0e f707 	mul.w	r7, lr, r7
            b = b1 + (temp >> 16);
  d0:	f3c7 4407 	ubfx	r4, r7, #16, #8
  d4:	445c      	add	r4, fp
  d6:	b2e4      	uxtb	r4, r4
            if (temp & 0x8000) b++;
  d8:	f417 4f00 	tst.w	r7, #32768	; 0x8000
  dc:	d0cb      	beq.n	76 <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long, unsigned long)+0x76>
  de:	3401      	adds	r4, #1
  e0:	b2e4      	uxtb	r4, r4
  e2:	e7c8      	b.n	76 <cScreen_Bpp16_5R6G5B::vLineHAbsRaw(short, short, short, unsigned long, unsigned long)+0x76>

Disassembly of section .text._ZN20cScreen_Bpp16_5R6G5B12vLineVAbsRawEsssm:

00000000 <cScreen_Bpp16_5R6G5B::vLineVAbsRaw(short, short, short, unsigned long)>:


    // Zeichnet eine vertikale Linie
    void vLineVAbsRaw(GfxInt liGfxX1, GfxInt liGfxY1, GfxInt liGfxY2, uint32 lui32Col)
   0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2:	4605      	mov	r5, r0
   4:	460f      	mov	r7, r1
   6:	4614      	mov	r4, r2
   8:	461e      	mov	r6, r3
    {
      //if (bChkInit())
      {
        lui32Col = u32GetCol(lui32Col);
   a:	6803      	ldr	r3, [r0, #0]
   c:	695b      	ldr	r3, [r3, #20]
   e:	9906      	ldr	r1, [sp, #24]
  10:	4798      	blx	r3
        while (liGfxY1 <= liGfxY2)
  12:	42b4      	cmp	r4, r6
  14:	dc0a      	bgt.n	2c <cScreen_Bpp16_5R6G5B::vLineVAbsRaw(short, short, short, unsigned long)+0x2c>
        {
          SCREEN_BPP16_5R6G5B_PP(liGfxX1, liGfxY1, mpcBm, lui32Col);
  16:	696b      	ldr	r3, [r5, #20]
      u16* lpui16Data = (u16*)mpui8Data;
  18:	681a      	ldr	r2, [r3, #0]
  1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  1e:	fb03 7304 	mla	r3, r3, r4, r7
      lpui16Data[u32PxlIdx(liGfxX, liGfxY)] = lui16Col;
  22:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
          liGfxY1++;
  26:	3401      	adds	r4, #1
  28:	b224      	sxth	r4, r4
        while (liGfxY1 <= liGfxY2)
  2a:	e7f2      	b.n	12 <cScreen_Bpp16_5R6G5B::vLineVAbsRaw(short, short, short, unsigned long)+0x12>
        }
      }
    }
  2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text._ZN20cScreen_Bpp16_5R6G5B11vLineAbsRawEssssm:

00000000 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)>:

    // Zeichnet eine Linie 
    void vLineAbsRaw(GfxInt liGfxX1, GfxInt liGfxY1,
   0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4:	4606      	mov	r6, r0
   6:	460f      	mov	r7, r1
   8:	4690      	mov	r8, r2
   a:	461c      	mov	r4, r3
   c:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
      GfxInt liGfxXd, liGfxDx, liGfxDy;
      GfxInt liGfxAIncr, liGfxBIncr;
      GfxInt liGfxXIncr, liGfxYIncr;
      GfxInt liGfxx, liGfxy, liGfxDummy;

      lui32Col = u32GetCol(lui32Col);
  10:	6803      	ldr	r3, [r0, #0]
  12:	695b      	ldr	r3, [r3, #20]
  14:	9909      	ldr	r1, [sp, #36]	; 0x24
  16:	4798      	blx	r3

      if ((mpcBm->iGfxAbs(liGfxX2 - liGfxX1) < mpcBm->iGfxAbs(liGfxY2 - liGfxY1)))
  18:	6971      	ldr	r1, [r6, #20]
  1a:	1be3      	subs	r3, r4, r7
  1c:	b29b      	uxth	r3, r3
  1e:	b21a      	sxth	r2, r3
    BM_INLINE u32    u32Size()                                       {return ((uint32)(miGfxWidth * miGfxHeight));};
    BM_INLINE u8*    pu8Data()                                       {return (mpui8Data);};
    BM_INLINE i8     i8Clone(cBitmap lcBm)                           {return lcBm.i8Create(miGfxWidth, miGfxHeight, mui8Type);};
    BM_INLINE GfxInt iGfxAbs(GfxInt  liGfxV)                         {if (liGfxV < 0) return -liGfxV; else return liGfxV;};
  20:	2a00      	cmp	r2, #0
  22:	db3b      	blt.n	9c <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0x9c>
  24:	eba5 0308 	sub.w	r3, r5, r8
  28:	b29b      	uxth	r3, r3
  2a:	fa0f fc83 	sxth.w	ip, r3
  2e:	f1bc 0f00 	cmp.w	ip, #0
  32:	db36      	blt.n	a2 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0xa2>
  34:	4594      	cmp	ip, r2
  36:	dd54      	ble.n	e2 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0xe2>
      {
        if (liGfxY1 > liGfxY2)
  38:	4545      	cmp	r5, r8
  3a:	db05      	blt.n	48 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0x48>
  3c:	462b      	mov	r3, r5
  3e:	4645      	mov	r5, r8
  40:	4698      	mov	r8, r3
  42:	4623      	mov	r3, r4
  44:	463c      	mov	r4, r7
  46:	461f      	mov	r7, r3
          liGfxDummy = liGfxY1;
          liGfxY1 = liGfxY2;
          liGfxY2 = liGfxDummy;
        }

        if (liGfxX2 > liGfxX1) liGfxXIncr = 1;
  48:	42bc      	cmp	r4, r7
  4a:	da2e      	bge.n	aa <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0xaa>
  4c:	f04f 0e01 	mov.w	lr, #1
        else liGfxXIncr = -1;

        liGfxDy = liGfxY2 - liGfxY1;
  50:	b2aa      	uxth	r2, r5
  52:	eba8 0302 	sub.w	r3, r8, r2
  56:	b29b      	uxth	r3, r3
  58:	fa0f fa83 	sxth.w	sl, r3
        liGfxDx = mpcBm->iGfxAbs(liGfxX2 - liGfxX1);
  5c:	1b3f      	subs	r7, r7, r4
  5e:	b2bf      	uxth	r7, r7
  60:	fa0f fc87 	sxth.w	ip, r7
  64:	f1bc 0f00 	cmp.w	ip, #0
  68:	db22      	blt.n	b0 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0xb0>
        liGfxXd = 2 * liGfxDx - liGfxDy;
  6a:	ea4f 094c 	mov.w	r9, ip, lsl #1
  6e:	fa1f f989 	uxth.w	r9, r9
  72:	eba9 0703 	sub.w	r7, r9, r3
  76:	b23f      	sxth	r7, r7
        liGfxAIncr = 2 * (liGfxDx - liGfxDy);
  78:	ebac 0c0a 	sub.w	ip, ip, sl
  7c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  80:	fa1f fc8c 	uxth.w	ip, ip
        liGfxBIncr = 2 * liGfxDx;
        liGfxx = liGfxX1;
        liGfxy = liGfxY1;

        SCREEN_BPP16_5R6G5B_PP(liGfxx, liGfxy, mpcBm, lui32Col);
  84:	b280      	uxth	r0, r0
      u16* lpui16Data = (u16*)mpui8Data;
  86:	f8d1 a000 	ldr.w	sl, [r1]
    BM_INLINE u32    u32PxlIdx(GfxInt liGfxX, GfxInt liGfxY)         {return ((uint32)((liGfxY) * miGfxWidth + (liGfxX)));};
  8a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  8e:	fb03 4505 	mla	r5, r3, r5, r4
      lpui16Data[u32PxlIdx(liGfxX, liGfxY)] = lui16Col;
  92:	f82a 0015 	strh.w	r0, [sl, r5, lsl #1]

        for (liGfxy = liGfxY1 + 1; liGfxy <= liGfxY2; liGfxy++)
  96:	3201      	adds	r2, #1
  98:	b212      	sxth	r2, r2
  9a:	e019      	b.n	d0 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0xd0>
    BM_INLINE GfxInt iGfxAbs(GfxInt  liGfxV)                         {if (liGfxV < 0) return -liGfxV; else return liGfxV;};
  9c:	425b      	negs	r3, r3
  9e:	b21a      	sxth	r2, r3
  a0:	e7c0      	b.n	24 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0x24>
  a2:	425b      	negs	r3, r3
  a4:	fa0f fc83 	sxth.w	ip, r3
  a8:	e7c4      	b.n	34 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0x34>
        else liGfxXIncr = -1;
  aa:	f04f 3eff 	mov.w	lr, #4294967295
  ae:	e7cf      	b.n	50 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0x50>
  b0:	427f      	negs	r7, r7
  b2:	fa0f fc87 	sxth.w	ip, r7
  b6:	e7d8      	b.n	6a <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0x6a>
          if (liGfxXd >= 0)
          {
            liGfxx += liGfxXIncr;
            liGfxXd += liGfxAIncr;
          }
          else liGfxXd += liGfxBIncr;
  b8:	444f      	add	r7, r9
  ba:	b23f      	sxth	r7, r7

          SCREEN_BPP16_5R6G5B_PP(liGfxx, liGfxy, mpcBm, lui32Col);
  bc:	6973      	ldr	r3, [r6, #20]
      u16* lpui16Data = (u16*)mpui8Data;
  be:	6819      	ldr	r1, [r3, #0]
    BM_INLINE u32    u32PxlIdx(GfxInt liGfxX, GfxInt liGfxY)         {return ((uint32)((liGfxY) * miGfxWidth + (liGfxX)));};
  c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  c4:	fb03 4302 	mla	r3, r3, r2, r4
      lpui16Data[u32PxlIdx(liGfxX, liGfxY)] = lui16Col;
  c8:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
        for (liGfxy = liGfxY1 + 1; liGfxy <= liGfxY2; liGfxy++)
  cc:	3201      	adds	r2, #1
  ce:	b212      	sxth	r2, r2
  d0:	4590      	cmp	r8, r2
  d2:	db56      	blt.n	182 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0x182>
          if (liGfxXd >= 0)
  d4:	2f00      	cmp	r7, #0
  d6:	dbef      	blt.n	b8 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0xb8>
            liGfxx += liGfxXIncr;
  d8:	4474      	add	r4, lr
  da:	b224      	sxth	r4, r4
            liGfxXd += liGfxAIncr;
  dc:	4467      	add	r7, ip
  de:	b23f      	sxth	r7, r7
  e0:	e7ec      	b.n	bc <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0xbc>
        }
      }
      else
      {
        if (liGfxX1 > liGfxX2)
  e2:	42bc      	cmp	r4, r7
  e4:	db05      	blt.n	f2 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0xf2>
  e6:	462b      	mov	r3, r5
  e8:	4645      	mov	r5, r8
  ea:	4698      	mov	r8, r3
  ec:	4623      	mov	r3, r4
  ee:	463c      	mov	r4, r7
  f0:	461f      	mov	r7, r3
          liGfxX2 = liGfxDummy;
          liGfxDummy = liGfxY1;
          liGfxY1 = liGfxY2;
          liGfxY2 = liGfxDummy;
        }
        if (liGfxY2 > liGfxY1) liGfxYIncr = 1;
  f2:	4545      	cmp	r5, r8
  f4:	da28      	bge.n	148 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0x148>
  f6:	f04f 0c01 	mov.w	ip, #1
        else liGfxYIncr = -1;

        liGfxDx = liGfxX2 - liGfxX1;
  fa:	b2a3      	uxth	r3, r4
  fc:	1afa      	subs	r2, r7, r3
  fe:	b292      	uxth	r2, r2
 100:	fa0f f982 	sxth.w	r9, r2
        liGfxDy = mpcBm->iGfxAbs(liGfxY2 - liGfxY1);
 104:	eba8 0805 	sub.w	r8, r8, r5
 108:	fa1f f888 	uxth.w	r8, r8
 10c:	fa0f fa88 	sxth.w	sl, r8
    BM_INLINE GfxInt iGfxAbs(GfxInt  liGfxV)                         {if (liGfxV < 0) return -liGfxV; else return liGfxV;};
 110:	f1ba 0f00 	cmp.w	sl, #0
 114:	db1b      	blt.n	14e <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0x14e>
        liGfxXd = 2 * liGfxDy - liGfxDx;
 116:	ea4f 0e4a 	mov.w	lr, sl, lsl #1
 11a:	fa1f fe8e 	uxth.w	lr, lr
 11e:	ebae 0202 	sub.w	r2, lr, r2
 122:	b212      	sxth	r2, r2
        liGfxAIncr = 2 * (liGfxDy - liGfxDx);
 124:	ebaa 0909 	sub.w	r9, sl, r9
 128:	ea4f 0949 	mov.w	r9, r9, lsl #1
 12c:	fa1f f989 	uxth.w	r9, r9
        liGfxBIncr = 2 * liGfxDy;
        liGfxx = liGfxX1;
        liGfxy = liGfxY1;

        SCREEN_BPP16_5R6G5B_PP(liGfxx, liGfxy, mpcBm, lui32Col);
 130:	b280      	uxth	r0, r0
      u16* lpui16Data = (u16*)mpui8Data;
 132:	f8d1 8000 	ldr.w	r8, [r1]
    BM_INLINE u32    u32PxlIdx(GfxInt liGfxX, GfxInt liGfxY)         {return ((uint32)((liGfxY) * miGfxWidth + (liGfxX)));};
 136:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 13a:	fb01 4405 	mla	r4, r1, r5, r4
      lpui16Data[u32PxlIdx(liGfxX, liGfxY)] = lui16Col;
 13e:	f828 0014 	strh.w	r0, [r8, r4, lsl #1]

        for (liGfxx = liGfxX1 + 1; liGfxx <= liGfxX2; liGfxx++)
 142:	3301      	adds	r3, #1
 144:	b21b      	sxth	r3, r3
 146:	e013      	b.n	170 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0x170>
        else liGfxYIncr = -1;
 148:	f04f 3cff 	mov.w	ip, #4294967295
 14c:	e7d5      	b.n	fa <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0xfa>
    BM_INLINE GfxInt iGfxAbs(GfxInt  liGfxV)                         {if (liGfxV < 0) return -liGfxV; else return liGfxV;};
 14e:	f1c8 0800 	rsb	r8, r8, #0
 152:	fa0f fa88 	sxth.w	sl, r8
 156:	e7de      	b.n	116 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0x116>
          if (liGfxXd >= 0)
          {
            liGfxy += liGfxYIncr;
            liGfxXd += liGfxAIncr;
          }
          else liGfxXd += liGfxBIncr;
 158:	4472      	add	r2, lr
 15a:	b212      	sxth	r2, r2

          SCREEN_BPP16_5R6G5B_PP(liGfxx, liGfxy, mpcBm, lui32Col);
 15c:	6971      	ldr	r1, [r6, #20]
      u16* lpui16Data = (u16*)mpui8Data;
 15e:	680c      	ldr	r4, [r1, #0]
    BM_INLINE u32    u32PxlIdx(GfxInt liGfxX, GfxInt liGfxY)         {return ((uint32)((liGfxY) * miGfxWidth + (liGfxX)));};
 160:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 164:	fb01 3105 	mla	r1, r1, r5, r3
      lpui16Data[u32PxlIdx(liGfxX, liGfxY)] = lui16Col;
 168:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
        for (liGfxx = liGfxX1 + 1; liGfxx <= liGfxX2; liGfxx++)
 16c:	3301      	adds	r3, #1
 16e:	b21b      	sxth	r3, r3
 170:	429f      	cmp	r7, r3
 172:	db06      	blt.n	182 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0x182>
          if (liGfxXd >= 0)
 174:	2a00      	cmp	r2, #0
 176:	dbef      	blt.n	158 <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0x158>
            liGfxy += liGfxYIncr;
 178:	4465      	add	r5, ip
 17a:	b22d      	sxth	r5, r5
            liGfxXd += liGfxAIncr;
 17c:	444a      	add	r2, r9
 17e:	b212      	sxth	r2, r2
 180:	e7ec      	b.n	15c <cScreen_Bpp16_5R6G5B::vLineAbsRaw(short, short, short, short, unsigned long)+0x15c>
        }
      }
    }
 182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section .text._ZN40cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B5i8SetEss:

00000000 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)>:
    }
    return FRET_OK;
  }


  FRet i8Set(GfxInt lixDestX, GfxInt lixDestY)
   0:	b570      	push	{r4, r5, r6, lr}
  {
    Sprite_tenFormat lenFormat;

    lenFormat = mpcSprite->menFormat;
   2:	68c3      	ldr	r3, [r0, #12]
   4:	7a5b      	ldrb	r3, [r3, #9]
    switch (lenFormat)
   6:	b11b      	cbz	r3, 10 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x10>
   8:	2b01      	cmp	r3, #1
   a:	d017      	beq.n	3c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x3c>
        break;
      case Sprite_nFormatRle:
        return ((this->*i8Bitx[(u8)(menMode + Sprite_nModeLastEntry)])(lixDestX, lixDestY));
        break;
    }
    return FRET_ERR_GENERAL;
   c:	2001      	movs	r0, #1
   e:	e00e      	b.n	2e <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x2e>
        return ((this->*i8Bitx[(u8)menMode])(lixDestX, lixDestY));
  10:	7a04      	ldrb	r4, [r0, #8]
  12:	4b16      	ldr	r3, [pc, #88]	; (6c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x6c>)
  14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  18:	685b      	ldr	r3, [r3, #4]
  1a:	105d      	asrs	r5, r3, #1
  1c:	1d06      	adds	r6, r0, #4
  1e:	1970      	adds	r0, r6, r5
  20:	f013 0f01 	tst.w	r3, #1
  24:	d104      	bne.n	30 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x30>
  26:	4b11      	ldr	r3, [pc, #68]	; (6c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x6c>)
  28:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
  2c:	4798      	blx	r3
  }
  2e:	bd70      	pop	{r4, r5, r6, pc}
        return ((this->*i8Bitx[(u8)menMode])(lixDestX, lixDestY));
  30:	5975      	ldr	r5, [r6, r5]
  32:	4b0e      	ldr	r3, [pc, #56]	; (6c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x6c>)
  34:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
  38:	58eb      	ldr	r3, [r5, r3]
  3a:	e7f7      	b.n	2c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x2c>
        return ((this->*i8Bitx[(u8)(menMode + Sprite_nModeLastEntry)])(lixDestX, lixDestY));
  3c:	7a04      	ldrb	r4, [r0, #8]
  3e:	3404      	adds	r4, #4
  40:	b2e4      	uxtb	r4, r4
  42:	4b0a      	ldr	r3, [pc, #40]	; (6c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x6c>)
  44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  48:	685d      	ldr	r5, [r3, #4]
  4a:	106e      	asrs	r6, r5, #1
  4c:	1d03      	adds	r3, r0, #4
  4e:	1998      	adds	r0, r3, r6
  50:	f015 0f01 	tst.w	r5, #1
  54:	d104      	bne.n	60 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x60>
  56:	4b05      	ldr	r3, [pc, #20]	; (6c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x6c>)
  58:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
  5c:	4798      	blx	r3
  5e:	e7e6      	b.n	2e <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x2e>
  60:	599d      	ldr	r5, [r3, r6]
  62:	4b02      	ldr	r3, [pc, #8]	; (6c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x6c>)
  64:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
  68:	58eb      	ldr	r3, [r5, r3]
  6a:	e7f7      	b.n	5c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x5c>
  6c:	00000000 	.word	0x00000000	6c: R_ARM_ABS32	cSpriteEngine::i8Bitx

00000070 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)>:
  70:	b570      	push	{r4, r5, r6, lr}
  72:	3804      	subs	r0, #4
  74:	68c3      	ldr	r3, [r0, #12]
  76:	7a5b      	ldrb	r3, [r3, #9]
  78:	b11b      	cbz	r3, 82 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x12>
  7a:	2b01      	cmp	r3, #1
  7c:	d017      	beq.n	ae <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x3e>
  7e:	2001      	movs	r0, #1
  80:	e00e      	b.n	a0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x30>
  82:	7a04      	ldrb	r4, [r0, #8]
  84:	4b16      	ldr	r3, [pc, #88]	; (e0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x70>)
  86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  8a:	685b      	ldr	r3, [r3, #4]
  8c:	105d      	asrs	r5, r3, #1
  8e:	1d06      	adds	r6, r0, #4
  90:	1970      	adds	r0, r6, r5
  92:	f013 0f01 	tst.w	r3, #1
  96:	d104      	bne.n	a2 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x32>
  98:	4b11      	ldr	r3, [pc, #68]	; (e0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x70>)
  9a:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
  9e:	4798      	blx	r3
  a0:	bd70      	pop	{r4, r5, r6, pc}
  a2:	5975      	ldr	r5, [r6, r5]
  a4:	4b0e      	ldr	r3, [pc, #56]	; (e0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x70>)
  a6:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
  aa:	58eb      	ldr	r3, [r5, r3]
  ac:	e7f7      	b.n	9e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x2e>
  ae:	7a04      	ldrb	r4, [r0, #8]
  b0:	3404      	adds	r4, #4
  b2:	b2e4      	uxtb	r4, r4
  b4:	4b0a      	ldr	r3, [pc, #40]	; (e0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x70>)
  b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  ba:	685d      	ldr	r5, [r3, #4]
  bc:	106e      	asrs	r6, r5, #1
  be:	1d03      	adds	r3, r0, #4
  c0:	1998      	adds	r0, r3, r6
  c2:	f015 0f01 	tst.w	r5, #1
  c6:	d104      	bne.n	d2 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x62>
  c8:	4b05      	ldr	r3, [pc, #20]	; (e0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x70>)
  ca:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
  ce:	4798      	blx	r3
  d0:	e7e6      	b.n	a0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x30>
  d2:	599d      	ldr	r5, [r3, r6]
  d4:	4b02      	ldr	r3, [pc, #8]	; (e0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x70>)
  d6:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
  da:	58eb      	ldr	r3, [r5, r3]
  dc:	e7f7      	b.n	ce <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short)+0x5e>
  de:	bf00      	nop
  e0:	00000000 	.word	0x00000000	e0: R_ARM_ABS32	cSpriteEngine::i8Bitx

Disassembly of section .text._ZN40cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B5i8SetEssP7cSprite:

00000000 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short, cSprite*)>:

  FRet i8Set(GfxInt lixDestX, GfxInt lixDestY, cSprite *lpcSprite)
   0:	b510      	push	{r4, lr}
  {
    mpcSprite = lpcSprite;
   2:	60c3      	str	r3, [r0, #12]
    return i8Set(lixDestX, lixDestY);
   4:	6803      	ldr	r3, [r0, #0]
   6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8:	4798      	blx	r3
  }
   a:	bd10      	pop	{r4, pc}

0000000c <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short, cSprite*)>:
   c:	b510      	push	{r4, lr}
   e:	4604      	mov	r4, r0
  10:	3804      	subs	r0, #4
  12:	60c3      	str	r3, [r0, #12]
  14:	f854 3c04 	ldr.w	r3, [r4, #-4]
  18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  1a:	4798      	blx	r3
  1c:	bd10      	pop	{r4, pc}

Disassembly of section .text._ZN40cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B5i8SetEssPKh:

00000000 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short, unsigned char const*)>:

  FRet i8Set(GfxInt lixDestX, GfxInt lixDestY, const uint8* lpui8Resource)
   0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    if (((cSprite_Res8b_Bpp1_1G*)mpcSprite)->vSetRes8B(lpui8Resource) == SPRITE_OK)
   2:	68c5      	ldr	r5, [r0, #12]

  cSprite_Res8b_Bpp1_1G() : cSprite() {}

  FRet vSetRes8B(const uint8* lpui8Resource)
  {
    if ((lpui8Resource[0] == Sprite_nType_Sprite) && (lpui8Resource[1] == Sprite_nBPP_BPP1_1G))
   4:	781c      	ldrb	r4, [r3, #0]
   6:	b99c      	cbnz	r4, 30 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short, unsigned char const*)+0x30>
   8:	785c      	ldrb	r4, [r3, #1]
   a:	2c02      	cmp	r4, #2
   c:	d001      	beq.n	12 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short, unsigned char const*)+0x12>
    {
      i8Set(lixDestX, lixDestY);
      return SPRITEENGINE_OK;
    }
    return SPRITEENGINE_FAIL;
   e:	2001      	movs	r0, #1
  10:	e00f      	b.n	32 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short, unsigned char const*)+0x32>
    {
      cSprite::vSet(lpui8Resource[3], lpui8Resource[4], (Sprite_tenFormat)lpui8Resource[2], Sprite_nBPP_BPP1_1G, lpui8Resource + 5);
  12:	78df      	ldrb	r7, [r3, #3]
  14:	791e      	ldrb	r6, [r3, #4]
  16:	789c      	ldrb	r4, [r3, #2]
  18:	3305      	adds	r3, #5
      menFormat = lenFormat;
    }

    SPRITE_INLINE void vSet(GfxInt liGfxWidth, GfxInt liGfxHeight, Sprite_tenFormat lenFormat, uint8 lui8Type, const u8* lpui8Data)
    {
      mpui8Data   = (uint8*)lpui8Data;
  1a:	602b      	str	r3, [r5, #0]
      miGfxWidth  = liGfxWidth;
  1c:	80af      	strh	r7, [r5, #4]
      miGfxHeight = liGfxHeight;
  1e:	80ee      	strh	r6, [r5, #6]
      mui8Type    = lui8Type;
  20:	2302      	movs	r3, #2
  22:	722b      	strb	r3, [r5, #8]
      menFormat   = lenFormat;
  24:	726c      	strb	r4, [r5, #9]
      i8Set(lixDestX, lixDestY);
  26:	6803      	ldr	r3, [r0, #0]
  28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  2a:	4798      	blx	r3
      return SPRITEENGINE_OK;
  2c:	2000      	movs	r0, #0
  2e:	e000      	b.n	32 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8Set(short, short, unsigned char const*)+0x32>
    return SPRITEENGINE_FAIL;
  30:	2001      	movs	r0, #1
  }
  32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text._ZN20cRFont_Res8b_Bpp1_1G11i8PutStringEP7cScreenb:

00000000 <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)>:
        return RFONT_OK;
      }
      return RFONT_FAIL;
    }

    tstGfxPos2D i8PutString(cScreen *lpcScr, bool lbSizeOnly = False)
   0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4:	b084      	sub	sp, #16
   6:	4604      	mov	r4, r0
   8:	4617      	mov	r7, r2
      uint32 lui32SignIdx;
      uint16 lui16LetterIdx;

      uint8  lui8Letter;

      tstGfxPos2D lstPos  = mstStartPos;
   a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   c:	9302      	str	r3, [sp, #8]
      GfxInt      liGfxSizeLineX;

      tstCharRes8B  *lpstCharData;
      uint8         *lpui8CharData;

      lstSize.x = 0;
   e:	2500      	movs	r5, #0
  10:	f8ad 5004 	strh.w	r5, [sp, #4]
      lstSize.y = miGfxHeight;
  14:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  18:	f8ad 3006 	strh.w	r3, [sp, #6]
      liGfxSizeLineX = 0;

      mpcSpriteEng->vSetParam(Sprite_nModeOr, &mcSprite, lpcScr);
  1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  1e:	f100 0228 	add.w	r2, r0, #40	; 0x28
      mpcScreenDest = lpcScreenDest;
    }

    void vSetParam(Sprite_tenMode lenMode, cSprite* lpcSprite, cScreen* lpcScreenDest)
    {
      menMode       = lenMode;
  22:	2002      	movs	r0, #2
  24:	7118      	strb	r0, [r3, #4]
      mpcSprite     = lpcSprite;
  26:	609a      	str	r2, [r3, #8]
      mpcScreenDest = lpcScreenDest;
  28:	6199      	str	r1, [r3, #24]
      mpcSpriteEng->vSetCol(mui32Col);
  2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  2c:	69a2      	ldr	r2, [r4, #24]
      return False;
    }

    void vSetCol(u32 lu32Col)
    {
      mui32Col = lu32Col;
  2e:	62da      	str	r2, [r3, #44]	; 0x2c
      liGfxSizeLineX = 0;
  30:	462e      	mov	r6, r5
  32:	e012      	b.n	5a <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)+0x5a>

            if (!lbSizeOnly)
            {
              mcSprite.vSet(lpstCharData->u8Width, lpstCharData->u8Height, menFormat, Sprite_nBPP_BPP1_1G, lpui8CharData);            
              (mpcSpriteEng->*mi8Bitx)(lstPos.x + (int8)lpstCharData->u8XOffset,
                                       lstPos.y - (lpstCharData->u8Height - 1) - (int8)lpstCharData->u8YOffset);
  34:	588a      	ldr	r2, [r1, r2]
  36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  38:	58d3      	ldr	r3, [r2, r3]
  3a:	e03e      	b.n	ba <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)+0xba>
          }
        }
        else
        {
          // Einige Sonderzeichen behandeln: \0, \r, \n, \b
          switch (lui8Letter)
  3c:	2b0a      	cmp	r3, #10
  3e:	d06a      	beq.n	116 <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)+0x116>
  40:	2b0d      	cmp	r3, #13
  42:	d009      	beq.n	58 <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)+0x58>
            //case '\b': // Ein Zeichen zurück
            //  BPP1_1G_HTrtlMinFP_AddPos2(-VF_SPACE_X(1), 0, lhTurtle);
            //break;

          default:
            lstPos.x += miGfxSpacing;
  44:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  48:	b29b      	uxth	r3, r3
  4a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  4e:	441a      	add	r2, r3
  50:	f8ad 2008 	strh.w	r2, [sp, #8]
            liGfxSizeLineX += miGfxSpacing;
  54:	441e      	add	r6, r3
  56:	b236      	sxth	r6, r6
      for (lui32SignIdx = 0; lui32SignIdx < mcText.Len(); lui32SignIdx++)
  58:	3501      	adds	r5, #1
      return cbArrayExtT<tyCStrT>::SizeOf() + sizeof(cStrBaseT<tyCStrT>);
    }

    inline CSTRT_UINT Len(void)
    {
      return cbArrayExtT<tyCStrT>::muiLen;
  5a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
  5c:	4295      	cmp	r5, r2
  5e:	d270      	bcs.n	142 <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)+0x142>
        lui8Letter = mcText.mpu8Data[lui32SignIdx];
  60:	f8d4 301e 	ldr.w	r3, [r4, #30]
  64:	5d5b      	ldrb	r3, [r3, r5]
        if ((lui8Letter >= mui8IdxMin) &&
  66:	7961      	ldrb	r1, [r4, #5]
  68:	4299      	cmp	r1, r3
  6a:	d8e7      	bhi.n	3c <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)+0x3c>
            (lui8Letter <= mui8IdxMax))
  6c:	79a0      	ldrb	r0, [r4, #6]
        if ((lui8Letter >= mui8IdxMin) &&
  6e:	4298      	cmp	r0, r3
  70:	d3e4      	bcc.n	3c <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)+0x3c>
          lui16LetterIdx = maui16CharLut[lui8Letter - mui8IdxMin];
  72:	6962      	ldr	r2, [r4, #20]
  74:	1a5b      	subs	r3, r3, r1
  76:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
          if (lui16LetterIdx != 0xFFFF)
  7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  7e:	4598      	cmp	r8, r3
  80:	d0ea      	beq.n	58 <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)+0x58>
            lpstCharData = (tstCharRes8B*)(maui8CharData + lui16LetterIdx);
  82:	f8d4 a010 	ldr.w	sl, [r4, #16]
  86:	eb0a 0908 	add.w	r9, sl, r8
            lpui8CharData = (uint8*)lpstCharData + sizeof(tstCharRes8B);
  8a:	f109 0304 	add.w	r3, r9, #4
            if (!lbSizeOnly)
  8e:	bb5f      	cbnz	r7, e8 <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)+0xe8>
              mcSprite.vSet(lpstCharData->u8Width, lpstCharData->u8Height, menFormat, Sprite_nBPP_BPP1_1G, lpui8CharData);            
  90:	f899 0002 	ldrb.w	r0, [r9, #2]
  94:	f899 1003 	ldrb.w	r1, [r9, #3]
  98:	7922      	ldrb	r2, [r4, #4]
      mpui8Data   = (uint8*)lpui8Data;
  9a:	62a3      	str	r3, [r4, #40]	; 0x28
      miGfxWidth  = liGfxWidth;
  9c:	85a0      	strh	r0, [r4, #44]	; 0x2c
      miGfxHeight = liGfxHeight;
  9e:	85e1      	strh	r1, [r4, #46]	; 0x2e
      mui8Type    = lui8Type;
  a0:	2302      	movs	r3, #2
  a2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      menFormat   = lenFormat;
  a6:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
              (mpcSpriteEng->*mi8Bitx)(lstPos.x + (int8)lpstCharData->u8XOffset,
  aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
                                       lstPos.y - (lpstCharData->u8Height - 1) - (int8)lpstCharData->u8YOffset);
  ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  ae:	105a      	asrs	r2, r3, #1
              (mpcSpriteEng->*mi8Bitx)(lstPos.x + (int8)lpstCharData->u8XOffset,
  b0:	1888      	adds	r0, r1, r2
                                       lstPos.y - (lpstCharData->u8Height - 1) - (int8)lpstCharData->u8YOffset);
  b2:	f013 0f01 	tst.w	r3, #1
  b6:	d1bd      	bne.n	34 <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)+0x34>
  b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
              (mpcSpriteEng->*mi8Bitx)(lstPos.x + (int8)lpstCharData->u8XOffset,
  ba:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  be:	f91a 2008 	ldrsb.w	r2, [sl, r8]
  c2:	fa11 f182 	uxtah	r1, r1, r2
                                       lstPos.y - (lpstCharData->u8Height - 1) - (int8)lpstCharData->u8YOffset);
  c6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  ca:	f899 c003 	ldrb.w	ip, [r9, #3]
  ce:	eba2 020c 	sub.w	r2, r2, ip
  d2:	b292      	uxth	r2, r2
  d4:	f999 c001 	ldrsb.w	ip, [r9, #1]
  d8:	fa1f fc8c 	uxth.w	ip, ip
  dc:	eba2 020c 	sub.w	r2, r2, ip
  e0:	3201      	adds	r2, #1
              (mpcSpriteEng->*mi8Bitx)(lstPos.x + (int8)lpstCharData->u8XOffset,
  e2:	b212      	sxth	r2, r2
  e4:	b209      	sxth	r1, r1
  e6:	4798      	blx	r3
            lstPos.x += (int8)lpstCharData->u8XOffset + lpstCharData->u8Width + miGfxSpacing;
  e8:	f91a 3008 	ldrsb.w	r3, [sl, r8]
  ec:	f899 2002 	ldrb.w	r2, [r9, #2]
  f0:	4413      	add	r3, r2
  f2:	8922      	ldrh	r2, [r4, #8]
  f4:	fa12 f383 	uxtah	r3, r2, r3
  f8:	b29b      	uxth	r3, r3
  fa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  fe:	441a      	add	r2, r3
 100:	f8ad 2008 	strh.w	r2, [sp, #8]
            liGfxSizeLineX += (int8)lpstCharData->u8XOffset + lpstCharData->u8Width + miGfxSpacing;
 104:	441e      	add	r6, r3
 106:	b236      	sxth	r6, r6
            if (liGfxSizeLineX > lstSize.x) lstSize.x = liGfxSizeLineX;
 108:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 10c:	42b3      	cmp	r3, r6
 10e:	daa3      	bge.n	58 <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)+0x58>
 110:	f8ad 6004 	strh.w	r6, [sp, #4]
 114:	e7a0      	b.n	58 <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)+0x58>
            if ((lui32SignIdx + 1) < mcText.Len())
 116:	1c6b      	adds	r3, r5, #1
 118:	4293      	cmp	r3, r2
 11a:	d29d      	bcs.n	58 <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)+0x58>
              lstPos.x   = mstStartPos.x;
 11c:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 120:	f8ad 3008 	strh.w	r3, [sp, #8]
              lstPos.y  += miGfxHeight;
 124:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 128:	b29b      	uxth	r3, r3
 12a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 12e:	441a      	add	r2, r3
 130:	f8ad 200a 	strh.w	r2, [sp, #10]
              lstSize.y += miGfxHeight;
 134:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 138:	4413      	add	r3, r2
 13a:	f8ad 3006 	strh.w	r3, [sp, #6]
              liGfxSizeLineX = 0;
 13e:	2600      	movs	r6, #0
 140:	e78a      	b.n	58 <cRFont_Res8b_Bpp1_1G::i8PutString(cScreen*, bool)+0x58>
            break;
          }
        }
      }

      return lstSize;
 142:	9b01      	ldr	r3, [sp, #4]
 144:	2000      	movs	r0, #0
 146:	b29a      	uxth	r2, r3
 148:	f362 000f 	bfi	r0, r2, #0, #16
 14c:	0c1b      	lsrs	r3, r3, #16
 14e:	f363 401f 	bfi	r0, r3, #16, #16
    }
 152:	b004      	add	sp, #16
 154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section .text._ZN20cRFont_Res8b_Bpp1_1G13i8PutStringXYEssPKcP7cScreenb:

00000000 <cRFont_Res8b_Bpp1_1G::i8PutStringXY(short, short, char const*, cScreen*, bool)>:


    tstGfxPos2D i8PutStringXY(GfxInt lixDestX, GfxInt lixDestY, char8 const *lszStr, cScreen *lpcScr, bool lbSizeOnly = False)
   0:	b500      	push	{lr}
   2:	b083      	sub	sp, #12
    {
      mstStartPos.x = lixDestX;
   4:	8481      	strh	r1, [r0, #36]	; 0x24
      mstStartPos.y = lixDestY;
   6:	84c2      	strh	r2, [r0, #38]	; 0x26
  // http://www.ethernut.de/api/strlen_8c_source.html
  static u32 uixStrLen(const char8 *lpszSrc)
  {
    const char8 *lpszTemp;

    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
   8:	461a      	mov	r2, r3
   a:	f992 1000 	ldrsb.w	r1, [r2]
   e:	b109      	cbz	r1, 14 <cRFont_Res8b_Bpp1_1G::i8PutStringXY(short, short, char const*, cScreen*, bool)+0x14>
  10:	3201      	adds	r2, #1
  12:	e7fa      	b.n	a <cRFont_Res8b_Bpp1_1G::i8PutStringXY(short, short, char const*, cScreen*, bool)+0xa>
      cbArrayExtT<tyCStrT>::muiLen = (CSTRT_UINT)cStrT_strlen(lszStr);
  14:	1ad2      	subs	r2, r2, r3
  16:	8442      	strh	r2, [r0, #34]	; 0x22
      cbArrayT<tyCStrT>::muiSize = cbArrayExtT<tyCStrT>::muiLen;
  18:	8382      	strh	r2, [r0, #28]
      cbArrayT<tyCStrT>::mpu8Data = (uint8*)lszStr;
  1a:	f8c0 301e 	str.w	r3, [r0, #30]
      mcText.From((char*) lszStr);

      return i8PutString(lpcScr, lbSizeOnly);
  1e:	6803      	ldr	r3, [r0, #0]
  20:	681b      	ldr	r3, [r3, #0]
  22:	f89d 2014 	ldrb.w	r2, [sp, #20]
  26:	9904      	ldr	r1, [sp, #16]
  28:	4798      	blx	r3
  2a:	4603      	mov	r3, r0
  2c:	2000      	movs	r0, #0
  2e:	b29a      	uxth	r2, r3
  30:	f362 000f 	bfi	r0, r2, #0, #16
  34:	0c1b      	lsrs	r3, r3, #16
  36:	f363 401f 	bfi	r0, r3, #16, #16
    };
  3a:	b003      	add	sp, #12
  3c:	f85d fb04 	ldr.w	pc, [sp], #4

Disassembly of section .text._ZN20cRFont_Res8b_Bpp1_1G13i8PutStringXYEssP9cStrBaseTItEP7cScreenb:

00000000 <cRFont_Res8b_Bpp1_1G::i8PutStringXY(short, short, cStrBaseT<unsigned short>*, cScreen*, bool)>:

    tstGfxPos2D i8PutStringXY(GfxInt lixDestX, GfxInt lixDestY, cStr* lcStr, cScreen* lpcScr, bool lbSizeOnly = False)
   0:	b510      	push	{r4, lr}
   2:	b082      	sub	sp, #8
    {
      mstStartPos.x = lixDestX;
   4:	8481      	strh	r1, [r0, #36]	; 0x24
      mstStartPos.y = lixDestY;
   6:	84c2      	strh	r2, [r0, #38]	; 0x26
      cbArrayExtT<tyCStrT>::muiLen = lszStr->muiLen;
   8:	88da      	ldrh	r2, [r3, #6]
   a:	8442      	strh	r2, [r0, #34]	; 0x22
      cbArrayT<tyCStrT>::muiSize   = lszStr->muiSize;
   c:	881a      	ldrh	r2, [r3, #0]
   e:	8382      	strh	r2, [r0, #28]
      cbArrayT<tyCStrT>::mpu8Data  = lszStr->mpu8Data;
  10:	f8d3 3002 	ldr.w	r3, [r3, #2]
  14:	f8c0 301e 	str.w	r3, [r0, #30]
      mcText.From(lcStr);

      return i8PutString(lpcScr, lbSizeOnly);
  18:	6803      	ldr	r3, [r0, #0]
  1a:	681b      	ldr	r3, [r3, #0]
  1c:	f89d 2014 	ldrb.w	r2, [sp, #20]
  20:	9904      	ldr	r1, [sp, #16]
  22:	4798      	blx	r3
  24:	4603      	mov	r3, r0
  26:	2000      	movs	r0, #0
  28:	b29a      	uxth	r2, r3
  2a:	f362 000f 	bfi	r0, r2, #0, #16
  2e:	0c1b      	lsrs	r3, r3, #16
  30:	f363 401f 	bfi	r0, r3, #16, #16
    };
  34:	b002      	add	sp, #8
  36:	bd10      	pop	{r4, pc}

Disassembly of section .text._ZN20cRFont_Res8b_Bpp1_1G11i8StringLenEP11tstGfxPos2D:

00000000 <cRFont_Res8b_Bpp1_1G::i8StringLen(tstGfxPos2D*)>:

    tstGfxPos2D i8StringLen(tstGfxPos2D* lpstStrLen)
   0:	b470      	push	{r4, r5, r6}
   2:	b083      	sub	sp, #12

      uint32 lui32StrWidthMax;

      uint8  lui8Letter;

      lpstStrLen->x = 0;
   4:	2300      	movs	r3, #0
   6:	800b      	strh	r3, [r1, #0]
      lpstStrLen->y = miGfxHeight;
   8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   c:	804a      	strh	r2, [r1, #2]
      lui32StrWidthMax = 0;
   e:	461d      	mov	r5, r3
  10:	e009      	b.n	26 <cRFont_Res8b_Bpp1_1G::i8StringLen(tstGfxPos2D*)+0x26>
          }
        }
        else
        {
          // Einige Sonderzeichen behandeln: \0, \r, \n, \b, SPACE
          switch (lui8Letter)
  12:	2a0a      	cmp	r2, #10
  14:	d106      	bne.n	24 <cRFont_Res8b_Bpp1_1G::i8StringLen(tstGfxPos2D*)+0x24>
          {
          case '\r':
            break;

          case '\n': // Zeilenumbruch
            lpstStrLen->y += miGfxHeight;
  16:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  1a:	884c      	ldrh	r4, [r1, #2]
  1c:	4422      	add	r2, r4
  1e:	804a      	strh	r2, [r1, #2]
            lpstStrLen->x  = 0;
  20:	2200      	movs	r2, #0
  22:	800a      	strh	r2, [r1, #0]
      for (lui32SignIdx = 0; lui32SignIdx < mcText.Len(); lui32SignIdx++)
  24:	3301      	adds	r3, #1
      return cbArrayExtT<tyCStrT>::muiLen;
  26:	8c42      	ldrh	r2, [r0, #34]	; 0x22
  28:	4293      	cmp	r3, r2
  2a:	d221      	bcs.n	70 <cRFont_Res8b_Bpp1_1G::i8StringLen(tstGfxPos2D*)+0x70>
        lui8Letter = mcText.mpu8Data[lui32SignIdx];
  2c:	f8d0 201e 	ldr.w	r2, [r0, #30]
  30:	5cd2      	ldrb	r2, [r2, r3]
        if ((lui8Letter >= mui8IdxMin) &&
  32:	7944      	ldrb	r4, [r0, #5]
  34:	4294      	cmp	r4, r2
  36:	d8ec      	bhi.n	12 <cRFont_Res8b_Bpp1_1G::i8StringLen(tstGfxPos2D*)+0x12>
          (lui8Letter <= mui8IdxMax))
  38:	7986      	ldrb	r6, [r0, #6]
        if ((lui8Letter >= mui8IdxMin) &&
  3a:	4296      	cmp	r6, r2
  3c:	d3e9      	bcc.n	12 <cRFont_Res8b_Bpp1_1G::i8StringLen(tstGfxPos2D*)+0x12>
          lui16LetterIdx = maui16CharLut[lui8Letter - mui8IdxMin];
  3e:	6946      	ldr	r6, [r0, #20]
  40:	1b12      	subs	r2, r2, r4
  42:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
          if (lui16LetterIdx != 0xFFFF)
  46:	f64f 74ff 	movw	r4, #65535	; 0xffff
  4a:	42a2      	cmp	r2, r4
  4c:	d0ea      	beq.n	24 <cRFont_Res8b_Bpp1_1G::i8StringLen(tstGfxPos2D*)+0x24>
            lpstCharData = (tstCharRes8B*)(maui8CharData + lui16LetterIdx);
  4e:	6904      	ldr	r4, [r0, #16]
  50:	18a6      	adds	r6, r4, r2
              lpstStrLen->x += (int8)lpstCharData->u8XOffset + lpstCharData->u8Width + miGfxSpacing;
  52:	56a2      	ldrsb	r2, [r4, r2]
  54:	78b4      	ldrb	r4, [r6, #2]
  56:	4422      	add	r2, r4
  58:	8904      	ldrh	r4, [r0, #8]
  5a:	fa14 f282 	uxtah	r2, r4, r2
  5e:	880c      	ldrh	r4, [r1, #0]
  60:	fa14 f282 	uxtah	r2, r4, r2
  64:	b212      	sxth	r2, r2
  66:	800a      	strh	r2, [r1, #0]
              if (lui32StrWidthMax < (u32)lpstStrLen->x)
  68:	42aa      	cmp	r2, r5
  6a:	d9db      	bls.n	24 <cRFont_Res8b_Bpp1_1G::i8StringLen(tstGfxPos2D*)+0x24>
                lui32StrWidthMax = (u32)lpstStrLen->x;
  6c:	4615      	mov	r5, r2
  6e:	e7d9      	b.n	24 <cRFont_Res8b_Bpp1_1G::i8StringLen(tstGfxPos2D*)+0x24>
            break;
          }
        }
      }

      lpstStrLen->x = lui32StrWidthMax;
  70:	b22d      	sxth	r5, r5
  72:	800d      	strh	r5, [r1, #0]

      if (lpstStrLen->x)
  74:	b145      	cbz	r5, 88 <cRFont_Res8b_Bpp1_1G::i8StringLen(tstGfxPos2D*)+0x88>
      {
        lpstStrLen->x -= miGfxSpacing;
  76:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  7a:	1aed      	subs	r5, r5, r3
  7c:	800d      	strh	r5, [r1, #0]
        lpstStrLen->y += miGfxHeight;
  7e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  82:	884a      	ldrh	r2, [r1, #2]
  84:	4413      	add	r3, r2
  86:	804b      	strh	r3, [r1, #2]
      }
      return *lpstStrLen;
  88:	6808      	ldr	r0, [r1, #0]
  8a:	2300      	movs	r3, #0
  8c:	b282      	uxth	r2, r0
  8e:	f362 030f 	bfi	r3, r2, #0, #16
  92:	0c00      	lsrs	r0, r0, #16
  94:	f360 431f 	bfi	r3, r0, #16, #16
    }
  98:	4618      	mov	r0, r3
  9a:	b003      	add	sp, #12
  9c:	bc70      	pop	{r4, r5, r6}
  9e:	4770      	bx	lr

Disassembly of section .text._ZN20cRFont_Res8b_Bpp1_1G14u32StringWidthEv:

00000000 <cRFont_Res8b_Bpp1_1G::u32StringWidth()>:

    u32 u32StringWidth()
   0:	b470      	push	{r4, r5, r6}
   2:	4603      	mov	r3, r0

      tstCharRes8B  *lpstCharData;
      uint8  lui8Letter;

      lui32StrWidth = 0;
      lui32StrWidthMax = 0;
   4:	2000      	movs	r0, #0
      lui32StrWidth = 0;
   6:	4605      	mov	r5, r0

      for (lui32SignIdx = 0; lui32SignIdx < mcText.Len(); lui32SignIdx++)
   8:	4602      	mov	r2, r0
   a:	e002      	b.n	12 <cRFont_Res8b_Bpp1_1G::u32StringWidth()+0x12>
          }
        }
        else
        {
          // Einige Sonderzeichen behandeln: \0, \r, \n, \b, SPACE
          switch (lui8Letter)
   c:	290a      	cmp	r1, #10
   e:	d021      	beq.n	54 <cRFont_Res8b_Bpp1_1G::u32StringWidth()+0x54>
      for (lui32SignIdx = 0; lui32SignIdx < mcText.Len(); lui32SignIdx++)
  10:	3201      	adds	r2, #1
  12:	8c59      	ldrh	r1, [r3, #34]	; 0x22
  14:	428a      	cmp	r2, r1
  16:	d21f      	bcs.n	58 <cRFont_Res8b_Bpp1_1G::u32StringWidth()+0x58>
        lui8Letter = mcText.mpu8Data[lui32SignIdx];
  18:	f8d3 101e 	ldr.w	r1, [r3, #30]
  1c:	5c89      	ldrb	r1, [r1, r2]
        if ((lui8Letter >= mui8IdxMin) &&
  1e:	795c      	ldrb	r4, [r3, #5]
  20:	428c      	cmp	r4, r1
  22:	d8f3      	bhi.n	c <cRFont_Res8b_Bpp1_1G::u32StringWidth()+0xc>
          (lui8Letter <= mui8IdxMax))
  24:	799e      	ldrb	r6, [r3, #6]
        if ((lui8Letter >= mui8IdxMin) &&
  26:	428e      	cmp	r6, r1
  28:	d3f0      	bcc.n	c <cRFont_Res8b_Bpp1_1G::u32StringWidth()+0xc>
          lui16LetterIdx = maui16CharLut[lui8Letter - mui8IdxMin];
  2a:	695e      	ldr	r6, [r3, #20]
  2c:	1b09      	subs	r1, r1, r4
  2e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
          if (lui16LetterIdx != 0xFFFF)
  32:	f64f 74ff 	movw	r4, #65535	; 0xffff
  36:	42a1      	cmp	r1, r4
  38:	d0ea      	beq.n	10 <cRFont_Res8b_Bpp1_1G::u32StringWidth()+0x10>
            lpstCharData = (tstCharRes8B*)(maui8CharData + lui16LetterIdx);
  3a:	691c      	ldr	r4, [r3, #16]
  3c:	1866      	adds	r6, r4, r1
              lui32StrWidth += (int8)lpstCharData->u8XOffset + lpstCharData->u8Width + miGfxSpacing;
  3e:	5661      	ldrsb	r1, [r4, r1]
  40:	78b4      	ldrb	r4, [r6, #2]
  42:	4421      	add	r1, r4
  44:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
  48:	4421      	add	r1, r4
  4a:	440d      	add	r5, r1
              if (lui32StrWidthMax < lui32StrWidth)
  4c:	42a8      	cmp	r0, r5
  4e:	d2df      	bcs.n	10 <cRFont_Res8b_Bpp1_1G::u32StringWidth()+0x10>
                lui32StrWidthMax = lui32StrWidth;
  50:	4628      	mov	r0, r5
  52:	e7dd      	b.n	10 <cRFont_Res8b_Bpp1_1G::u32StringWidth()+0x10>
            //case ' ': // Leerzeichen
            //  BPP1_1G_HTrtlMinFP_AddPos2(VF_SPACE_X(1), 0, lhTurtle);
            //break;

          case '\n': // Zeilenumbruch
            lui32StrWidth = 0;
  54:	2500      	movs	r5, #0
  56:	e7db      	b.n	10 <cRFont_Res8b_Bpp1_1G::u32StringWidth()+0x10>
            break;
          }
        }
      }

      if (lui32StrWidthMax)
  58:	b110      	cbz	r0, 60 <cRFont_Res8b_Bpp1_1G::u32StringWidth()+0x60>
      {
        lui32StrWidthMax -= miGfxSpacing;
  5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  5e:	1ac0      	subs	r0, r0, r3
      }

      return lui32StrWidthMax;
    }
  60:	bc70      	pop	{r4, r5, r6}
  62:	4770      	bx	lr

Disassembly of section .text._ZN20cRFont_Res8b_Bpp1_1G12u32CharWidthEc:

00000000 <cRFont_Res8b_Bpp1_1G::u32CharWidth(char)>:
    u32 u32CharWidth(char8 lChr)
    {
      uint16 lui16LetterIdx;
      tstCharRes8B* lpstCharData;

      if ((lChr >= mui8IdxMin) &&
   0:	7943      	ldrb	r3, [r0, #5]
   2:	4299      	cmp	r1, r3
   4:	db13      	blt.n	2e <cRFont_Res8b_Bpp1_1G::u32CharWidth(char)+0x2e>
          (lChr <= mui8IdxMax))
   6:	7982      	ldrb	r2, [r0, #6]
      if ((lChr >= mui8IdxMin) &&
   8:	4291      	cmp	r1, r2
   a:	dc12      	bgt.n	32 <cRFont_Res8b_Bpp1_1G::u32CharWidth(char)+0x32>
      {
        lui16LetterIdx = maui16CharLut[lChr - mui8IdxMin];
   c:	6942      	ldr	r2, [r0, #20]
   e:	1ac9      	subs	r1, r1, r3
  10:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]

        if (lui16LetterIdx != 0xFFFF)
  14:	f64f 72ff 	movw	r2, #65535	; 0xffff
  18:	4293      	cmp	r3, r2
  1a:	d00c      	beq.n	36 <cRFont_Res8b_Bpp1_1G::u32CharWidth(char)+0x36>
        {
          lpstCharData = (tstCharRes8B*)(maui8CharData + lui16LetterIdx);
  1c:	6902      	ldr	r2, [r0, #16]
  1e:	18d1      	adds	r1, r2, r3
          {
            return (int8)lpstCharData->u8XOffset + lpstCharData->u8Width + miGfxSpacing;
  20:	56d3      	ldrsb	r3, [r2, r3]
  22:	788a      	ldrb	r2, [r1, #2]
  24:	4413      	add	r3, r2
  26:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
  2a:	4418      	add	r0, r3
  2c:	4770      	bx	lr
          }
        }
      }
      return 0;
  2e:	2000      	movs	r0, #0
  30:	4770      	bx	lr
  32:	2000      	movs	r0, #0
  34:	4770      	bx	lr
  36:	2000      	movs	r0, #0
    }
  38:	4770      	bx	lr

Disassembly of section .text._ZN40cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B11i8BitAndRleEss:

00000000 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)>:
  FRet i8BitAndRle(GfxInt lixDestX, GfxInt lixDestY)
   0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mpcScreenDest->vRel2Abs(lixDestX, lixDestY);
   4:	69c4      	ldr	r4, [r0, #28]
      lu8Br1 = lu8Br;
    }
  }


  SCREEN_INLINE void vRel2AbsX(GfxInt &liGfxX) { liGfxX += miGfxRefPosx1; }
   6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   a:	4419      	add	r1, r3
   c:	b289      	uxth	r1, r1
   e:	b20f      	sxth	r7, r1
  SCREEN_INLINE void vRel2AbsY(GfxInt &liGfxY) { liGfxY += miGfxRefPosy1; }
  10:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  14:	441a      	add	r2, r3
  16:	b292      	uxth	r2, r2
  18:	fa0f fc82 	sxth.w	ip, r2
    if (bClip(lixDestX, lixDestY))
  1c:	1d05      	adds	r5, r0, #4
      miGfxDestX1 = liGfxDestX1;
  1e:	83af      	strh	r7, [r5, #28]
      miGfxDestY1 = liGfxDestY1;
  20:	f8a5 c01e 	strh.w	ip, [r5, #30]
      miGfxDestX2 = miGfxDestX1 + mpcSprite->miGfxWidth - 1;
  24:	68ae      	ldr	r6, [r5, #8]
  26:	88b3      	ldrh	r3, [r6, #4]
  28:	440b      	add	r3, r1
  2a:	b29b      	uxth	r3, r3
  2c:	3b01      	subs	r3, #1
  2e:	b21b      	sxth	r3, r3
  30:	842b      	strh	r3, [r5, #32]
      miGfxDestY2 = miGfxDestY1 + mpcSprite->miGfxHeight - 1;
  32:	88f4      	ldrh	r4, [r6, #6]
  34:	4414      	add	r4, r2
  36:	b2a4      	uxth	r4, r4
  38:	3c01      	subs	r4, #1
  3a:	b224      	sxth	r4, r4
  3c:	846c      	strh	r4, [r5, #34]	; 0x22
      if (mpcScreenDest->isInAbs(miGfxDestX1, miGfxDestY1, miGfxDestX2, miGfxDestY2))
  3e:	f8d5 8018 	ldr.w	r8, [r5, #24]

  SCREEN_INLINE bool isInXAbs(GfxInt liGfxX) { return (isInX1Abs(liGfxX) && isInX2Abs(liGfxX)); }
  SCREEN_INLINE bool isInYAbs(GfxInt liGfxY) { return (isInY1Abs(liGfxY) && isInY2Abs(liGfxY)); }
  SCREEN_INLINE bool isInAbs(GfxInt liGfxX, GfxInt liGfxY) { return (isInXAbs(liGfxX) && isInYAbs(liGfxY)); }
  SCREEN_INLINE bool isInAbs(GfxInt liGfxX1, GfxInt liGfxY1,
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
  42:	f898 e010 	ldrb.w	lr, [r8, #16]
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
  46:	f1be 0f00 	cmp.w	lr, #0
  4a:	d04b      	beq.n	e4 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xe4>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
  4c:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
  50:	454f      	cmp	r7, r9
  52:	dc45      	bgt.n	e0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xe0>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
  54:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
  58:	45cc      	cmp	ip, r9
  5a:	dc49      	bgt.n	f0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xf0>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
  5c:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
  60:	454b      	cmp	r3, r9
  62:	db48      	blt.n	f6 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xf6>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
  64:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
  68:	454c      	cmp	r4, r9
  6a:	db47      	blt.n	fc <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xfc>
        miGfxSpriteX1 = 0;
  6c:	f04f 0900 	mov.w	r9, #0
  70:	f8a5 900c 	strh.w	r9, [r5, #12]
        miGfxSpriteY1 = 0;
  74:	f8a5 900e 	strh.w	r9, [r5, #14]
        miGfxSpriteX2 = mpcSprite->miGfxWidth - 1;
  78:	f8b6 9004 	ldrh.w	r9, [r6, #4]
  7c:	f109 39ff 	add.w	r9, r9, #4294967295
  80:	f8a5 9010 	strh.w	r9, [r5, #16]
        miGfxSpriteY2 = mpcSprite->miGfxHeight - 1;
  84:	88f6      	ldrh	r6, [r6, #6]
  86:	3e01      	subs	r6, #1
  88:	826e      	strh	r6, [r5, #18]
        if (miGfxDestX1 < mpcScreenDest->miGfxClipPosx1) { miGfxSpriteX1 = mpcScreenDest->miGfxClipPosx1 - miGfxDestX1; miGfxDestX1 = mpcScreenDest->miGfxClipPosx1; }
  8a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
  8e:	42b7      	cmp	r7, r6
  90:	da05      	bge.n	9e <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x9e>
  92:	b2b6      	uxth	r6, r6
  94:	1a71      	subs	r1, r6, r1
  96:	81a9      	strh	r1, [r5, #12]
  98:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
  9c:	83a9      	strh	r1, [r5, #28]
        if (miGfxDestY1 < mpcScreenDest->miGfxClipPosy1) { miGfxSpriteY1 = mpcScreenDest->miGfxClipPosy1 - miGfxDestY1; miGfxDestY1 = mpcScreenDest->miGfxClipPosy1; }
  9e:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
  a2:	458c      	cmp	ip, r1
  a4:	da05      	bge.n	b2 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xb2>
  a6:	b289      	uxth	r1, r1
  a8:	1a8a      	subs	r2, r1, r2
  aa:	81ea      	strh	r2, [r5, #14]
  ac:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
  b0:	83ea      	strh	r2, [r5, #30]
        if (miGfxDestX2 > mpcScreenDest->miGfxClipPosx2) miGfxSpriteX2 = miGfxSpriteX1 + mpcScreenDest->miGfxClipPosx2 - miGfxDestX1;
  b2:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
  b6:	4293      	cmp	r3, r2
  b8:	dd06      	ble.n	c8 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xc8>
  ba:	89ab      	ldrh	r3, [r5, #12]
  bc:	fa13 f382 	uxtah	r3, r3, r2
  c0:	b29b      	uxth	r3, r3
  c2:	8baa      	ldrh	r2, [r5, #28]
  c4:	1a9b      	subs	r3, r3, r2
  c6:	822b      	strh	r3, [r5, #16]
        if (miGfxDestY2 > mpcScreenDest->miGfxClipPosy2) miGfxSpriteY2 = miGfxSpriteY1 + mpcScreenDest->miGfxClipPosy2 - miGfxDestY1;
  c8:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  cc:	429c      	cmp	r4, r3
  ce:	dd09      	ble.n	e4 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xe4>
  d0:	89ea      	ldrh	r2, [r5, #14]
  d2:	fa12 f383 	uxtah	r3, r2, r3
  d6:	b29b      	uxth	r3, r3
  d8:	8bea      	ldrh	r2, [r5, #30]
  da:	1a9b      	subs	r3, r3, r2
  dc:	826b      	strh	r3, [r5, #18]
  de:	e001      	b.n	e4 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xe4>
      return False;
  e0:	f04f 0e00 	mov.w	lr, #0
  e4:	f1be 0f00 	cmp.w	lr, #0
  e8:	d10b      	bne.n	102 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x102>
  }
  ea:	2000      	movs	r0, #0
  ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  f0:	f04f 0e00 	mov.w	lr, #0
  f4:	e7f6      	b.n	e4 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xe4>
  f6:	f04f 0e00 	mov.w	lr, #0
  fa:	e7f3      	b.n	e4 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xe4>
  fc:	f04f 0e00 	mov.w	lr, #0
 100:	e7f0      	b.n	e4 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xe4>
    mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 102:	6982      	ldr	r2, [r0, #24]
 104:	7813      	ldrb	r3, [r2, #0]
 106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 10a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 10e:	7813      	ldrb	r3, [r2, #0]
 110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 114:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    vGoPxlRle(miGfxSpriteX1 + (miGfxSpriteY1 * mpcSprite->miGfxWidth));
 118:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
 11c:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
 120:	68c3      	ldr	r3, [r0, #12]
 122:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 126:	fb03 4305 	mla	r3, r3, r5, r4
    while (muixPxlCnt > 0)
 12a:	b1ab      	cbz	r3, 158 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x158>
      if (mui8SpriteRleCnt > muixPxlCnt)
 12c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 130:	4293      	cmp	r3, r2
 132:	d30e      	bcc.n	152 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x152>
        muixPxlCnt -= mui8SpriteRleCnt;
 134:	1a9b      	subs	r3, r3, r2
        mpui8Sprite++;
 136:	6982      	ldr	r2, [r0, #24]
 138:	1c51      	adds	r1, r2, #1
 13a:	6181      	str	r1, [r0, #24]
        mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 13c:	7851      	ldrb	r1, [r2, #1]
 13e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 142:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
        mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 146:	7852      	ldrb	r2, [r2, #1]
 148:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 14c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 150:	e7eb      	b.n	12a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x12a>
        mui8SpriteRleCnt -= muixPxlCnt;
 152:	1ad3      	subs	r3, r2, r3
 154:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    luixBytePosDest = (GfxImgSize)(miGfxDestY1 * mpcScreenDest->mpcBm->miGfxWidth + miGfxDestX1);
 158:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 15c:	69c2      	ldr	r2, [r0, #28]
 15e:	6951      	ldr	r1, [r2, #20]
 160:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 164:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
 168:	fb06 2203 	mla	r2, r6, r3, r2
    mpui8Dest = mpcScreenDest->mpcBm->mpui8Data + BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(luixBytePosDest);
 16c:	680b      	ldr	r3, [r1, #0]
 16e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 172:	6283      	str	r3, [r0, #40]	; 0x28
    muixYCnt = (miGfxSpriteY2 - miGfxSpriteY1) + 1;
 174:	8ac2      	ldrh	r2, [r0, #22]
 176:	b2ad      	uxth	r5, r5
 178:	1b52      	subs	r2, r2, r5
 17a:	b292      	uxth	r2, r2
 17c:	3201      	adds	r2, #1
 17e:	8582      	strh	r2, [r0, #44]	; 0x2c
    muixXCnt = (miGfxSpriteX2 - miGfxSpriteX1) + 1;
 180:	8a83      	ldrh	r3, [r0, #20]
 182:	b2a4      	uxth	r4, r4
 184:	1b1b      	subs	r3, r3, r4
 186:	b29b      	uxth	r3, r3
 188:	3301      	adds	r3, #1
 18a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 18c:	e052      	b.n	234 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x234>
            *lpui16Dest = 0;
 18e:	2300      	movs	r3, #0
 190:	800b      	strh	r3, [r1, #0]
 192:	e00b      	b.n	1ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x1ac>
          luixXCnt--;
 194:	3a01      	subs	r2, #1
 196:	b212      	sxth	r2, r2
        while (luixXCnt > 0)
 198:	2a00      	cmp	r2, #0
 19a:	dd1e      	ble.n	1da <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x1da>
          if (mui8SpriteRleValue)
 19c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 1a0:	2b00      	cmp	r3, #0
 1a2:	d0f4      	beq.n	18e <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x18e>
            *lpui16Dest &= mui32Col;
 1a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 1a6:	880c      	ldrh	r4, [r1, #0]
 1a8:	4023      	ands	r3, r4
 1aa:	800b      	strh	r3, [r1, #0]
          lpui16Dest++;
 1ac:	3102      	adds	r1, #2
          mui8SpriteRleCnt--;
 1ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 1b2:	3b01      	subs	r3, #1
 1b4:	b2db      	uxtb	r3, r3
 1b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
          if (mui8SpriteRleCnt == 0)
 1ba:	2b00      	cmp	r3, #0
 1bc:	d1ea      	bne.n	194 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x194>
            mpui8Sprite++;
 1be:	6983      	ldr	r3, [r0, #24]
 1c0:	1c5c      	adds	r4, r3, #1
 1c2:	6184      	str	r4, [r0, #24]
            mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 1c4:	785c      	ldrb	r4, [r3, #1]
 1c6:	f004 0480 	and.w	r4, r4, #128	; 0x80
 1ca:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
            mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 1ce:	785b      	ldrb	r3, [r3, #1]
 1d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 1d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 1d8:	e7dc      	b.n	194 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x194>
        vGoPxlRle(miGfxSpriteX1 + (mpcSprite->miGfxWidth - (miGfxSpriteX2 + 1)));
 1da:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 1de:	68c2      	ldr	r2, [r0, #12]
 1e0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 1e4:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 1e8:	3101      	adds	r1, #1
 1ea:	1a52      	subs	r2, r2, r1
 1ec:	4413      	add	r3, r2
    while (muixPxlCnt > 0)
 1ee:	b1ab      	cbz	r3, 21c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x21c>
      if (mui8SpriteRleCnt > muixPxlCnt)
 1f0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 1f4:	4293      	cmp	r3, r2
 1f6:	d30e      	bcc.n	216 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x216>
        muixPxlCnt -= mui8SpriteRleCnt;
 1f8:	1a9b      	subs	r3, r3, r2
        mpui8Sprite++;
 1fa:	6982      	ldr	r2, [r0, #24]
 1fc:	1c51      	adds	r1, r2, #1
 1fe:	6181      	str	r1, [r0, #24]
        mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 200:	7851      	ldrb	r1, [r2, #1]
 202:	f001 0180 	and.w	r1, r1, #128	; 0x80
 206:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
        mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 20a:	7852      	ldrb	r2, [r2, #1]
 20c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 210:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 214:	e7eb      	b.n	1ee <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x1ee>
        mui8SpriteRleCnt -= muixPxlCnt;
 216:	1ad3      	subs	r3, r2, r3
 218:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        mpui8Dest += BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(mpcScreenDest->mpcBm->miGfxWidth);
 21c:	69c3      	ldr	r3, [r0, #28]
 21e:	695b      	ldr	r3, [r3, #20]
 220:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 224:	6a83      	ldr	r3, [r0, #40]	; 0x28
 226:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 22a:	6283      	str	r3, [r0, #40]	; 0x28
        muixYCnt--;
 22c:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 230:	3b01      	subs	r3, #1
 232:	8583      	strh	r3, [r0, #44]	; 0x2c
      while (muixYCnt > 0)
 234:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 238:	2b00      	cmp	r3, #0
 23a:	f77f af56 	ble.w	ea <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xea>
        luixXCnt = muixXCnt;
 23e:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
        lpui16Dest = (uint16*)mpui8Dest;
 242:	6a81      	ldr	r1, [r0, #40]	; 0x28
 244:	e7a8      	b.n	198 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x198>

00000246 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)>:
 246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 24a:	1f03      	subs	r3, r0, #4
 24c:	69dd      	ldr	r5, [r3, #28]
 24e:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 252:	4421      	add	r1, r4
 254:	b289      	uxth	r1, r1
 256:	b20f      	sxth	r7, r1
 258:	f9b5 4006 	ldrsh.w	r4, [r5, #6]
 25c:	4422      	add	r2, r4
 25e:	b292      	uxth	r2, r2
 260:	fa0f fc82 	sxth.w	ip, r2
 264:	8387      	strh	r7, [r0, #28]
 266:	f8a0 c01e 	strh.w	ip, [r0, #30]
 26a:	6886      	ldr	r6, [r0, #8]
 26c:	88b4      	ldrh	r4, [r6, #4]
 26e:	440c      	add	r4, r1
 270:	b2a4      	uxth	r4, r4
 272:	3c01      	subs	r4, #1
 274:	b224      	sxth	r4, r4
 276:	8404      	strh	r4, [r0, #32]
 278:	88f5      	ldrh	r5, [r6, #6]
 27a:	4415      	add	r5, r2
 27c:	b2ad      	uxth	r5, r5
 27e:	3d01      	subs	r5, #1
 280:	b22d      	sxth	r5, r5
 282:	8445      	strh	r5, [r0, #34]	; 0x22
 284:	f8d0 8018 	ldr.w	r8, [r0, #24]
 288:	f898 e010 	ldrb.w	lr, [r8, #16]
 28c:	f1be 0f00 	cmp.w	lr, #0
 290:	d04b      	beq.n	32a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xe4>
 292:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
 296:	454f      	cmp	r7, r9
 298:	dc45      	bgt.n	326 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xe0>
 29a:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
 29e:	45cc      	cmp	ip, r9
 2a0:	dc49      	bgt.n	336 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xf0>
 2a2:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
 2a6:	454c      	cmp	r4, r9
 2a8:	db48      	blt.n	33c <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xf6>
 2aa:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
 2ae:	454d      	cmp	r5, r9
 2b0:	db47      	blt.n	342 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xfc>
 2b2:	f04f 0900 	mov.w	r9, #0
 2b6:	f8a0 900c 	strh.w	r9, [r0, #12]
 2ba:	f8a0 900e 	strh.w	r9, [r0, #14]
 2be:	f8b6 9004 	ldrh.w	r9, [r6, #4]
 2c2:	f109 39ff 	add.w	r9, r9, #4294967295
 2c6:	f8a0 9010 	strh.w	r9, [r0, #16]
 2ca:	88f6      	ldrh	r6, [r6, #6]
 2cc:	3e01      	subs	r6, #1
 2ce:	8246      	strh	r6, [r0, #18]
 2d0:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 2d4:	42b7      	cmp	r7, r6
 2d6:	da05      	bge.n	2e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x9e>
 2d8:	b2b6      	uxth	r6, r6
 2da:	1a71      	subs	r1, r6, r1
 2dc:	8181      	strh	r1, [r0, #12]
 2de:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
 2e2:	8381      	strh	r1, [r0, #28]
 2e4:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
 2e8:	458c      	cmp	ip, r1
 2ea:	da05      	bge.n	2f8 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xb2>
 2ec:	b289      	uxth	r1, r1
 2ee:	1a8a      	subs	r2, r1, r2
 2f0:	81c2      	strh	r2, [r0, #14]
 2f2:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
 2f6:	83c2      	strh	r2, [r0, #30]
 2f8:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 2fc:	4294      	cmp	r4, r2
 2fe:	dd06      	ble.n	30e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xc8>
 300:	8981      	ldrh	r1, [r0, #12]
 302:	fa11 f282 	uxtah	r2, r1, r2
 306:	b292      	uxth	r2, r2
 308:	8b81      	ldrh	r1, [r0, #28]
 30a:	1a52      	subs	r2, r2, r1
 30c:	8202      	strh	r2, [r0, #16]
 30e:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 312:	4295      	cmp	r5, r2
 314:	dd09      	ble.n	32a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xe4>
 316:	89c1      	ldrh	r1, [r0, #14]
 318:	fa11 f282 	uxtah	r2, r1, r2
 31c:	b292      	uxth	r2, r2
 31e:	8bc1      	ldrh	r1, [r0, #30]
 320:	1a52      	subs	r2, r2, r1
 322:	8242      	strh	r2, [r0, #18]
 324:	e001      	b.n	32a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xe4>
 326:	f04f 0e00 	mov.w	lr, #0
 32a:	f1be 0f00 	cmp.w	lr, #0
 32e:	d10b      	bne.n	348 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x102>
 330:	2000      	movs	r0, #0
 332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 336:	f04f 0e00 	mov.w	lr, #0
 33a:	e7f6      	b.n	32a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xe4>
 33c:	f04f 0e00 	mov.w	lr, #0
 340:	e7f3      	b.n	32a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xe4>
 342:	f04f 0e00 	mov.w	lr, #0
 346:	e7f0      	b.n	32a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xe4>
 348:	6999      	ldr	r1, [r3, #24]
 34a:	780a      	ldrb	r2, [r1, #0]
 34c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 354:	780a      	ldrb	r2, [r1, #0]
 356:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 35e:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 362:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 366:	68da      	ldr	r2, [r3, #12]
 368:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 36c:	fb02 4205 	mla	r2, r2, r5, r4
 370:	b1aa      	cbz	r2, 39e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x158>
 372:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 376:	428a      	cmp	r2, r1
 378:	d30e      	bcc.n	398 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x152>
 37a:	1a52      	subs	r2, r2, r1
 37c:	6999      	ldr	r1, [r3, #24]
 37e:	1c48      	adds	r0, r1, #1
 380:	6198      	str	r0, [r3, #24]
 382:	7848      	ldrb	r0, [r1, #1]
 384:	f000 0080 	and.w	r0, r0, #128	; 0x80
 388:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
 38c:	7849      	ldrb	r1, [r1, #1]
 38e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 392:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 396:	e7eb      	b.n	370 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x12a>
 398:	1a8a      	subs	r2, r1, r2
 39a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 39e:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 3a2:	69d9      	ldr	r1, [r3, #28]
 3a4:	6948      	ldr	r0, [r1, #20]
 3a6:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 3aa:	f9b3 1020 	ldrsh.w	r1, [r3, #32]
 3ae:	fb06 1102 	mla	r1, r6, r2, r1
 3b2:	6802      	ldr	r2, [r0, #0]
 3b4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 3b8:	629a      	str	r2, [r3, #40]	; 0x28
 3ba:	8ad9      	ldrh	r1, [r3, #22]
 3bc:	b2ad      	uxth	r5, r5
 3be:	1b49      	subs	r1, r1, r5
 3c0:	b289      	uxth	r1, r1
 3c2:	3101      	adds	r1, #1
 3c4:	8599      	strh	r1, [r3, #44]	; 0x2c
 3c6:	8a9a      	ldrh	r2, [r3, #20]
 3c8:	b2a4      	uxth	r4, r4
 3ca:	1b12      	subs	r2, r2, r4
 3cc:	b292      	uxth	r2, r2
 3ce:	3201      	adds	r2, #1
 3d0:	85da      	strh	r2, [r3, #46]	; 0x2e
 3d2:	e052      	b.n	47a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x234>
 3d4:	2200      	movs	r2, #0
 3d6:	8002      	strh	r2, [r0, #0]
 3d8:	e00b      	b.n	3f2 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x1ac>
 3da:	3901      	subs	r1, #1
 3dc:	b209      	sxth	r1, r1
 3de:	2900      	cmp	r1, #0
 3e0:	dd1e      	ble.n	420 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x1da>
 3e2:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 3e6:	2a00      	cmp	r2, #0
 3e8:	d0f4      	beq.n	3d4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x18e>
 3ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 3ec:	8804      	ldrh	r4, [r0, #0]
 3ee:	4022      	ands	r2, r4
 3f0:	8002      	strh	r2, [r0, #0]
 3f2:	3002      	adds	r0, #2
 3f4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 3f8:	3a01      	subs	r2, #1
 3fa:	b2d2      	uxtb	r2, r2
 3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 400:	2a00      	cmp	r2, #0
 402:	d1ea      	bne.n	3da <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x194>
 404:	699a      	ldr	r2, [r3, #24]
 406:	1c54      	adds	r4, r2, #1
 408:	619c      	str	r4, [r3, #24]
 40a:	7854      	ldrb	r4, [r2, #1]
 40c:	f004 0480 	and.w	r4, r4, #128	; 0x80
 410:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
 414:	7852      	ldrb	r2, [r2, #1]
 416:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 41a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 41e:	e7dc      	b.n	3da <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x194>
 420:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 424:	68d9      	ldr	r1, [r3, #12]
 426:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 42a:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 42e:	3001      	adds	r0, #1
 430:	1a09      	subs	r1, r1, r0
 432:	440a      	add	r2, r1
 434:	b1aa      	cbz	r2, 462 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x21c>
 436:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 43a:	428a      	cmp	r2, r1
 43c:	d30e      	bcc.n	45c <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x216>
 43e:	1a52      	subs	r2, r2, r1
 440:	6999      	ldr	r1, [r3, #24]
 442:	1c48      	adds	r0, r1, #1
 444:	6198      	str	r0, [r3, #24]
 446:	7848      	ldrb	r0, [r1, #1]
 448:	f000 0080 	and.w	r0, r0, #128	; 0x80
 44c:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
 450:	7849      	ldrb	r1, [r1, #1]
 452:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 456:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 45a:	e7eb      	b.n	434 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x1ee>
 45c:	1a8a      	subs	r2, r1, r2
 45e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 462:	69da      	ldr	r2, [r3, #28]
 464:	6952      	ldr	r2, [r2, #20]
 466:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 46a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 46c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 470:	629a      	str	r2, [r3, #40]	; 0x28
 472:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 476:	3a01      	subs	r2, #1
 478:	859a      	strh	r2, [r3, #44]	; 0x2c
 47a:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 47e:	2a00      	cmp	r2, #0
 480:	f77f af56 	ble.w	330 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0xea>
 484:	f9b3 102e 	ldrsh.w	r1, [r3, #46]	; 0x2e
 488:	6a98      	ldr	r0, [r3, #40]	; 0x28
 48a:	e7a8      	b.n	3de <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRle(short, short)+0x198>

Disassembly of section .text._ZN40cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B11i8BitCpyRawEss:

00000000 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)>:
   0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4:	1f04      	subs	r4, r0, #4
   6:	69e5      	ldr	r5, [r4, #28]
   8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   c:	4419      	add	r1, r3
   e:	b289      	uxth	r1, r1
  10:	b20f      	sxth	r7, r1
  12:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  16:	441a      	add	r2, r3
  18:	b292      	uxth	r2, r2
  1a:	fa0f fc82 	sxth.w	ip, r2
  1e:	8387      	strh	r7, [r0, #28]
  20:	f8a0 c01e 	strh.w	ip, [r0, #30]
  24:	6886      	ldr	r6, [r0, #8]
  26:	88b3      	ldrh	r3, [r6, #4]
  28:	440b      	add	r3, r1
  2a:	b29b      	uxth	r3, r3
  2c:	3b01      	subs	r3, #1
  2e:	b21b      	sxth	r3, r3
  30:	8403      	strh	r3, [r0, #32]
  32:	88f5      	ldrh	r5, [r6, #6]
  34:	4415      	add	r5, r2
  36:	b2ad      	uxth	r5, r5
  38:	3d01      	subs	r5, #1
  3a:	b22d      	sxth	r5, r5
  3c:	8445      	strh	r5, [r0, #34]	; 0x22
  3e:	f8d0 8018 	ldr.w	r8, [r0, #24]
  42:	f898 e010 	ldrb.w	lr, [r8, #16]
  46:	f1be 0f00 	cmp.w	lr, #0
  4a:	d04b      	beq.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xe4>
  4c:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
  50:	454f      	cmp	r7, r9
  52:	dc45      	bgt.n	e0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xe0>
  54:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
  58:	45cc      	cmp	ip, r9
  5a:	dc49      	bgt.n	f0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xf0>
  5c:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
  60:	454b      	cmp	r3, r9
  62:	db48      	blt.n	f6 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xf6>
  64:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
  68:	454d      	cmp	r5, r9
  6a:	db47      	blt.n	fc <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xfc>
  6c:	f04f 0900 	mov.w	r9, #0
  70:	f8a0 900c 	strh.w	r9, [r0, #12]
  74:	f8a0 900e 	strh.w	r9, [r0, #14]
  78:	f8b6 9004 	ldrh.w	r9, [r6, #4]
  7c:	f109 39ff 	add.w	r9, r9, #4294967295
  80:	f8a0 9010 	strh.w	r9, [r0, #16]
  84:	88f6      	ldrh	r6, [r6, #6]
  86:	3e01      	subs	r6, #1
  88:	8246      	strh	r6, [r0, #18]
  8a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
  8e:	42b7      	cmp	r7, r6
  90:	da05      	bge.n	9e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x9e>
  92:	b2b6      	uxth	r6, r6
  94:	1a71      	subs	r1, r6, r1
  96:	8181      	strh	r1, [r0, #12]
  98:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
  9c:	8381      	strh	r1, [r0, #28]
  9e:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
  a2:	458c      	cmp	ip, r1
  a4:	da05      	bge.n	b2 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xb2>
  a6:	b289      	uxth	r1, r1
  a8:	1a8a      	subs	r2, r1, r2
  aa:	81c2      	strh	r2, [r0, #14]
  ac:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
  b0:	83c2      	strh	r2, [r0, #30]
  b2:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
  b6:	4293      	cmp	r3, r2
  b8:	dd06      	ble.n	c8 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xc8>
  ba:	8983      	ldrh	r3, [r0, #12]
  bc:	fa13 f382 	uxtah	r3, r3, r2
  c0:	b29b      	uxth	r3, r3
  c2:	8b82      	ldrh	r2, [r0, #28]
  c4:	1a9b      	subs	r3, r3, r2
  c6:	8203      	strh	r3, [r0, #16]
  c8:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  cc:	429d      	cmp	r5, r3
  ce:	dd09      	ble.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xe4>
  d0:	89c2      	ldrh	r2, [r0, #14]
  d2:	fa12 f383 	uxtah	r3, r2, r3
  d6:	b29b      	uxth	r3, r3
  d8:	8bc2      	ldrh	r2, [r0, #30]
  da:	1a9b      	subs	r3, r3, r2
  dc:	8243      	strh	r3, [r0, #18]
  de:	e001      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xe4>
  e0:	f04f 0e00 	mov.w	lr, #0
  e4:	f1be 0f00 	cmp.w	lr, #0
  e8:	d10b      	bne.n	102 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x102>
  ea:	2000      	movs	r0, #0
  ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  f0:	f04f 0e00 	mov.w	lr, #0
  f4:	e7f6      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xe4>
  f6:	f04f 0e00 	mov.w	lr, #0
  fa:	e7f3      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xe4>
  fc:	f04f 0e00 	mov.w	lr, #0
 100:	e7f0      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xe4>
 102:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 106:	68e2      	ldr	r2, [r4, #12]
 108:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 10c:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 110:	fb01 0103 	mla	r1, r1, r3, r0
 114:	6361      	str	r1, [r4, #52]	; 0x34
 116:	6812      	ldr	r2, [r2, #0]
 118:	eb02 02d1 	add.w	r2, r2, r1, lsr #3
 11c:	61a2      	str	r2, [r4, #24]
 11e:	f001 0107 	and.w	r1, r1, #7
 122:	63a1      	str	r1, [r4, #56]	; 0x38
 124:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 128:	69e1      	ldr	r1, [r4, #28]
 12a:	694d      	ldr	r5, [r1, #20]
 12c:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 130:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 134:	fb06 1102 	mla	r1, r6, r2, r1
 138:	682a      	ldr	r2, [r5, #0]
 13a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 13e:	62a2      	str	r2, [r4, #40]	; 0x28
 140:	8ae2      	ldrh	r2, [r4, #22]
 142:	b29b      	uxth	r3, r3
 144:	1ad2      	subs	r2, r2, r3
 146:	b292      	uxth	r2, r2
 148:	3201      	adds	r2, #1
 14a:	85a2      	strh	r2, [r4, #44]	; 0x2c
 14c:	8aa3      	ldrh	r3, [r4, #20]
 14e:	b280      	uxth	r0, r0
 150:	1a1b      	subs	r3, r3, r0
 152:	b29b      	uxth	r3, r3
 154:	3301      	adds	r3, #1
 156:	85e3      	strh	r3, [r4, #46]	; 0x2e
 158:	e027      	b.n	1aa <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x1aa>
 15a:	2000      	movs	r0, #0
 15c:	8008      	strh	r0, [r1, #0]
 15e:	2b01      	cmp	r3, #1
 160:	d908      	bls.n	174 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x174>
 162:	085b      	lsrs	r3, r3, #1
 164:	3102      	adds	r1, #2
 166:	3a01      	subs	r2, #1
 168:	b13a      	cbz	r2, 17a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x17a>
 16a:	7828      	ldrb	r0, [r5, #0]
 16c:	4218      	tst	r0, r3
 16e:	d0f4      	beq.n	15a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x15a>
 170:	800e      	strh	r6, [r1, #0]
 172:	e7f4      	b.n	15e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x15e>
 174:	3501      	adds	r5, #1
 176:	2380      	movs	r3, #128	; 0x80
 178:	e7f4      	b.n	164 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x164>
 17a:	68e3      	ldr	r3, [r4, #12]
 17c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 180:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 182:	4413      	add	r3, r2
 184:	69a2      	ldr	r2, [r4, #24]
 186:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 18a:	61a2      	str	r2, [r4, #24]
 18c:	f003 0307 	and.w	r3, r3, #7
 190:	63a3      	str	r3, [r4, #56]	; 0x38
 192:	69e3      	ldr	r3, [r4, #28]
 194:	695b      	ldr	r3, [r3, #20]
 196:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 19a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 19c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 1a0:	62a3      	str	r3, [r4, #40]	; 0x28
 1a2:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 1a6:	3b01      	subs	r3, #1
 1a8:	85a3      	strh	r3, [r4, #44]	; 0x2c
 1aa:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 1ae:	2b00      	cmp	r3, #0
 1b0:	dd9b      	ble.n	ea <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xea>
 1b2:	69a5      	ldr	r5, [r4, #24]
 1b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 1b6:	8e26      	ldrh	r6, [r4, #48]	; 0x30
 1b8:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 1bc:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 1c0:	2380      	movs	r3, #128	; 0x80
 1c2:	4103      	asrs	r3, r0
 1c4:	b2db      	uxtb	r3, r3
 1c6:	e7cf      	b.n	168 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x168>

000001c8 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)>:
  FRet i8BitCpyRaw(GfxInt lixDestX, GfxInt lixDestY)
 1c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mpcScreenDest->vRel2Abs(lixDestX, lixDestY);
 1cc:	69c4      	ldr	r4, [r0, #28]
  SCREEN_INLINE void vRel2AbsX(GfxInt &liGfxX) { liGfxX += miGfxRefPosx1; }
 1ce:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 1d2:	4419      	add	r1, r3
 1d4:	b289      	uxth	r1, r1
 1d6:	b20f      	sxth	r7, r1
  SCREEN_INLINE void vRel2AbsY(GfxInt &liGfxY) { liGfxY += miGfxRefPosy1; }
 1d8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 1dc:	441a      	add	r2, r3
 1de:	b292      	uxth	r2, r2
 1e0:	fa0f fc82 	sxth.w	ip, r2
    if (bClip(lixDestX, lixDestY))
 1e4:	1d05      	adds	r5, r0, #4
      miGfxDestX1 = liGfxDestX1;
 1e6:	83af      	strh	r7, [r5, #28]
      miGfxDestY1 = liGfxDestY1;
 1e8:	f8a5 c01e 	strh.w	ip, [r5, #30]
      miGfxDestX2 = miGfxDestX1 + mpcSprite->miGfxWidth - 1;
 1ec:	68ae      	ldr	r6, [r5, #8]
 1ee:	88b3      	ldrh	r3, [r6, #4]
 1f0:	440b      	add	r3, r1
 1f2:	b29b      	uxth	r3, r3
 1f4:	3b01      	subs	r3, #1
 1f6:	b21b      	sxth	r3, r3
 1f8:	842b      	strh	r3, [r5, #32]
      miGfxDestY2 = miGfxDestY1 + mpcSprite->miGfxHeight - 1;
 1fa:	88f4      	ldrh	r4, [r6, #6]
 1fc:	4414      	add	r4, r2
 1fe:	b2a4      	uxth	r4, r4
 200:	3c01      	subs	r4, #1
 202:	b224      	sxth	r4, r4
 204:	846c      	strh	r4, [r5, #34]	; 0x22
      if (mpcScreenDest->isInAbs(miGfxDestX1, miGfxDestY1, miGfxDestX2, miGfxDestY2))
 206:	f8d5 8018 	ldr.w	r8, [r5, #24]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
 20a:	f898 e010 	ldrb.w	lr, [r8, #16]
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 20e:	f1be 0f00 	cmp.w	lr, #0
 212:	d04b      	beq.n	2ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xe4>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 214:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
 218:	454f      	cmp	r7, r9
 21a:	dc45      	bgt.n	2a8 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xe0>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 21c:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
 220:	45cc      	cmp	ip, r9
 222:	dc49      	bgt.n	2b8 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xf0>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 224:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 228:	454b      	cmp	r3, r9
 22a:	db48      	blt.n	2be <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xf6>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 22c:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
 230:	454c      	cmp	r4, r9
 232:	db47      	blt.n	2c4 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xfc>
        miGfxSpriteX1 = 0;
 234:	f04f 0900 	mov.w	r9, #0
 238:	f8a5 900c 	strh.w	r9, [r5, #12]
        miGfxSpriteY1 = 0;
 23c:	f8a5 900e 	strh.w	r9, [r5, #14]
        miGfxSpriteX2 = mpcSprite->miGfxWidth - 1;
 240:	f8b6 9004 	ldrh.w	r9, [r6, #4]
 244:	f109 39ff 	add.w	r9, r9, #4294967295
 248:	f8a5 9010 	strh.w	r9, [r5, #16]
        miGfxSpriteY2 = mpcSprite->miGfxHeight - 1;
 24c:	88f6      	ldrh	r6, [r6, #6]
 24e:	3e01      	subs	r6, #1
 250:	826e      	strh	r6, [r5, #18]
        if (miGfxDestX1 < mpcScreenDest->miGfxClipPosx1) { miGfxSpriteX1 = mpcScreenDest->miGfxClipPosx1 - miGfxDestX1; miGfxDestX1 = mpcScreenDest->miGfxClipPosx1; }
 252:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 256:	42b7      	cmp	r7, r6
 258:	da05      	bge.n	266 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x9e>
 25a:	b2b6      	uxth	r6, r6
 25c:	1a71      	subs	r1, r6, r1
 25e:	81a9      	strh	r1, [r5, #12]
 260:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
 264:	83a9      	strh	r1, [r5, #28]
        if (miGfxDestY1 < mpcScreenDest->miGfxClipPosy1) { miGfxSpriteY1 = mpcScreenDest->miGfxClipPosy1 - miGfxDestY1; miGfxDestY1 = mpcScreenDest->miGfxClipPosy1; }
 266:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
 26a:	458c      	cmp	ip, r1
 26c:	da05      	bge.n	27a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xb2>
 26e:	b289      	uxth	r1, r1
 270:	1a8a      	subs	r2, r1, r2
 272:	81ea      	strh	r2, [r5, #14]
 274:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
 278:	83ea      	strh	r2, [r5, #30]
        if (miGfxDestX2 > mpcScreenDest->miGfxClipPosx2) miGfxSpriteX2 = miGfxSpriteX1 + mpcScreenDest->miGfxClipPosx2 - miGfxDestX1;
 27a:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 27e:	4293      	cmp	r3, r2
 280:	dd06      	ble.n	290 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xc8>
 282:	89ab      	ldrh	r3, [r5, #12]
 284:	fa13 f382 	uxtah	r3, r3, r2
 288:	b29b      	uxth	r3, r3
 28a:	8baa      	ldrh	r2, [r5, #28]
 28c:	1a9b      	subs	r3, r3, r2
 28e:	822b      	strh	r3, [r5, #16]
        if (miGfxDestY2 > mpcScreenDest->miGfxClipPosy2) miGfxSpriteY2 = miGfxSpriteY1 + mpcScreenDest->miGfxClipPosy2 - miGfxDestY1;
 290:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 294:	429c      	cmp	r4, r3
 296:	dd09      	ble.n	2ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xe4>
 298:	89ea      	ldrh	r2, [r5, #14]
 29a:	fa12 f383 	uxtah	r3, r2, r3
 29e:	b29b      	uxth	r3, r3
 2a0:	8bea      	ldrh	r2, [r5, #30]
 2a2:	1a9b      	subs	r3, r3, r2
 2a4:	826b      	strh	r3, [r5, #18]
 2a6:	e001      	b.n	2ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xe4>
      return False;
 2a8:	f04f 0e00 	mov.w	lr, #0
 2ac:	f1be 0f00 	cmp.w	lr, #0
 2b0:	d10b      	bne.n	2ca <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x102>
  }
 2b2:	2000      	movs	r0, #0
 2b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 2b8:	f04f 0e00 	mov.w	lr, #0
 2bc:	e7f6      	b.n	2ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xe4>
 2be:	f04f 0e00 	mov.w	lr, #0
 2c2:	e7f3      	b.n	2ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xe4>
 2c4:	f04f 0e00 	mov.w	lr, #0
 2c8:	e7f0      	b.n	2ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xe4>
    muixBytePosSprite = (GfxImgSize)(miGfxSpriteY1 * mpcSprite->miGfxWidth + miGfxSpriteX1);
 2ca:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 2ce:	68c2      	ldr	r2, [r0, #12]
 2d0:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 2d4:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
 2d8:	fb01 4103 	mla	r1, r1, r3, r4
 2dc:	6341      	str	r1, [r0, #52]	; 0x34
    mpui8Sprite = mpcSprite->mpui8Data + BM_BPP1_1G_PXLIDX2BYTEPOS(muixBytePosSprite);
 2de:	6812      	ldr	r2, [r2, #0]
 2e0:	eb02 02d1 	add.w	r2, r2, r1, lsr #3
 2e4:	6182      	str	r2, [r0, #24]
    muixBitPosSprite = BM_BPP1_1G_PXLIDX2BITPOS(muixBytePosSprite);
 2e6:	f001 0107 	and.w	r1, r1, #7
 2ea:	6381      	str	r1, [r0, #56]	; 0x38
    luixBytePosDest = (GfxImgSize)(miGfxDestY1 * mpcScreenDest->mpcBm->miGfxWidth + miGfxDestX1);
 2ec:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
 2f0:	69c1      	ldr	r1, [r0, #28]
 2f2:	694d      	ldr	r5, [r1, #20]
 2f4:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 2f8:	f9b0 1020 	ldrsh.w	r1, [r0, #32]
 2fc:	fb06 1102 	mla	r1, r6, r2, r1
    mpui8Dest = mpcScreenDest->mpcBm->mpui8Data + BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(luixBytePosDest);
 300:	682a      	ldr	r2, [r5, #0]
 302:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 306:	6282      	str	r2, [r0, #40]	; 0x28
    muixYCnt = (miGfxSpriteY2 - miGfxSpriteY1) + 1;
 308:	8ac2      	ldrh	r2, [r0, #22]
 30a:	b29b      	uxth	r3, r3
 30c:	1ad2      	subs	r2, r2, r3
 30e:	b292      	uxth	r2, r2
 310:	3201      	adds	r2, #1
 312:	8582      	strh	r2, [r0, #44]	; 0x2c
    muixXCnt = (miGfxSpriteX2 - miGfxSpriteX1) + 1;
 314:	8a83      	ldrh	r3, [r0, #20]
 316:	b2a4      	uxth	r4, r4
 318:	1b1b      	subs	r3, r3, r4
 31a:	b29b      	uxth	r3, r3
 31c:	3301      	adds	r3, #1
 31e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 320:	e027      	b.n	372 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x1aa>
      {
        *lpui16Dest = lui16Value;
      }
      else
      {
        *lpui16Dest = 0;
 322:	2400      	movs	r4, #0
 324:	800c      	strh	r4, [r1, #0]
  static inline void  vBitIncPos(u8* &pui8Ptr, u8 &ui8Mask)                                 {if ((ui8Mask) > 1) {ui8Mask >>= 1;} else {ui8Mask = 128; pui8Ptr++;}}
 326:	2b01      	cmp	r3, #1
 328:	d908      	bls.n	33c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x174>
 32a:	085b      	lsrs	r3, r3, #1
      }

      vBitIncPos(lpui8Source, lui8BitMskSource);
      lpui16Dest++;
 32c:	3102      	adds	r1, #2

      luixSize--;
 32e:	3a01      	subs	r2, #1
    while (luixSize > 0)
 330:	b13a      	cbz	r2, 342 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x17a>
      if (*lpui8Source & lui8BitMskSource)
 332:	782c      	ldrb	r4, [r5, #0]
 334:	421c      	tst	r4, r3
 336:	d0f4      	beq.n	322 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x15a>
        *lpui16Dest = lui16Value;
 338:	800e      	strh	r6, [r1, #0]
 33a:	e7f4      	b.n	326 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x15e>
  static inline void  vBitIncPos(u8* &pui8Ptr, u8 &ui8Mask)                                 {if ((ui8Mask) > 1) {ui8Mask >>= 1;} else {ui8Mask = 128; pui8Ptr++;}}
 33c:	3501      	adds	r5, #1
 33e:	2380      	movs	r3, #128	; 0x80
 340:	e7f4      	b.n	32c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x164>
    muixBitPosSprite += mpcSprite->miGfxWidth;
 342:	68c3      	ldr	r3, [r0, #12]
 344:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 348:	6b82      	ldr	r2, [r0, #56]	; 0x38
 34a:	4413      	add	r3, r2
    mpui8Sprite += BM_BPP1_1G_PXLIDX2BYTEPOS(muixBitPosSprite);
 34c:	6982      	ldr	r2, [r0, #24]
 34e:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 352:	6182      	str	r2, [r0, #24]
    muixBitPosSprite = BM_BPP1_1G_PXLIDX2BITPOS(muixBitPosSprite);
 354:	f003 0307 	and.w	r3, r3, #7
 358:	6383      	str	r3, [r0, #56]	; 0x38
    mpui8Dest += BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(mpcScreenDest->mpcBm->miGfxWidth);
 35a:	69c3      	ldr	r3, [r0, #28]
 35c:	695b      	ldr	r3, [r3, #20]
 35e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 362:	6a83      	ldr	r3, [r0, #40]	; 0x28
 364:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 368:	6283      	str	r3, [r0, #40]	; 0x28
        muixYCnt--;
 36a:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 36e:	3b01      	subs	r3, #1
 370:	8583      	strh	r3, [r0, #44]	; 0x2c
      while (muixYCnt > 0)
 372:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 376:	2b00      	cmp	r3, #0
 378:	dd9b      	ble.n	2b2 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0xea>
        cMemTools::vMemBit2u16Cpy(mpui8Sprite, muixBitPosSprite, (uint16*)mpui8Dest, mui32Col, muixXCnt);
 37a:	6985      	ldr	r5, [r0, #24]
 37c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 37e:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 380:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
    lui8BitMskSource = 128 >> lui8SrcStartBitPos;
 384:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 388:	2380      	movs	r3, #128	; 0x80
 38a:	4123      	asrs	r3, r4
 38c:	b2db      	uxtb	r3, r3
 38e:	e7cf      	b.n	330 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRaw(short, short)+0x168>

Disassembly of section .text._ZN40cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B11i8BitXorRawEss:

00000000 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)>:
   0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4:	1f04      	subs	r4, r0, #4
   6:	69e5      	ldr	r5, [r4, #28]
   8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   c:	4419      	add	r1, r3
   e:	b289      	uxth	r1, r1
  10:	b20f      	sxth	r7, r1
  12:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  16:	441a      	add	r2, r3
  18:	b292      	uxth	r2, r2
  1a:	fa0f fc82 	sxth.w	ip, r2
  1e:	8387      	strh	r7, [r0, #28]
  20:	f8a0 c01e 	strh.w	ip, [r0, #30]
  24:	6886      	ldr	r6, [r0, #8]
  26:	88b3      	ldrh	r3, [r6, #4]
  28:	440b      	add	r3, r1
  2a:	b29b      	uxth	r3, r3
  2c:	3b01      	subs	r3, #1
  2e:	b21b      	sxth	r3, r3
  30:	8403      	strh	r3, [r0, #32]
  32:	88f5      	ldrh	r5, [r6, #6]
  34:	4415      	add	r5, r2
  36:	b2ad      	uxth	r5, r5
  38:	3d01      	subs	r5, #1
  3a:	b22d      	sxth	r5, r5
  3c:	8445      	strh	r5, [r0, #34]	; 0x22
  3e:	f8d0 8018 	ldr.w	r8, [r0, #24]
  42:	f898 e010 	ldrb.w	lr, [r8, #16]
  46:	f1be 0f00 	cmp.w	lr, #0
  4a:	d04b      	beq.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xe4>
  4c:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
  50:	454f      	cmp	r7, r9
  52:	dc45      	bgt.n	e0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xe0>
  54:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
  58:	45cc      	cmp	ip, r9
  5a:	dc49      	bgt.n	f0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xf0>
  5c:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
  60:	454b      	cmp	r3, r9
  62:	db48      	blt.n	f6 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xf6>
  64:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
  68:	454d      	cmp	r5, r9
  6a:	db47      	blt.n	fc <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xfc>
  6c:	f04f 0900 	mov.w	r9, #0
  70:	f8a0 900c 	strh.w	r9, [r0, #12]
  74:	f8a0 900e 	strh.w	r9, [r0, #14]
  78:	f8b6 9004 	ldrh.w	r9, [r6, #4]
  7c:	f109 39ff 	add.w	r9, r9, #4294967295
  80:	f8a0 9010 	strh.w	r9, [r0, #16]
  84:	88f6      	ldrh	r6, [r6, #6]
  86:	3e01      	subs	r6, #1
  88:	8246      	strh	r6, [r0, #18]
  8a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
  8e:	42b7      	cmp	r7, r6
  90:	da05      	bge.n	9e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x9e>
  92:	b2b6      	uxth	r6, r6
  94:	1a71      	subs	r1, r6, r1
  96:	8181      	strh	r1, [r0, #12]
  98:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
  9c:	8381      	strh	r1, [r0, #28]
  9e:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
  a2:	458c      	cmp	ip, r1
  a4:	da05      	bge.n	b2 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xb2>
  a6:	b289      	uxth	r1, r1
  a8:	1a8a      	subs	r2, r1, r2
  aa:	81c2      	strh	r2, [r0, #14]
  ac:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
  b0:	83c2      	strh	r2, [r0, #30]
  b2:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
  b6:	4293      	cmp	r3, r2
  b8:	dd06      	ble.n	c8 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xc8>
  ba:	8983      	ldrh	r3, [r0, #12]
  bc:	fa13 f382 	uxtah	r3, r3, r2
  c0:	b29b      	uxth	r3, r3
  c2:	8b82      	ldrh	r2, [r0, #28]
  c4:	1a9b      	subs	r3, r3, r2
  c6:	8203      	strh	r3, [r0, #16]
  c8:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  cc:	429d      	cmp	r5, r3
  ce:	dd09      	ble.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xe4>
  d0:	89c2      	ldrh	r2, [r0, #14]
  d2:	fa12 f383 	uxtah	r3, r2, r3
  d6:	b29b      	uxth	r3, r3
  d8:	8bc2      	ldrh	r2, [r0, #30]
  da:	1a9b      	subs	r3, r3, r2
  dc:	8243      	strh	r3, [r0, #18]
  de:	e001      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xe4>
  e0:	f04f 0e00 	mov.w	lr, #0
  e4:	f1be 0f00 	cmp.w	lr, #0
  e8:	d10b      	bne.n	102 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x102>
  ea:	2000      	movs	r0, #0
  ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  f0:	f04f 0e00 	mov.w	lr, #0
  f4:	e7f6      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xe4>
  f6:	f04f 0e00 	mov.w	lr, #0
  fa:	e7f3      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xe4>
  fc:	f04f 0e00 	mov.w	lr, #0
 100:	e7f0      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xe4>
 102:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 106:	68e2      	ldr	r2, [r4, #12]
 108:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 10c:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 110:	fb01 0103 	mla	r1, r1, r3, r0
 114:	6361      	str	r1, [r4, #52]	; 0x34
 116:	6812      	ldr	r2, [r2, #0]
 118:	eb02 02d1 	add.w	r2, r2, r1, lsr #3
 11c:	61a2      	str	r2, [r4, #24]
 11e:	f001 0107 	and.w	r1, r1, #7
 122:	63a1      	str	r1, [r4, #56]	; 0x38
 124:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 128:	69e1      	ldr	r1, [r4, #28]
 12a:	694d      	ldr	r5, [r1, #20]
 12c:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 130:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 134:	fb06 1102 	mla	r1, r6, r2, r1
 138:	682a      	ldr	r2, [r5, #0]
 13a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 13e:	62a2      	str	r2, [r4, #40]	; 0x28
 140:	8ae2      	ldrh	r2, [r4, #22]
 142:	b29b      	uxth	r3, r3
 144:	1ad2      	subs	r2, r2, r3
 146:	b292      	uxth	r2, r2
 148:	3201      	adds	r2, #1
 14a:	85a2      	strh	r2, [r4, #44]	; 0x2c
 14c:	8aa3      	ldrh	r3, [r4, #20]
 14e:	b280      	uxth	r0, r0
 150:	1a1b      	subs	r3, r3, r0
 152:	b29b      	uxth	r3, r3
 154:	3301      	adds	r3, #1
 156:	85e3      	strh	r3, [r4, #46]	; 0x2e
 158:	e029      	b.n	1ae <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x1ae>
 15a:	2000      	movs	r0, #0
 15c:	8010      	strh	r0, [r2, #0]
 15e:	2b01      	cmp	r3, #1
 160:	d90a      	bls.n	178 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x178>
 162:	085b      	lsrs	r3, r3, #1
 164:	3202      	adds	r2, #2
 166:	3901      	subs	r1, #1
 168:	b149      	cbz	r1, 17e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x17e>
 16a:	7828      	ldrb	r0, [r5, #0]
 16c:	4218      	tst	r0, r3
 16e:	d0f4      	beq.n	15a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x15a>
 170:	8810      	ldrh	r0, [r2, #0]
 172:	4070      	eors	r0, r6
 174:	8010      	strh	r0, [r2, #0]
 176:	e7f2      	b.n	15e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x15e>
 178:	3501      	adds	r5, #1
 17a:	2380      	movs	r3, #128	; 0x80
 17c:	e7f2      	b.n	164 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x164>
 17e:	68e3      	ldr	r3, [r4, #12]
 180:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 184:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 186:	4413      	add	r3, r2
 188:	69a2      	ldr	r2, [r4, #24]
 18a:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 18e:	61a2      	str	r2, [r4, #24]
 190:	f003 0307 	and.w	r3, r3, #7
 194:	63a3      	str	r3, [r4, #56]	; 0x38
 196:	69e3      	ldr	r3, [r4, #28]
 198:	695b      	ldr	r3, [r3, #20]
 19a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 19e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1a0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 1a4:	62a3      	str	r3, [r4, #40]	; 0x28
 1a6:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 1aa:	3b01      	subs	r3, #1
 1ac:	85a3      	strh	r3, [r4, #44]	; 0x2c
 1ae:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 1b2:	2b00      	cmp	r3, #0
 1b4:	dd99      	ble.n	ea <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xea>
 1b6:	69a5      	ldr	r5, [r4, #24]
 1b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 1ba:	8e26      	ldrh	r6, [r4, #48]	; 0x30
 1bc:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 1c0:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 1c4:	2380      	movs	r3, #128	; 0x80
 1c6:	4103      	asrs	r3, r0
 1c8:	b2db      	uxtb	r3, r3
 1ca:	e7cd      	b.n	168 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x168>

000001cc <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)>:
  FRet i8BitXorRaw(GfxInt lixDestX, GfxInt lixDestY)
 1cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mpcScreenDest->vRel2Abs(lixDestX, lixDestY);
 1d0:	69c4      	ldr	r4, [r0, #28]
  SCREEN_INLINE void vRel2AbsX(GfxInt &liGfxX) { liGfxX += miGfxRefPosx1; }
 1d2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 1d6:	4419      	add	r1, r3
 1d8:	b289      	uxth	r1, r1
 1da:	b20f      	sxth	r7, r1
  SCREEN_INLINE void vRel2AbsY(GfxInt &liGfxY) { liGfxY += miGfxRefPosy1; }
 1dc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 1e0:	441a      	add	r2, r3
 1e2:	b292      	uxth	r2, r2
 1e4:	fa0f fc82 	sxth.w	ip, r2
    if (bClip(lixDestX, lixDestY))
 1e8:	1d05      	adds	r5, r0, #4
      miGfxDestX1 = liGfxDestX1;
 1ea:	83af      	strh	r7, [r5, #28]
      miGfxDestY1 = liGfxDestY1;
 1ec:	f8a5 c01e 	strh.w	ip, [r5, #30]
      miGfxDestX2 = miGfxDestX1 + mpcSprite->miGfxWidth - 1;
 1f0:	68ae      	ldr	r6, [r5, #8]
 1f2:	88b3      	ldrh	r3, [r6, #4]
 1f4:	440b      	add	r3, r1
 1f6:	b29b      	uxth	r3, r3
 1f8:	3b01      	subs	r3, #1
 1fa:	b21b      	sxth	r3, r3
 1fc:	842b      	strh	r3, [r5, #32]
      miGfxDestY2 = miGfxDestY1 + mpcSprite->miGfxHeight - 1;
 1fe:	88f4      	ldrh	r4, [r6, #6]
 200:	4414      	add	r4, r2
 202:	b2a4      	uxth	r4, r4
 204:	3c01      	subs	r4, #1
 206:	b224      	sxth	r4, r4
 208:	846c      	strh	r4, [r5, #34]	; 0x22
      if (mpcScreenDest->isInAbs(miGfxDestX1, miGfxDestY1, miGfxDestX2, miGfxDestY2))
 20a:	f8d5 8018 	ldr.w	r8, [r5, #24]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
 20e:	f898 e010 	ldrb.w	lr, [r8, #16]
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 212:	f1be 0f00 	cmp.w	lr, #0
 216:	d04b      	beq.n	2b0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xe4>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 218:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
 21c:	454f      	cmp	r7, r9
 21e:	dc45      	bgt.n	2ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xe0>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 220:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
 224:	45cc      	cmp	ip, r9
 226:	dc49      	bgt.n	2bc <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xf0>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 228:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 22c:	454b      	cmp	r3, r9
 22e:	db48      	blt.n	2c2 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xf6>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 230:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
 234:	454c      	cmp	r4, r9
 236:	db47      	blt.n	2c8 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xfc>
        miGfxSpriteX1 = 0;
 238:	f04f 0900 	mov.w	r9, #0
 23c:	f8a5 900c 	strh.w	r9, [r5, #12]
        miGfxSpriteY1 = 0;
 240:	f8a5 900e 	strh.w	r9, [r5, #14]
        miGfxSpriteX2 = mpcSprite->miGfxWidth - 1;
 244:	f8b6 9004 	ldrh.w	r9, [r6, #4]
 248:	f109 39ff 	add.w	r9, r9, #4294967295
 24c:	f8a5 9010 	strh.w	r9, [r5, #16]
        miGfxSpriteY2 = mpcSprite->miGfxHeight - 1;
 250:	88f6      	ldrh	r6, [r6, #6]
 252:	3e01      	subs	r6, #1
 254:	826e      	strh	r6, [r5, #18]
        if (miGfxDestX1 < mpcScreenDest->miGfxClipPosx1) { miGfxSpriteX1 = mpcScreenDest->miGfxClipPosx1 - miGfxDestX1; miGfxDestX1 = mpcScreenDest->miGfxClipPosx1; }
 256:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 25a:	42b7      	cmp	r7, r6
 25c:	da05      	bge.n	26a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x9e>
 25e:	b2b6      	uxth	r6, r6
 260:	1a71      	subs	r1, r6, r1
 262:	81a9      	strh	r1, [r5, #12]
 264:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
 268:	83a9      	strh	r1, [r5, #28]
        if (miGfxDestY1 < mpcScreenDest->miGfxClipPosy1) { miGfxSpriteY1 = mpcScreenDest->miGfxClipPosy1 - miGfxDestY1; miGfxDestY1 = mpcScreenDest->miGfxClipPosy1; }
 26a:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
 26e:	458c      	cmp	ip, r1
 270:	da05      	bge.n	27e <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xb2>
 272:	b289      	uxth	r1, r1
 274:	1a8a      	subs	r2, r1, r2
 276:	81ea      	strh	r2, [r5, #14]
 278:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
 27c:	83ea      	strh	r2, [r5, #30]
        if (miGfxDestX2 > mpcScreenDest->miGfxClipPosx2) miGfxSpriteX2 = miGfxSpriteX1 + mpcScreenDest->miGfxClipPosx2 - miGfxDestX1;
 27e:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 282:	4293      	cmp	r3, r2
 284:	dd06      	ble.n	294 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xc8>
 286:	89ab      	ldrh	r3, [r5, #12]
 288:	fa13 f382 	uxtah	r3, r3, r2
 28c:	b29b      	uxth	r3, r3
 28e:	8baa      	ldrh	r2, [r5, #28]
 290:	1a9b      	subs	r3, r3, r2
 292:	822b      	strh	r3, [r5, #16]
        if (miGfxDestY2 > mpcScreenDest->miGfxClipPosy2) miGfxSpriteY2 = miGfxSpriteY1 + mpcScreenDest->miGfxClipPosy2 - miGfxDestY1;
 294:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 298:	429c      	cmp	r4, r3
 29a:	dd09      	ble.n	2b0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xe4>
 29c:	89ea      	ldrh	r2, [r5, #14]
 29e:	fa12 f383 	uxtah	r3, r2, r3
 2a2:	b29b      	uxth	r3, r3
 2a4:	8bea      	ldrh	r2, [r5, #30]
 2a6:	1a9b      	subs	r3, r3, r2
 2a8:	826b      	strh	r3, [r5, #18]
 2aa:	e001      	b.n	2b0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xe4>
      return False;
 2ac:	f04f 0e00 	mov.w	lr, #0
 2b0:	f1be 0f00 	cmp.w	lr, #0
 2b4:	d10b      	bne.n	2ce <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x102>
  }
 2b6:	2000      	movs	r0, #0
 2b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 2bc:	f04f 0e00 	mov.w	lr, #0
 2c0:	e7f6      	b.n	2b0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xe4>
 2c2:	f04f 0e00 	mov.w	lr, #0
 2c6:	e7f3      	b.n	2b0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xe4>
 2c8:	f04f 0e00 	mov.w	lr, #0
 2cc:	e7f0      	b.n	2b0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xe4>
    muixBytePosSprite = (GfxImgSize)(miGfxSpriteY1 * mpcSprite->miGfxWidth + miGfxSpriteX1);
 2ce:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 2d2:	68c2      	ldr	r2, [r0, #12]
 2d4:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 2d8:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
 2dc:	fb01 4103 	mla	r1, r1, r3, r4
 2e0:	6341      	str	r1, [r0, #52]	; 0x34
    mpui8Sprite = mpcSprite->mpui8Data + BM_BPP1_1G_PXLIDX2BYTEPOS(muixBytePosSprite);
 2e2:	6812      	ldr	r2, [r2, #0]
 2e4:	eb02 02d1 	add.w	r2, r2, r1, lsr #3
 2e8:	6182      	str	r2, [r0, #24]
    muixBitPosSprite = BM_BPP1_1G_PXLIDX2BITPOS(muixBytePosSprite);
 2ea:	f001 0107 	and.w	r1, r1, #7
 2ee:	6381      	str	r1, [r0, #56]	; 0x38
    luixBytePosDest = (GfxImgSize)(miGfxDestY1 * mpcScreenDest->mpcBm->miGfxWidth + miGfxDestX1);
 2f0:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
 2f4:	69c1      	ldr	r1, [r0, #28]
 2f6:	694d      	ldr	r5, [r1, #20]
 2f8:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 2fc:	f9b0 1020 	ldrsh.w	r1, [r0, #32]
 300:	fb06 1102 	mla	r1, r6, r2, r1
    mpui8Dest = mpcScreenDest->mpcBm->mpui8Data + BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(luixBytePosDest);
 304:	682a      	ldr	r2, [r5, #0]
 306:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 30a:	6282      	str	r2, [r0, #40]	; 0x28
    muixYCnt = (miGfxSpriteY2 - miGfxSpriteY1) + 1;
 30c:	8ac2      	ldrh	r2, [r0, #22]
 30e:	b29b      	uxth	r3, r3
 310:	1ad2      	subs	r2, r2, r3
 312:	b292      	uxth	r2, r2
 314:	3201      	adds	r2, #1
 316:	8582      	strh	r2, [r0, #44]	; 0x2c
    muixXCnt = (miGfxSpriteX2 - miGfxSpriteX1) + 1;
 318:	8a83      	ldrh	r3, [r0, #20]
 31a:	b2a4      	uxth	r4, r4
 31c:	1b1b      	subs	r3, r3, r4
 31e:	b29b      	uxth	r3, r3
 320:	3301      	adds	r3, #1
 322:	85c3      	strh	r3, [r0, #46]	; 0x2e
 324:	e029      	b.n	37a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x1ae>
      {
        *lpui16Dest ^= lui16Value;
      }
      else
      {
        *lpui16Dest = 0;
 326:	2400      	movs	r4, #0
 328:	8014      	strh	r4, [r2, #0]
  static inline void  vBitIncPos(u8* &pui8Ptr, u8 &ui8Mask)                                 {if ((ui8Mask) > 1) {ui8Mask >>= 1;} else {ui8Mask = 128; pui8Ptr++;}}
 32a:	2b01      	cmp	r3, #1
 32c:	d90a      	bls.n	344 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x178>
 32e:	085b      	lsrs	r3, r3, #1
      }

      vBitIncPos(lpui8Source, lui8BitMskSource);
      lpui16Dest++;
 330:	3202      	adds	r2, #2

      luixSize--;
 332:	3901      	subs	r1, #1
    while (luixSize > 0)
 334:	b149      	cbz	r1, 34a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x17e>
      if (*lpui8Source & lui8BitMskSource)
 336:	782c      	ldrb	r4, [r5, #0]
 338:	421c      	tst	r4, r3
 33a:	d0f4      	beq.n	326 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x15a>
        *lpui16Dest ^= lui16Value;
 33c:	8814      	ldrh	r4, [r2, #0]
 33e:	4074      	eors	r4, r6
 340:	8014      	strh	r4, [r2, #0]
 342:	e7f2      	b.n	32a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x15e>
  static inline void  vBitIncPos(u8* &pui8Ptr, u8 &ui8Mask)                                 {if ((ui8Mask) > 1) {ui8Mask >>= 1;} else {ui8Mask = 128; pui8Ptr++;}}
 344:	3501      	adds	r5, #1
 346:	2380      	movs	r3, #128	; 0x80
 348:	e7f2      	b.n	330 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x164>
    muixBitPosSprite += mpcSprite->miGfxWidth;
 34a:	68c3      	ldr	r3, [r0, #12]
 34c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 350:	6b82      	ldr	r2, [r0, #56]	; 0x38
 352:	4413      	add	r3, r2
    mpui8Sprite += BM_BPP1_1G_PXLIDX2BYTEPOS(muixBitPosSprite);
 354:	6982      	ldr	r2, [r0, #24]
 356:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 35a:	6182      	str	r2, [r0, #24]
    muixBitPosSprite = BM_BPP1_1G_PXLIDX2BITPOS(muixBitPosSprite);
 35c:	f003 0307 	and.w	r3, r3, #7
 360:	6383      	str	r3, [r0, #56]	; 0x38
    mpui8Dest += BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(mpcScreenDest->mpcBm->miGfxWidth);
 362:	69c3      	ldr	r3, [r0, #28]
 364:	695b      	ldr	r3, [r3, #20]
 366:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 36a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 36c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 370:	6283      	str	r3, [r0, #40]	; 0x28
        muixYCnt--;
 372:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 376:	3b01      	subs	r3, #1
 378:	8583      	strh	r3, [r0, #44]	; 0x2c
      while (muixYCnt > 0)
 37a:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 37e:	2b00      	cmp	r3, #0
 380:	dd99      	ble.n	2b6 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0xea>
        cMemTools::vMemBit2u16Xor(mpui8Sprite, muixBitPosSprite, (uint16*)mpui8Dest, mui32Col, muixXCnt);
 382:	6985      	ldr	r5, [r0, #24]
 384:	6a82      	ldr	r2, [r0, #40]	; 0x28
 386:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 388:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    lui8BitMskSource = 128 >> lui8SrcStartBitPos;
 38c:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 390:	2380      	movs	r3, #128	; 0x80
 392:	4123      	asrs	r3, r4
 394:	b2db      	uxtb	r3, r3
 396:	e7cd      	b.n	334 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRaw(short, short)+0x168>

Disassembly of section .text._ZN40cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B10i8BitOrRleEss:

00000000 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)>:
   0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4:	1f03      	subs	r3, r0, #4
   6:	69dd      	ldr	r5, [r3, #28]
   8:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
   c:	4421      	add	r1, r4
   e:	b289      	uxth	r1, r1
  10:	b20f      	sxth	r7, r1
  12:	f9b5 4006 	ldrsh.w	r4, [r5, #6]
  16:	4422      	add	r2, r4
  18:	b292      	uxth	r2, r2
  1a:	fa0f fc82 	sxth.w	ip, r2
  1e:	8387      	strh	r7, [r0, #28]
  20:	f8a0 c01e 	strh.w	ip, [r0, #30]
  24:	6886      	ldr	r6, [r0, #8]
  26:	88b4      	ldrh	r4, [r6, #4]
  28:	440c      	add	r4, r1
  2a:	b2a4      	uxth	r4, r4
  2c:	3c01      	subs	r4, #1
  2e:	b224      	sxth	r4, r4
  30:	8404      	strh	r4, [r0, #32]
  32:	88f5      	ldrh	r5, [r6, #6]
  34:	4415      	add	r5, r2
  36:	b2ad      	uxth	r5, r5
  38:	3d01      	subs	r5, #1
  3a:	b22d      	sxth	r5, r5
  3c:	8445      	strh	r5, [r0, #34]	; 0x22
  3e:	f8d0 8018 	ldr.w	r8, [r0, #24]
  42:	f898 e010 	ldrb.w	lr, [r8, #16]
  46:	f1be 0f00 	cmp.w	lr, #0
  4a:	d04b      	beq.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xe4>
  4c:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
  50:	454f      	cmp	r7, r9
  52:	dc45      	bgt.n	e0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xe0>
  54:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
  58:	45cc      	cmp	ip, r9
  5a:	dc49      	bgt.n	f0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xf0>
  5c:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
  60:	454c      	cmp	r4, r9
  62:	db48      	blt.n	f6 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xf6>
  64:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
  68:	454d      	cmp	r5, r9
  6a:	db47      	blt.n	fc <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xfc>
  6c:	f04f 0900 	mov.w	r9, #0
  70:	f8a0 900c 	strh.w	r9, [r0, #12]
  74:	f8a0 900e 	strh.w	r9, [r0, #14]
  78:	f8b6 9004 	ldrh.w	r9, [r6, #4]
  7c:	f109 39ff 	add.w	r9, r9, #4294967295
  80:	f8a0 9010 	strh.w	r9, [r0, #16]
  84:	88f6      	ldrh	r6, [r6, #6]
  86:	3e01      	subs	r6, #1
  88:	8246      	strh	r6, [r0, #18]
  8a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
  8e:	42b7      	cmp	r7, r6
  90:	da05      	bge.n	9e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x9e>
  92:	b2b6      	uxth	r6, r6
  94:	1a71      	subs	r1, r6, r1
  96:	8181      	strh	r1, [r0, #12]
  98:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
  9c:	8381      	strh	r1, [r0, #28]
  9e:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
  a2:	458c      	cmp	ip, r1
  a4:	da05      	bge.n	b2 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xb2>
  a6:	b289      	uxth	r1, r1
  a8:	1a8a      	subs	r2, r1, r2
  aa:	81c2      	strh	r2, [r0, #14]
  ac:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
  b0:	83c2      	strh	r2, [r0, #30]
  b2:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
  b6:	4294      	cmp	r4, r2
  b8:	dd06      	ble.n	c8 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xc8>
  ba:	8981      	ldrh	r1, [r0, #12]
  bc:	fa11 f282 	uxtah	r2, r1, r2
  c0:	b292      	uxth	r2, r2
  c2:	8b81      	ldrh	r1, [r0, #28]
  c4:	1a52      	subs	r2, r2, r1
  c6:	8202      	strh	r2, [r0, #16]
  c8:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
  cc:	4295      	cmp	r5, r2
  ce:	dd09      	ble.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xe4>
  d0:	89c1      	ldrh	r1, [r0, #14]
  d2:	fa11 f282 	uxtah	r2, r1, r2
  d6:	b292      	uxth	r2, r2
  d8:	8bc1      	ldrh	r1, [r0, #30]
  da:	1a52      	subs	r2, r2, r1
  dc:	8242      	strh	r2, [r0, #18]
  de:	e001      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xe4>
  e0:	f04f 0e00 	mov.w	lr, #0
  e4:	f1be 0f00 	cmp.w	lr, #0
  e8:	d10b      	bne.n	102 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x102>
  ea:	2000      	movs	r0, #0
  ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  f0:	f04f 0e00 	mov.w	lr, #0
  f4:	e7f6      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xe4>
  f6:	f04f 0e00 	mov.w	lr, #0
  fa:	e7f3      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xe4>
  fc:	f04f 0e00 	mov.w	lr, #0
 100:	e7f0      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xe4>
 102:	6999      	ldr	r1, [r3, #24]
 104:	780a      	ldrb	r2, [r1, #0]
 106:	f002 0280 	and.w	r2, r2, #128	; 0x80
 10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 10e:	780a      	ldrb	r2, [r1, #0]
 110:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 118:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 11c:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 120:	68da      	ldr	r2, [r3, #12]
 122:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 126:	fb02 4205 	mla	r2, r2, r5, r4
 12a:	b1aa      	cbz	r2, 158 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x158>
 12c:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 130:	428a      	cmp	r2, r1
 132:	d30e      	bcc.n	152 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x152>
 134:	1a52      	subs	r2, r2, r1
 136:	6999      	ldr	r1, [r3, #24]
 138:	1c48      	adds	r0, r1, #1
 13a:	6198      	str	r0, [r3, #24]
 13c:	7848      	ldrb	r0, [r1, #1]
 13e:	f000 0080 	and.w	r0, r0, #128	; 0x80
 142:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
 146:	7849      	ldrb	r1, [r1, #1]
 148:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 14c:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 150:	e7eb      	b.n	12a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x12a>
 152:	1a8a      	subs	r2, r1, r2
 154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 158:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 15c:	69d9      	ldr	r1, [r3, #28]
 15e:	6948      	ldr	r0, [r1, #20]
 160:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 164:	f9b3 1020 	ldrsh.w	r1, [r3, #32]
 168:	fb06 1102 	mla	r1, r6, r2, r1
 16c:	6802      	ldr	r2, [r0, #0]
 16e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 172:	629a      	str	r2, [r3, #40]	; 0x28
 174:	8ad9      	ldrh	r1, [r3, #22]
 176:	b2ad      	uxth	r5, r5
 178:	1b49      	subs	r1, r1, r5
 17a:	b289      	uxth	r1, r1
 17c:	3101      	adds	r1, #1
 17e:	8599      	strh	r1, [r3, #44]	; 0x2c
 180:	8a9a      	ldrh	r2, [r3, #20]
 182:	b2a4      	uxth	r4, r4
 184:	1b12      	subs	r2, r2, r4
 186:	b292      	uxth	r2, r2
 188:	3201      	adds	r2, #1
 18a:	85da      	strh	r2, [r3, #46]	; 0x2e
 18c:	e052      	b.n	234 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x234>
 18e:	2200      	movs	r2, #0
 190:	8002      	strh	r2, [r0, #0]
 192:	e00b      	b.n	1ac <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x1ac>
 194:	3901      	subs	r1, #1
 196:	b209      	sxth	r1, r1
 198:	2900      	cmp	r1, #0
 19a:	dd1e      	ble.n	1da <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x1da>
 19c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 1a0:	2a00      	cmp	r2, #0
 1a2:	d0f4      	beq.n	18e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x18e>
 1a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 1a6:	8804      	ldrh	r4, [r0, #0]
 1a8:	4322      	orrs	r2, r4
 1aa:	8002      	strh	r2, [r0, #0]
 1ac:	3002      	adds	r0, #2
 1ae:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 1b2:	3a01      	subs	r2, #1
 1b4:	b2d2      	uxtb	r2, r2
 1b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 1ba:	2a00      	cmp	r2, #0
 1bc:	d1ea      	bne.n	194 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x194>
 1be:	699a      	ldr	r2, [r3, #24]
 1c0:	1c54      	adds	r4, r2, #1
 1c2:	619c      	str	r4, [r3, #24]
 1c4:	7854      	ldrb	r4, [r2, #1]
 1c6:	f004 0480 	and.w	r4, r4, #128	; 0x80
 1ca:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
 1ce:	7852      	ldrb	r2, [r2, #1]
 1d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 1d8:	e7dc      	b.n	194 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x194>
 1da:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 1de:	68d9      	ldr	r1, [r3, #12]
 1e0:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 1e4:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 1e8:	3001      	adds	r0, #1
 1ea:	1a09      	subs	r1, r1, r0
 1ec:	440a      	add	r2, r1
 1ee:	b1aa      	cbz	r2, 21c <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x21c>
 1f0:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 1f4:	428a      	cmp	r2, r1
 1f6:	d30e      	bcc.n	216 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x216>
 1f8:	1a52      	subs	r2, r2, r1
 1fa:	6999      	ldr	r1, [r3, #24]
 1fc:	1c48      	adds	r0, r1, #1
 1fe:	6198      	str	r0, [r3, #24]
 200:	7848      	ldrb	r0, [r1, #1]
 202:	f000 0080 	and.w	r0, r0, #128	; 0x80
 206:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
 20a:	7849      	ldrb	r1, [r1, #1]
 20c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 210:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 214:	e7eb      	b.n	1ee <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x1ee>
 216:	1a8a      	subs	r2, r1, r2
 218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 21c:	69da      	ldr	r2, [r3, #28]
 21e:	6952      	ldr	r2, [r2, #20]
 220:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 226:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 22a:	629a      	str	r2, [r3, #40]	; 0x28
 22c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 230:	3a01      	subs	r2, #1
 232:	859a      	strh	r2, [r3, #44]	; 0x2c
 234:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 238:	2a00      	cmp	r2, #0
 23a:	f77f af56 	ble.w	ea <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xea>
 23e:	f9b3 102e 	ldrsh.w	r1, [r3, #46]	; 0x2e
 242:	6a98      	ldr	r0, [r3, #40]	; 0x28
 244:	e7a8      	b.n	198 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x198>

00000246 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)>:
  FRet i8BitOrRle(GfxInt lixDestX, GfxInt lixDestY)
 246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mpcScreenDest->vRel2Abs(lixDestX, lixDestY);
 24a:	69c4      	ldr	r4, [r0, #28]
  SCREEN_INLINE void vRel2AbsX(GfxInt &liGfxX) { liGfxX += miGfxRefPosx1; }
 24c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 250:	4419      	add	r1, r3
 252:	b289      	uxth	r1, r1
 254:	b20f      	sxth	r7, r1
  SCREEN_INLINE void vRel2AbsY(GfxInt &liGfxY) { liGfxY += miGfxRefPosy1; }
 256:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 25a:	441a      	add	r2, r3
 25c:	b292      	uxth	r2, r2
 25e:	fa0f fc82 	sxth.w	ip, r2
    if (bClip(lixDestX, lixDestY))
 262:	1d05      	adds	r5, r0, #4
      miGfxDestX1 = liGfxDestX1;
 264:	83af      	strh	r7, [r5, #28]
      miGfxDestY1 = liGfxDestY1;
 266:	f8a5 c01e 	strh.w	ip, [r5, #30]
      miGfxDestX2 = miGfxDestX1 + mpcSprite->miGfxWidth - 1;
 26a:	68ae      	ldr	r6, [r5, #8]
 26c:	88b3      	ldrh	r3, [r6, #4]
 26e:	440b      	add	r3, r1
 270:	b29b      	uxth	r3, r3
 272:	3b01      	subs	r3, #1
 274:	b21b      	sxth	r3, r3
 276:	842b      	strh	r3, [r5, #32]
      miGfxDestY2 = miGfxDestY1 + mpcSprite->miGfxHeight - 1;
 278:	88f4      	ldrh	r4, [r6, #6]
 27a:	4414      	add	r4, r2
 27c:	b2a4      	uxth	r4, r4
 27e:	3c01      	subs	r4, #1
 280:	b224      	sxth	r4, r4
 282:	846c      	strh	r4, [r5, #34]	; 0x22
      if (mpcScreenDest->isInAbs(miGfxDestX1, miGfxDestY1, miGfxDestX2, miGfxDestY2))
 284:	f8d5 8018 	ldr.w	r8, [r5, #24]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
 288:	f898 e010 	ldrb.w	lr, [r8, #16]
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 28c:	f1be 0f00 	cmp.w	lr, #0
 290:	d04b      	beq.n	32a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xe4>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 292:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
 296:	454f      	cmp	r7, r9
 298:	dc45      	bgt.n	326 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xe0>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 29a:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
 29e:	45cc      	cmp	ip, r9
 2a0:	dc49      	bgt.n	336 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xf0>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 2a2:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 2a6:	454b      	cmp	r3, r9
 2a8:	db48      	blt.n	33c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xf6>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 2aa:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
 2ae:	454c      	cmp	r4, r9
 2b0:	db47      	blt.n	342 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xfc>
        miGfxSpriteX1 = 0;
 2b2:	f04f 0900 	mov.w	r9, #0
 2b6:	f8a5 900c 	strh.w	r9, [r5, #12]
        miGfxSpriteY1 = 0;
 2ba:	f8a5 900e 	strh.w	r9, [r5, #14]
        miGfxSpriteX2 = mpcSprite->miGfxWidth - 1;
 2be:	f8b6 9004 	ldrh.w	r9, [r6, #4]
 2c2:	f109 39ff 	add.w	r9, r9, #4294967295
 2c6:	f8a5 9010 	strh.w	r9, [r5, #16]
        miGfxSpriteY2 = mpcSprite->miGfxHeight - 1;
 2ca:	88f6      	ldrh	r6, [r6, #6]
 2cc:	3e01      	subs	r6, #1
 2ce:	826e      	strh	r6, [r5, #18]
        if (miGfxDestX1 < mpcScreenDest->miGfxClipPosx1) { miGfxSpriteX1 = mpcScreenDest->miGfxClipPosx1 - miGfxDestX1; miGfxDestX1 = mpcScreenDest->miGfxClipPosx1; }
 2d0:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 2d4:	42b7      	cmp	r7, r6
 2d6:	da05      	bge.n	2e4 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x9e>
 2d8:	b2b6      	uxth	r6, r6
 2da:	1a71      	subs	r1, r6, r1
 2dc:	81a9      	strh	r1, [r5, #12]
 2de:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
 2e2:	83a9      	strh	r1, [r5, #28]
        if (miGfxDestY1 < mpcScreenDest->miGfxClipPosy1) { miGfxSpriteY1 = mpcScreenDest->miGfxClipPosy1 - miGfxDestY1; miGfxDestY1 = mpcScreenDest->miGfxClipPosy1; }
 2e4:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
 2e8:	458c      	cmp	ip, r1
 2ea:	da05      	bge.n	2f8 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xb2>
 2ec:	b289      	uxth	r1, r1
 2ee:	1a8a      	subs	r2, r1, r2
 2f0:	81ea      	strh	r2, [r5, #14]
 2f2:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
 2f6:	83ea      	strh	r2, [r5, #30]
        if (miGfxDestX2 > mpcScreenDest->miGfxClipPosx2) miGfxSpriteX2 = miGfxSpriteX1 + mpcScreenDest->miGfxClipPosx2 - miGfxDestX1;
 2f8:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 2fc:	4293      	cmp	r3, r2
 2fe:	dd06      	ble.n	30e <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xc8>
 300:	89ab      	ldrh	r3, [r5, #12]
 302:	fa13 f382 	uxtah	r3, r3, r2
 306:	b29b      	uxth	r3, r3
 308:	8baa      	ldrh	r2, [r5, #28]
 30a:	1a9b      	subs	r3, r3, r2
 30c:	822b      	strh	r3, [r5, #16]
        if (miGfxDestY2 > mpcScreenDest->miGfxClipPosy2) miGfxSpriteY2 = miGfxSpriteY1 + mpcScreenDest->miGfxClipPosy2 - miGfxDestY1;
 30e:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 312:	429c      	cmp	r4, r3
 314:	dd09      	ble.n	32a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xe4>
 316:	89ea      	ldrh	r2, [r5, #14]
 318:	fa12 f383 	uxtah	r3, r2, r3
 31c:	b29b      	uxth	r3, r3
 31e:	8bea      	ldrh	r2, [r5, #30]
 320:	1a9b      	subs	r3, r3, r2
 322:	826b      	strh	r3, [r5, #18]
 324:	e001      	b.n	32a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xe4>
      return False;
 326:	f04f 0e00 	mov.w	lr, #0
 32a:	f1be 0f00 	cmp.w	lr, #0
 32e:	d10b      	bne.n	348 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x102>
  }
 330:	2000      	movs	r0, #0
 332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 336:	f04f 0e00 	mov.w	lr, #0
 33a:	e7f6      	b.n	32a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xe4>
 33c:	f04f 0e00 	mov.w	lr, #0
 340:	e7f3      	b.n	32a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xe4>
 342:	f04f 0e00 	mov.w	lr, #0
 346:	e7f0      	b.n	32a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xe4>
    mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 348:	6982      	ldr	r2, [r0, #24]
 34a:	7813      	ldrb	r3, [r2, #0]
 34c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 350:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 354:	7813      	ldrb	r3, [r2, #0]
 356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 35a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    vGoPxlRle(miGfxSpriteX1 + (miGfxSpriteY1 * mpcSprite->miGfxWidth));
 35e:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
 362:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
 366:	68c3      	ldr	r3, [r0, #12]
 368:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 36c:	fb03 4305 	mla	r3, r3, r5, r4
    while (muixPxlCnt > 0)
 370:	b1ab      	cbz	r3, 39e <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x158>
      if (mui8SpriteRleCnt > muixPxlCnt)
 372:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 376:	4293      	cmp	r3, r2
 378:	d30e      	bcc.n	398 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x152>
        muixPxlCnt -= mui8SpriteRleCnt;
 37a:	1a9b      	subs	r3, r3, r2
        mpui8Sprite++;
 37c:	6982      	ldr	r2, [r0, #24]
 37e:	1c51      	adds	r1, r2, #1
 380:	6181      	str	r1, [r0, #24]
        mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 382:	7851      	ldrb	r1, [r2, #1]
 384:	f001 0180 	and.w	r1, r1, #128	; 0x80
 388:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
        mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 38c:	7852      	ldrb	r2, [r2, #1]
 38e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 392:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 396:	e7eb      	b.n	370 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x12a>
        mui8SpriteRleCnt -= muixPxlCnt;
 398:	1ad3      	subs	r3, r2, r3
 39a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    luixBytePosDest = (GfxImgSize)(miGfxDestY1 * mpcScreenDest->mpcBm->miGfxWidth + miGfxDestX1);
 39e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 3a2:	69c2      	ldr	r2, [r0, #28]
 3a4:	6951      	ldr	r1, [r2, #20]
 3a6:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 3aa:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
 3ae:	fb06 2203 	mla	r2, r6, r3, r2
    mpui8Dest = mpcScreenDest->mpcBm->mpui8Data + BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(luixBytePosDest);
 3b2:	680b      	ldr	r3, [r1, #0]
 3b4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 3b8:	6283      	str	r3, [r0, #40]	; 0x28
    muixYCnt = (miGfxSpriteY2 - miGfxSpriteY1) + 1;
 3ba:	8ac2      	ldrh	r2, [r0, #22]
 3bc:	b2ad      	uxth	r5, r5
 3be:	1b52      	subs	r2, r2, r5
 3c0:	b292      	uxth	r2, r2
 3c2:	3201      	adds	r2, #1
 3c4:	8582      	strh	r2, [r0, #44]	; 0x2c
    muixXCnt = (miGfxSpriteX2 - miGfxSpriteX1) + 1;
 3c6:	8a83      	ldrh	r3, [r0, #20]
 3c8:	b2a4      	uxth	r4, r4
 3ca:	1b1b      	subs	r3, r3, r4
 3cc:	b29b      	uxth	r3, r3
 3ce:	3301      	adds	r3, #1
 3d0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 3d2:	e052      	b.n	47a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x234>
            *lpui16Dest = 0;
 3d4:	2300      	movs	r3, #0
 3d6:	800b      	strh	r3, [r1, #0]
 3d8:	e00b      	b.n	3f2 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x1ac>
          luixXCnt--;
 3da:	3a01      	subs	r2, #1
 3dc:	b212      	sxth	r2, r2
        while (luixXCnt > 0)
 3de:	2a00      	cmp	r2, #0
 3e0:	dd1e      	ble.n	420 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x1da>
          if (mui8SpriteRleValue)
 3e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 3e6:	2b00      	cmp	r3, #0
 3e8:	d0f4      	beq.n	3d4 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x18e>
            *lpui16Dest |= mui32Col;
 3ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 3ec:	880c      	ldrh	r4, [r1, #0]
 3ee:	4323      	orrs	r3, r4
 3f0:	800b      	strh	r3, [r1, #0]
          lpui16Dest++;
 3f2:	3102      	adds	r1, #2
          mui8SpriteRleCnt--;
 3f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 3f8:	3b01      	subs	r3, #1
 3fa:	b2db      	uxtb	r3, r3
 3fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
          if (mui8SpriteRleCnt == 0)
 400:	2b00      	cmp	r3, #0
 402:	d1ea      	bne.n	3da <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x194>
            mpui8Sprite++;
 404:	6983      	ldr	r3, [r0, #24]
 406:	1c5c      	adds	r4, r3, #1
 408:	6184      	str	r4, [r0, #24]
            mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 40a:	785c      	ldrb	r4, [r3, #1]
 40c:	f004 0480 	and.w	r4, r4, #128	; 0x80
 410:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
            mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 414:	785b      	ldrb	r3, [r3, #1]
 416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 41a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 41e:	e7dc      	b.n	3da <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x194>
        vGoPxlRle(miGfxSpriteX1 + (mpcSprite->miGfxWidth - (miGfxSpriteX2 + 1)));
 420:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 424:	68c2      	ldr	r2, [r0, #12]
 426:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 42a:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 42e:	3101      	adds	r1, #1
 430:	1a52      	subs	r2, r2, r1
 432:	4413      	add	r3, r2
    while (muixPxlCnt > 0)
 434:	b1ab      	cbz	r3, 462 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x21c>
      if (mui8SpriteRleCnt > muixPxlCnt)
 436:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 43a:	4293      	cmp	r3, r2
 43c:	d30e      	bcc.n	45c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x216>
        muixPxlCnt -= mui8SpriteRleCnt;
 43e:	1a9b      	subs	r3, r3, r2
        mpui8Sprite++;
 440:	6982      	ldr	r2, [r0, #24]
 442:	1c51      	adds	r1, r2, #1
 444:	6181      	str	r1, [r0, #24]
        mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 446:	7851      	ldrb	r1, [r2, #1]
 448:	f001 0180 	and.w	r1, r1, #128	; 0x80
 44c:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
        mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 450:	7852      	ldrb	r2, [r2, #1]
 452:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 456:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 45a:	e7eb      	b.n	434 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x1ee>
        mui8SpriteRleCnt -= muixPxlCnt;
 45c:	1ad3      	subs	r3, r2, r3
 45e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        mpui8Dest += BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(mpcScreenDest->mpcBm->miGfxWidth);
 462:	69c3      	ldr	r3, [r0, #28]
 464:	695b      	ldr	r3, [r3, #20]
 466:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 46a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 46c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 470:	6283      	str	r3, [r0, #40]	; 0x28
        muixYCnt--;
 472:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 476:	3b01      	subs	r3, #1
 478:	8583      	strh	r3, [r0, #44]	; 0x2c
      while (muixYCnt > 0)
 47a:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 47e:	2b00      	cmp	r3, #0
 480:	f77f af56 	ble.w	330 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0xea>
        luixXCnt = muixXCnt;
 484:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
        lpui16Dest = (uint16*)mpui8Dest;
 488:	6a81      	ldr	r1, [r0, #40]	; 0x28
 48a:	e7a8      	b.n	3de <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRle(short, short)+0x198>

Disassembly of section .text._ZN40cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B11i8BitCpyRleEss:

00000000 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)>:
   0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4:	1f03      	subs	r3, r0, #4
   6:	69dd      	ldr	r5, [r3, #28]
   8:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
   c:	4421      	add	r1, r4
   e:	b289      	uxth	r1, r1
  10:	b20f      	sxth	r7, r1
  12:	f9b5 4006 	ldrsh.w	r4, [r5, #6]
  16:	4422      	add	r2, r4
  18:	b292      	uxth	r2, r2
  1a:	fa0f fc82 	sxth.w	ip, r2
  1e:	8387      	strh	r7, [r0, #28]
  20:	f8a0 c01e 	strh.w	ip, [r0, #30]
  24:	6886      	ldr	r6, [r0, #8]
  26:	88b4      	ldrh	r4, [r6, #4]
  28:	440c      	add	r4, r1
  2a:	b2a4      	uxth	r4, r4
  2c:	3c01      	subs	r4, #1
  2e:	b224      	sxth	r4, r4
  30:	8404      	strh	r4, [r0, #32]
  32:	88f5      	ldrh	r5, [r6, #6]
  34:	4415      	add	r5, r2
  36:	b2ad      	uxth	r5, r5
  38:	3d01      	subs	r5, #1
  3a:	b22d      	sxth	r5, r5
  3c:	8445      	strh	r5, [r0, #34]	; 0x22
  3e:	f8d0 8018 	ldr.w	r8, [r0, #24]
  42:	f898 e010 	ldrb.w	lr, [r8, #16]
  46:	f1be 0f00 	cmp.w	lr, #0
  4a:	d04b      	beq.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xe4>
  4c:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
  50:	454f      	cmp	r7, r9
  52:	dc45      	bgt.n	e0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xe0>
  54:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
  58:	45cc      	cmp	ip, r9
  5a:	dc49      	bgt.n	f0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xf0>
  5c:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
  60:	454c      	cmp	r4, r9
  62:	db48      	blt.n	f6 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xf6>
  64:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
  68:	454d      	cmp	r5, r9
  6a:	db47      	blt.n	fc <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xfc>
  6c:	f04f 0900 	mov.w	r9, #0
  70:	f8a0 900c 	strh.w	r9, [r0, #12]
  74:	f8a0 900e 	strh.w	r9, [r0, #14]
  78:	f8b6 9004 	ldrh.w	r9, [r6, #4]
  7c:	f109 39ff 	add.w	r9, r9, #4294967295
  80:	f8a0 9010 	strh.w	r9, [r0, #16]
  84:	88f6      	ldrh	r6, [r6, #6]
  86:	3e01      	subs	r6, #1
  88:	8246      	strh	r6, [r0, #18]
  8a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
  8e:	42b7      	cmp	r7, r6
  90:	da05      	bge.n	9e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x9e>
  92:	b2b6      	uxth	r6, r6
  94:	1a71      	subs	r1, r6, r1
  96:	8181      	strh	r1, [r0, #12]
  98:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
  9c:	8381      	strh	r1, [r0, #28]
  9e:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
  a2:	458c      	cmp	ip, r1
  a4:	da05      	bge.n	b2 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xb2>
  a6:	b289      	uxth	r1, r1
  a8:	1a8a      	subs	r2, r1, r2
  aa:	81c2      	strh	r2, [r0, #14]
  ac:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
  b0:	83c2      	strh	r2, [r0, #30]
  b2:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
  b6:	4294      	cmp	r4, r2
  b8:	dd06      	ble.n	c8 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xc8>
  ba:	8981      	ldrh	r1, [r0, #12]
  bc:	fa11 f282 	uxtah	r2, r1, r2
  c0:	b292      	uxth	r2, r2
  c2:	8b81      	ldrh	r1, [r0, #28]
  c4:	1a52      	subs	r2, r2, r1
  c6:	8202      	strh	r2, [r0, #16]
  c8:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
  cc:	4295      	cmp	r5, r2
  ce:	dd09      	ble.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xe4>
  d0:	89c1      	ldrh	r1, [r0, #14]
  d2:	fa11 f282 	uxtah	r2, r1, r2
  d6:	b292      	uxth	r2, r2
  d8:	8bc1      	ldrh	r1, [r0, #30]
  da:	1a52      	subs	r2, r2, r1
  dc:	8242      	strh	r2, [r0, #18]
  de:	e001      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xe4>
  e0:	f04f 0e00 	mov.w	lr, #0
  e4:	f1be 0f00 	cmp.w	lr, #0
  e8:	d10b      	bne.n	102 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x102>
  ea:	2000      	movs	r0, #0
  ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  f0:	f04f 0e00 	mov.w	lr, #0
  f4:	e7f6      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xe4>
  f6:	f04f 0e00 	mov.w	lr, #0
  fa:	e7f3      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xe4>
  fc:	f04f 0e00 	mov.w	lr, #0
 100:	e7f0      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xe4>
 102:	6999      	ldr	r1, [r3, #24]
 104:	780a      	ldrb	r2, [r1, #0]
 106:	f002 0280 	and.w	r2, r2, #128	; 0x80
 10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 10e:	780a      	ldrb	r2, [r1, #0]
 110:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 118:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 11c:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 120:	68da      	ldr	r2, [r3, #12]
 122:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 126:	fb02 4205 	mla	r2, r2, r5, r4
 12a:	b1aa      	cbz	r2, 158 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x158>
 12c:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 130:	428a      	cmp	r2, r1
 132:	d30e      	bcc.n	152 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x152>
 134:	1a52      	subs	r2, r2, r1
 136:	6999      	ldr	r1, [r3, #24]
 138:	1c48      	adds	r0, r1, #1
 13a:	6198      	str	r0, [r3, #24]
 13c:	7848      	ldrb	r0, [r1, #1]
 13e:	f000 0080 	and.w	r0, r0, #128	; 0x80
 142:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
 146:	7849      	ldrb	r1, [r1, #1]
 148:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 14c:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 150:	e7eb      	b.n	12a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x12a>
 152:	1a8a      	subs	r2, r1, r2
 154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 158:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 15c:	69d9      	ldr	r1, [r3, #28]
 15e:	6948      	ldr	r0, [r1, #20]
 160:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 164:	f9b3 1020 	ldrsh.w	r1, [r3, #32]
 168:	fb06 1102 	mla	r1, r6, r2, r1
 16c:	6802      	ldr	r2, [r0, #0]
 16e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 172:	629a      	str	r2, [r3, #40]	; 0x28
 174:	8ad9      	ldrh	r1, [r3, #22]
 176:	b2ad      	uxth	r5, r5
 178:	1b49      	subs	r1, r1, r5
 17a:	b289      	uxth	r1, r1
 17c:	3101      	adds	r1, #1
 17e:	8599      	strh	r1, [r3, #44]	; 0x2c
 180:	8a9a      	ldrh	r2, [r3, #20]
 182:	b2a4      	uxth	r4, r4
 184:	1b12      	subs	r2, r2, r4
 186:	b292      	uxth	r2, r2
 188:	3201      	adds	r2, #1
 18a:	85da      	strh	r2, [r3, #46]	; 0x2e
 18c:	e050      	b.n	230 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x230>
 18e:	2200      	movs	r2, #0
 190:	8002      	strh	r2, [r0, #0]
 192:	e009      	b.n	1a8 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x1a8>
 194:	3901      	subs	r1, #1
 196:	b209      	sxth	r1, r1
 198:	2900      	cmp	r1, #0
 19a:	dd1c      	ble.n	1d6 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x1d6>
 19c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 1a0:	2a00      	cmp	r2, #0
 1a2:	d0f4      	beq.n	18e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x18e>
 1a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 1a6:	8002      	strh	r2, [r0, #0]
 1a8:	3002      	adds	r0, #2
 1aa:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 1ae:	3a01      	subs	r2, #1
 1b0:	b2d2      	uxtb	r2, r2
 1b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 1b6:	2a00      	cmp	r2, #0
 1b8:	d1ec      	bne.n	194 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x194>
 1ba:	699a      	ldr	r2, [r3, #24]
 1bc:	1c54      	adds	r4, r2, #1
 1be:	619c      	str	r4, [r3, #24]
 1c0:	7854      	ldrb	r4, [r2, #1]
 1c2:	f004 0480 	and.w	r4, r4, #128	; 0x80
 1c6:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
 1ca:	7852      	ldrb	r2, [r2, #1]
 1cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 1d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 1d4:	e7de      	b.n	194 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x194>
 1d6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 1da:	68d9      	ldr	r1, [r3, #12]
 1dc:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 1e0:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 1e4:	3001      	adds	r0, #1
 1e6:	1a09      	subs	r1, r1, r0
 1e8:	440a      	add	r2, r1
 1ea:	b1aa      	cbz	r2, 218 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x218>
 1ec:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 1f0:	428a      	cmp	r2, r1
 1f2:	d30e      	bcc.n	212 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x212>
 1f4:	1a52      	subs	r2, r2, r1
 1f6:	6999      	ldr	r1, [r3, #24]
 1f8:	1c48      	adds	r0, r1, #1
 1fa:	6198      	str	r0, [r3, #24]
 1fc:	7848      	ldrb	r0, [r1, #1]
 1fe:	f000 0080 	and.w	r0, r0, #128	; 0x80
 202:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
 206:	7849      	ldrb	r1, [r1, #1]
 208:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 20c:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 210:	e7eb      	b.n	1ea <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x1ea>
 212:	1a8a      	subs	r2, r1, r2
 214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 218:	69da      	ldr	r2, [r3, #28]
 21a:	6952      	ldr	r2, [r2, #20]
 21c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 222:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 226:	629a      	str	r2, [r3, #40]	; 0x28
 228:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 22c:	3a01      	subs	r2, #1
 22e:	859a      	strh	r2, [r3, #44]	; 0x2c
 230:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 234:	2a00      	cmp	r2, #0
 236:	f77f af58 	ble.w	ea <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xea>
 23a:	f9b3 102e 	ldrsh.w	r1, [r3, #46]	; 0x2e
 23e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 240:	e7aa      	b.n	198 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x198>

00000242 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)>:
  FRet i8BitCpyRle(GfxInt lixDestX, GfxInt lixDestY)
 242:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mpcScreenDest->vRel2Abs(lixDestX, lixDestY);
 246:	69c4      	ldr	r4, [r0, #28]
  SCREEN_INLINE void vRel2AbsX(GfxInt &liGfxX) { liGfxX += miGfxRefPosx1; }
 248:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 24c:	4419      	add	r1, r3
 24e:	b289      	uxth	r1, r1
 250:	b20f      	sxth	r7, r1
  SCREEN_INLINE void vRel2AbsY(GfxInt &liGfxY) { liGfxY += miGfxRefPosy1; }
 252:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 256:	441a      	add	r2, r3
 258:	b292      	uxth	r2, r2
 25a:	fa0f fc82 	sxth.w	ip, r2
    if (bClip(lixDestX, lixDestY))
 25e:	1d05      	adds	r5, r0, #4
      miGfxDestX1 = liGfxDestX1;
 260:	83af      	strh	r7, [r5, #28]
      miGfxDestY1 = liGfxDestY1;
 262:	f8a5 c01e 	strh.w	ip, [r5, #30]
      miGfxDestX2 = miGfxDestX1 + mpcSprite->miGfxWidth - 1;
 266:	68ae      	ldr	r6, [r5, #8]
 268:	88b3      	ldrh	r3, [r6, #4]
 26a:	440b      	add	r3, r1
 26c:	b29b      	uxth	r3, r3
 26e:	3b01      	subs	r3, #1
 270:	b21b      	sxth	r3, r3
 272:	842b      	strh	r3, [r5, #32]
      miGfxDestY2 = miGfxDestY1 + mpcSprite->miGfxHeight - 1;
 274:	88f4      	ldrh	r4, [r6, #6]
 276:	4414      	add	r4, r2
 278:	b2a4      	uxth	r4, r4
 27a:	3c01      	subs	r4, #1
 27c:	b224      	sxth	r4, r4
 27e:	846c      	strh	r4, [r5, #34]	; 0x22
      if (mpcScreenDest->isInAbs(miGfxDestX1, miGfxDestY1, miGfxDestX2, miGfxDestY2))
 280:	f8d5 8018 	ldr.w	r8, [r5, #24]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
 284:	f898 e010 	ldrb.w	lr, [r8, #16]
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 288:	f1be 0f00 	cmp.w	lr, #0
 28c:	d04b      	beq.n	326 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xe4>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 28e:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
 292:	454f      	cmp	r7, r9
 294:	dc45      	bgt.n	322 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xe0>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 296:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
 29a:	45cc      	cmp	ip, r9
 29c:	dc49      	bgt.n	332 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xf0>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 29e:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 2a2:	454b      	cmp	r3, r9
 2a4:	db48      	blt.n	338 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xf6>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 2a6:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
 2aa:	454c      	cmp	r4, r9
 2ac:	db47      	blt.n	33e <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xfc>
        miGfxSpriteX1 = 0;
 2ae:	f04f 0900 	mov.w	r9, #0
 2b2:	f8a5 900c 	strh.w	r9, [r5, #12]
        miGfxSpriteY1 = 0;
 2b6:	f8a5 900e 	strh.w	r9, [r5, #14]
        miGfxSpriteX2 = mpcSprite->miGfxWidth - 1;
 2ba:	f8b6 9004 	ldrh.w	r9, [r6, #4]
 2be:	f109 39ff 	add.w	r9, r9, #4294967295
 2c2:	f8a5 9010 	strh.w	r9, [r5, #16]
        miGfxSpriteY2 = mpcSprite->miGfxHeight - 1;
 2c6:	88f6      	ldrh	r6, [r6, #6]
 2c8:	3e01      	subs	r6, #1
 2ca:	826e      	strh	r6, [r5, #18]
        if (miGfxDestX1 < mpcScreenDest->miGfxClipPosx1) { miGfxSpriteX1 = mpcScreenDest->miGfxClipPosx1 - miGfxDestX1; miGfxDestX1 = mpcScreenDest->miGfxClipPosx1; }
 2cc:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 2d0:	42b7      	cmp	r7, r6
 2d2:	da05      	bge.n	2e0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x9e>
 2d4:	b2b6      	uxth	r6, r6
 2d6:	1a71      	subs	r1, r6, r1
 2d8:	81a9      	strh	r1, [r5, #12]
 2da:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
 2de:	83a9      	strh	r1, [r5, #28]
        if (miGfxDestY1 < mpcScreenDest->miGfxClipPosy1) { miGfxSpriteY1 = mpcScreenDest->miGfxClipPosy1 - miGfxDestY1; miGfxDestY1 = mpcScreenDest->miGfxClipPosy1; }
 2e0:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
 2e4:	458c      	cmp	ip, r1
 2e6:	da05      	bge.n	2f4 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xb2>
 2e8:	b289      	uxth	r1, r1
 2ea:	1a8a      	subs	r2, r1, r2
 2ec:	81ea      	strh	r2, [r5, #14]
 2ee:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
 2f2:	83ea      	strh	r2, [r5, #30]
        if (miGfxDestX2 > mpcScreenDest->miGfxClipPosx2) miGfxSpriteX2 = miGfxSpriteX1 + mpcScreenDest->miGfxClipPosx2 - miGfxDestX1;
 2f4:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 2f8:	4293      	cmp	r3, r2
 2fa:	dd06      	ble.n	30a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xc8>
 2fc:	89ab      	ldrh	r3, [r5, #12]
 2fe:	fa13 f382 	uxtah	r3, r3, r2
 302:	b29b      	uxth	r3, r3
 304:	8baa      	ldrh	r2, [r5, #28]
 306:	1a9b      	subs	r3, r3, r2
 308:	822b      	strh	r3, [r5, #16]
        if (miGfxDestY2 > mpcScreenDest->miGfxClipPosy2) miGfxSpriteY2 = miGfxSpriteY1 + mpcScreenDest->miGfxClipPosy2 - miGfxDestY1;
 30a:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 30e:	429c      	cmp	r4, r3
 310:	dd09      	ble.n	326 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xe4>
 312:	89ea      	ldrh	r2, [r5, #14]
 314:	fa12 f383 	uxtah	r3, r2, r3
 318:	b29b      	uxth	r3, r3
 31a:	8bea      	ldrh	r2, [r5, #30]
 31c:	1a9b      	subs	r3, r3, r2
 31e:	826b      	strh	r3, [r5, #18]
 320:	e001      	b.n	326 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xe4>
      return False;
 322:	f04f 0e00 	mov.w	lr, #0
 326:	f1be 0f00 	cmp.w	lr, #0
 32a:	d10b      	bne.n	344 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x102>
  }
 32c:	2000      	movs	r0, #0
 32e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 332:	f04f 0e00 	mov.w	lr, #0
 336:	e7f6      	b.n	326 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xe4>
 338:	f04f 0e00 	mov.w	lr, #0
 33c:	e7f3      	b.n	326 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xe4>
 33e:	f04f 0e00 	mov.w	lr, #0
 342:	e7f0      	b.n	326 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xe4>
    mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 344:	6982      	ldr	r2, [r0, #24]
 346:	7813      	ldrb	r3, [r2, #0]
 348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 34c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 350:	7813      	ldrb	r3, [r2, #0]
 352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 356:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    vGoPxlRle(miGfxSpriteX1 + (miGfxSpriteY1 * mpcSprite->miGfxWidth));
 35a:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
 35e:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
 362:	68c3      	ldr	r3, [r0, #12]
 364:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 368:	fb03 4305 	mla	r3, r3, r5, r4
    while (muixPxlCnt > 0)
 36c:	b1ab      	cbz	r3, 39a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x158>
      if (mui8SpriteRleCnt > muixPxlCnt)
 36e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 372:	4293      	cmp	r3, r2
 374:	d30e      	bcc.n	394 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x152>
        muixPxlCnt -= mui8SpriteRleCnt;
 376:	1a9b      	subs	r3, r3, r2
        mpui8Sprite++;
 378:	6982      	ldr	r2, [r0, #24]
 37a:	1c51      	adds	r1, r2, #1
 37c:	6181      	str	r1, [r0, #24]
        mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 37e:	7851      	ldrb	r1, [r2, #1]
 380:	f001 0180 	and.w	r1, r1, #128	; 0x80
 384:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
        mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 388:	7852      	ldrb	r2, [r2, #1]
 38a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 38e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 392:	e7eb      	b.n	36c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x12a>
        mui8SpriteRleCnt -= muixPxlCnt;
 394:	1ad3      	subs	r3, r2, r3
 396:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    luixBytePosDest = (GfxImgSize)(miGfxDestY1 * mpcScreenDest->mpcBm->miGfxWidth + miGfxDestX1);
 39a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 39e:	69c2      	ldr	r2, [r0, #28]
 3a0:	6951      	ldr	r1, [r2, #20]
 3a2:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 3a6:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
 3aa:	fb06 2203 	mla	r2, r6, r3, r2
    mpui8Dest = mpcScreenDest->mpcBm->mpui8Data + BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(luixBytePosDest);
 3ae:	680b      	ldr	r3, [r1, #0]
 3b0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 3b4:	6283      	str	r3, [r0, #40]	; 0x28
    muixYCnt = (miGfxSpriteY2 - miGfxSpriteY1) + 1;
 3b6:	8ac2      	ldrh	r2, [r0, #22]
 3b8:	b2ad      	uxth	r5, r5
 3ba:	1b52      	subs	r2, r2, r5
 3bc:	b292      	uxth	r2, r2
 3be:	3201      	adds	r2, #1
 3c0:	8582      	strh	r2, [r0, #44]	; 0x2c
    muixXCnt = (miGfxSpriteX2 - miGfxSpriteX1) + 1;
 3c2:	8a83      	ldrh	r3, [r0, #20]
 3c4:	b2a4      	uxth	r4, r4
 3c6:	1b1b      	subs	r3, r3, r4
 3c8:	b29b      	uxth	r3, r3
 3ca:	3301      	adds	r3, #1
 3cc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 3ce:	e050      	b.n	472 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x230>
            *lpui16Dest = 0;
 3d0:	2300      	movs	r3, #0
 3d2:	800b      	strh	r3, [r1, #0]
 3d4:	e009      	b.n	3ea <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x1a8>
          luixXCnt--;
 3d6:	3a01      	subs	r2, #1
 3d8:	b212      	sxth	r2, r2
        while (luixXCnt > 0)
 3da:	2a00      	cmp	r2, #0
 3dc:	dd1c      	ble.n	418 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x1d6>
          if (mui8SpriteRleValue)
 3de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 3e2:	2b00      	cmp	r3, #0
 3e4:	d0f4      	beq.n	3d0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x18e>
            *lpui16Dest = mui32Col;
 3e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 3e8:	800b      	strh	r3, [r1, #0]
          lpui16Dest++;
 3ea:	3102      	adds	r1, #2
          mui8SpriteRleCnt--;
 3ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 3f0:	3b01      	subs	r3, #1
 3f2:	b2db      	uxtb	r3, r3
 3f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
          if (mui8SpriteRleCnt == 0)
 3f8:	2b00      	cmp	r3, #0
 3fa:	d1ec      	bne.n	3d6 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x194>
            mpui8Sprite++;
 3fc:	6983      	ldr	r3, [r0, #24]
 3fe:	1c5c      	adds	r4, r3, #1
 400:	6184      	str	r4, [r0, #24]
            mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 402:	785c      	ldrb	r4, [r3, #1]
 404:	f004 0480 	and.w	r4, r4, #128	; 0x80
 408:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
            mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 40c:	785b      	ldrb	r3, [r3, #1]
 40e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 412:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 416:	e7de      	b.n	3d6 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x194>
        vGoPxlRle(miGfxSpriteX1 + (mpcSprite->miGfxWidth - (miGfxSpriteX2 + 1)));
 418:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 41c:	68c2      	ldr	r2, [r0, #12]
 41e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 422:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 426:	3101      	adds	r1, #1
 428:	1a52      	subs	r2, r2, r1
 42a:	4413      	add	r3, r2
    while (muixPxlCnt > 0)
 42c:	b1ab      	cbz	r3, 45a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x218>
      if (mui8SpriteRleCnt > muixPxlCnt)
 42e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 432:	4293      	cmp	r3, r2
 434:	d30e      	bcc.n	454 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x212>
        muixPxlCnt -= mui8SpriteRleCnt;
 436:	1a9b      	subs	r3, r3, r2
        mpui8Sprite++;
 438:	6982      	ldr	r2, [r0, #24]
 43a:	1c51      	adds	r1, r2, #1
 43c:	6181      	str	r1, [r0, #24]
        mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 43e:	7851      	ldrb	r1, [r2, #1]
 440:	f001 0180 	and.w	r1, r1, #128	; 0x80
 444:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
        mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 448:	7852      	ldrb	r2, [r2, #1]
 44a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 44e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 452:	e7eb      	b.n	42c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x1ea>
        mui8SpriteRleCnt -= muixPxlCnt;
 454:	1ad3      	subs	r3, r2, r3
 456:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        mpui8Dest += BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(mpcScreenDest->mpcBm->miGfxWidth);
 45a:	69c3      	ldr	r3, [r0, #28]
 45c:	695b      	ldr	r3, [r3, #20]
 45e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 462:	6a83      	ldr	r3, [r0, #40]	; 0x28
 464:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 468:	6283      	str	r3, [r0, #40]	; 0x28
        muixYCnt--;
 46a:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 46e:	3b01      	subs	r3, #1
 470:	8583      	strh	r3, [r0, #44]	; 0x2c
      while (muixYCnt > 0)
 472:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 476:	2b00      	cmp	r3, #0
 478:	f77f af58 	ble.w	32c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0xea>
        luixXCnt   = muixXCnt;
 47c:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
        lpui16Dest = (uint16*)mpui8Dest;
 480:	6a81      	ldr	r1, [r0, #40]	; 0x28
 482:	e7aa      	b.n	3da <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitCpyRle(short, short)+0x198>

Disassembly of section .text._ZN40cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B11i8BitXorRleEss:

00000000 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)>:
   0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4:	1f03      	subs	r3, r0, #4
   6:	69dd      	ldr	r5, [r3, #28]
   8:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
   c:	4421      	add	r1, r4
   e:	b289      	uxth	r1, r1
  10:	b20f      	sxth	r7, r1
  12:	f9b5 4006 	ldrsh.w	r4, [r5, #6]
  16:	4422      	add	r2, r4
  18:	b292      	uxth	r2, r2
  1a:	fa0f fc82 	sxth.w	ip, r2
  1e:	8387      	strh	r7, [r0, #28]
  20:	f8a0 c01e 	strh.w	ip, [r0, #30]
  24:	6886      	ldr	r6, [r0, #8]
  26:	88b4      	ldrh	r4, [r6, #4]
  28:	440c      	add	r4, r1
  2a:	b2a4      	uxth	r4, r4
  2c:	3c01      	subs	r4, #1
  2e:	b224      	sxth	r4, r4
  30:	8404      	strh	r4, [r0, #32]
  32:	88f5      	ldrh	r5, [r6, #6]
  34:	4415      	add	r5, r2
  36:	b2ad      	uxth	r5, r5
  38:	3d01      	subs	r5, #1
  3a:	b22d      	sxth	r5, r5
  3c:	8445      	strh	r5, [r0, #34]	; 0x22
  3e:	f8d0 8018 	ldr.w	r8, [r0, #24]
  42:	f898 e010 	ldrb.w	lr, [r8, #16]
  46:	f1be 0f00 	cmp.w	lr, #0
  4a:	d04b      	beq.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xe4>
  4c:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
  50:	454f      	cmp	r7, r9
  52:	dc45      	bgt.n	e0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xe0>
  54:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
  58:	45cc      	cmp	ip, r9
  5a:	dc49      	bgt.n	f0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xf0>
  5c:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
  60:	454c      	cmp	r4, r9
  62:	db48      	blt.n	f6 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xf6>
  64:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
  68:	454d      	cmp	r5, r9
  6a:	db47      	blt.n	fc <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xfc>
  6c:	f04f 0900 	mov.w	r9, #0
  70:	f8a0 900c 	strh.w	r9, [r0, #12]
  74:	f8a0 900e 	strh.w	r9, [r0, #14]
  78:	f8b6 9004 	ldrh.w	r9, [r6, #4]
  7c:	f109 39ff 	add.w	r9, r9, #4294967295
  80:	f8a0 9010 	strh.w	r9, [r0, #16]
  84:	88f6      	ldrh	r6, [r6, #6]
  86:	3e01      	subs	r6, #1
  88:	8246      	strh	r6, [r0, #18]
  8a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
  8e:	42b7      	cmp	r7, r6
  90:	da05      	bge.n	9e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x9e>
  92:	b2b6      	uxth	r6, r6
  94:	1a71      	subs	r1, r6, r1
  96:	8181      	strh	r1, [r0, #12]
  98:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
  9c:	8381      	strh	r1, [r0, #28]
  9e:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
  a2:	458c      	cmp	ip, r1
  a4:	da05      	bge.n	b2 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xb2>
  a6:	b289      	uxth	r1, r1
  a8:	1a8a      	subs	r2, r1, r2
  aa:	81c2      	strh	r2, [r0, #14]
  ac:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
  b0:	83c2      	strh	r2, [r0, #30]
  b2:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
  b6:	4294      	cmp	r4, r2
  b8:	dd06      	ble.n	c8 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xc8>
  ba:	8981      	ldrh	r1, [r0, #12]
  bc:	fa11 f282 	uxtah	r2, r1, r2
  c0:	b292      	uxth	r2, r2
  c2:	8b81      	ldrh	r1, [r0, #28]
  c4:	1a52      	subs	r2, r2, r1
  c6:	8202      	strh	r2, [r0, #16]
  c8:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
  cc:	4295      	cmp	r5, r2
  ce:	dd09      	ble.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xe4>
  d0:	89c1      	ldrh	r1, [r0, #14]
  d2:	fa11 f282 	uxtah	r2, r1, r2
  d6:	b292      	uxth	r2, r2
  d8:	8bc1      	ldrh	r1, [r0, #30]
  da:	1a52      	subs	r2, r2, r1
  dc:	8242      	strh	r2, [r0, #18]
  de:	e001      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xe4>
  e0:	f04f 0e00 	mov.w	lr, #0
  e4:	f1be 0f00 	cmp.w	lr, #0
  e8:	d10b      	bne.n	102 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x102>
  ea:	2000      	movs	r0, #0
  ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  f0:	f04f 0e00 	mov.w	lr, #0
  f4:	e7f6      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xe4>
  f6:	f04f 0e00 	mov.w	lr, #0
  fa:	e7f3      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xe4>
  fc:	f04f 0e00 	mov.w	lr, #0
 100:	e7f0      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xe4>
 102:	6999      	ldr	r1, [r3, #24]
 104:	780a      	ldrb	r2, [r1, #0]
 106:	f002 0280 	and.w	r2, r2, #128	; 0x80
 10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 10e:	780a      	ldrb	r2, [r1, #0]
 110:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 118:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 11c:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 120:	68da      	ldr	r2, [r3, #12]
 122:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 126:	fb02 4205 	mla	r2, r2, r5, r4
 12a:	b1aa      	cbz	r2, 158 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x158>
 12c:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 130:	428a      	cmp	r2, r1
 132:	d30e      	bcc.n	152 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x152>
 134:	1a52      	subs	r2, r2, r1
 136:	6999      	ldr	r1, [r3, #24]
 138:	1c48      	adds	r0, r1, #1
 13a:	6198      	str	r0, [r3, #24]
 13c:	7848      	ldrb	r0, [r1, #1]
 13e:	f000 0080 	and.w	r0, r0, #128	; 0x80
 142:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
 146:	7849      	ldrb	r1, [r1, #1]
 148:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 14c:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 150:	e7eb      	b.n	12a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x12a>
 152:	1a8a      	subs	r2, r1, r2
 154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 158:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 15c:	69d9      	ldr	r1, [r3, #28]
 15e:	6948      	ldr	r0, [r1, #20]
 160:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 164:	f9b3 1020 	ldrsh.w	r1, [r3, #32]
 168:	fb06 1102 	mla	r1, r6, r2, r1
 16c:	6802      	ldr	r2, [r0, #0]
 16e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 172:	629a      	str	r2, [r3, #40]	; 0x28
 174:	8ad9      	ldrh	r1, [r3, #22]
 176:	b2ad      	uxth	r5, r5
 178:	1b49      	subs	r1, r1, r5
 17a:	b289      	uxth	r1, r1
 17c:	3101      	adds	r1, #1
 17e:	8599      	strh	r1, [r3, #44]	; 0x2c
 180:	8a9a      	ldrh	r2, [r3, #20]
 182:	b2a4      	uxth	r4, r4
 184:	1b12      	subs	r2, r2, r4
 186:	b292      	uxth	r2, r2
 188:	3201      	adds	r2, #1
 18a:	85da      	strh	r2, [r3, #46]	; 0x2e
 18c:	e052      	b.n	234 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x234>
 18e:	2200      	movs	r2, #0
 190:	8002      	strh	r2, [r0, #0]
 192:	e00b      	b.n	1ac <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x1ac>
 194:	3901      	subs	r1, #1
 196:	b209      	sxth	r1, r1
 198:	2900      	cmp	r1, #0
 19a:	dd1e      	ble.n	1da <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x1da>
 19c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 1a0:	2a00      	cmp	r2, #0
 1a2:	d0f4      	beq.n	18e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x18e>
 1a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 1a6:	8804      	ldrh	r4, [r0, #0]
 1a8:	4062      	eors	r2, r4
 1aa:	8002      	strh	r2, [r0, #0]
 1ac:	3002      	adds	r0, #2
 1ae:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 1b2:	3a01      	subs	r2, #1
 1b4:	b2d2      	uxtb	r2, r2
 1b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 1ba:	2a00      	cmp	r2, #0
 1bc:	d1ea      	bne.n	194 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x194>
 1be:	699a      	ldr	r2, [r3, #24]
 1c0:	1c54      	adds	r4, r2, #1
 1c2:	619c      	str	r4, [r3, #24]
 1c4:	7854      	ldrb	r4, [r2, #1]
 1c6:	f004 0480 	and.w	r4, r4, #128	; 0x80
 1ca:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
 1ce:	7852      	ldrb	r2, [r2, #1]
 1d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 1d8:	e7dc      	b.n	194 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x194>
 1da:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 1de:	68d9      	ldr	r1, [r3, #12]
 1e0:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 1e4:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 1e8:	3001      	adds	r0, #1
 1ea:	1a09      	subs	r1, r1, r0
 1ec:	440a      	add	r2, r1
 1ee:	b1aa      	cbz	r2, 21c <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x21c>
 1f0:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 1f4:	428a      	cmp	r2, r1
 1f6:	d30e      	bcc.n	216 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x216>
 1f8:	1a52      	subs	r2, r2, r1
 1fa:	6999      	ldr	r1, [r3, #24]
 1fc:	1c48      	adds	r0, r1, #1
 1fe:	6198      	str	r0, [r3, #24]
 200:	7848      	ldrb	r0, [r1, #1]
 202:	f000 0080 	and.w	r0, r0, #128	; 0x80
 206:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
 20a:	7849      	ldrb	r1, [r1, #1]
 20c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 210:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 214:	e7eb      	b.n	1ee <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x1ee>
 216:	1a8a      	subs	r2, r1, r2
 218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 21c:	69da      	ldr	r2, [r3, #28]
 21e:	6952      	ldr	r2, [r2, #20]
 220:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 226:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 22a:	629a      	str	r2, [r3, #40]	; 0x28
 22c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 230:	3a01      	subs	r2, #1
 232:	859a      	strh	r2, [r3, #44]	; 0x2c
 234:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 238:	2a00      	cmp	r2, #0
 23a:	f77f af56 	ble.w	ea <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xea>
 23e:	f9b3 102e 	ldrsh.w	r1, [r3, #46]	; 0x2e
 242:	6a98      	ldr	r0, [r3, #40]	; 0x28
 244:	e7a8      	b.n	198 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x198>

00000246 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)>:
  FRet i8BitXorRle(GfxInt lixDestX, GfxInt lixDestY)
 246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mpcScreenDest->vRel2Abs(lixDestX, lixDestY);
 24a:	69c4      	ldr	r4, [r0, #28]
  SCREEN_INLINE void vRel2AbsX(GfxInt &liGfxX) { liGfxX += miGfxRefPosx1; }
 24c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 250:	4419      	add	r1, r3
 252:	b289      	uxth	r1, r1
 254:	b20f      	sxth	r7, r1
  SCREEN_INLINE void vRel2AbsY(GfxInt &liGfxY) { liGfxY += miGfxRefPosy1; }
 256:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 25a:	441a      	add	r2, r3
 25c:	b292      	uxth	r2, r2
 25e:	fa0f fc82 	sxth.w	ip, r2
    if (bClip(lixDestX, lixDestY))
 262:	1d05      	adds	r5, r0, #4
      miGfxDestX1 = liGfxDestX1;
 264:	83af      	strh	r7, [r5, #28]
      miGfxDestY1 = liGfxDestY1;
 266:	f8a5 c01e 	strh.w	ip, [r5, #30]
      miGfxDestX2 = miGfxDestX1 + mpcSprite->miGfxWidth - 1;
 26a:	68ae      	ldr	r6, [r5, #8]
 26c:	88b3      	ldrh	r3, [r6, #4]
 26e:	440b      	add	r3, r1
 270:	b29b      	uxth	r3, r3
 272:	3b01      	subs	r3, #1
 274:	b21b      	sxth	r3, r3
 276:	842b      	strh	r3, [r5, #32]
      miGfxDestY2 = miGfxDestY1 + mpcSprite->miGfxHeight - 1;
 278:	88f4      	ldrh	r4, [r6, #6]
 27a:	4414      	add	r4, r2
 27c:	b2a4      	uxth	r4, r4
 27e:	3c01      	subs	r4, #1
 280:	b224      	sxth	r4, r4
 282:	846c      	strh	r4, [r5, #34]	; 0x22
      if (mpcScreenDest->isInAbs(miGfxDestX1, miGfxDestY1, miGfxDestX2, miGfxDestY2))
 284:	f8d5 8018 	ldr.w	r8, [r5, #24]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
 288:	f898 e010 	ldrb.w	lr, [r8, #16]
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 28c:	f1be 0f00 	cmp.w	lr, #0
 290:	d04b      	beq.n	32a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xe4>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 292:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
 296:	454f      	cmp	r7, r9
 298:	dc45      	bgt.n	326 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xe0>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 29a:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
 29e:	45cc      	cmp	ip, r9
 2a0:	dc49      	bgt.n	336 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xf0>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 2a2:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 2a6:	454b      	cmp	r3, r9
 2a8:	db48      	blt.n	33c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xf6>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 2aa:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
 2ae:	454c      	cmp	r4, r9
 2b0:	db47      	blt.n	342 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xfc>
        miGfxSpriteX1 = 0;
 2b2:	f04f 0900 	mov.w	r9, #0
 2b6:	f8a5 900c 	strh.w	r9, [r5, #12]
        miGfxSpriteY1 = 0;
 2ba:	f8a5 900e 	strh.w	r9, [r5, #14]
        miGfxSpriteX2 = mpcSprite->miGfxWidth - 1;
 2be:	f8b6 9004 	ldrh.w	r9, [r6, #4]
 2c2:	f109 39ff 	add.w	r9, r9, #4294967295
 2c6:	f8a5 9010 	strh.w	r9, [r5, #16]
        miGfxSpriteY2 = mpcSprite->miGfxHeight - 1;
 2ca:	88f6      	ldrh	r6, [r6, #6]
 2cc:	3e01      	subs	r6, #1
 2ce:	826e      	strh	r6, [r5, #18]
        if (miGfxDestX1 < mpcScreenDest->miGfxClipPosx1) { miGfxSpriteX1 = mpcScreenDest->miGfxClipPosx1 - miGfxDestX1; miGfxDestX1 = mpcScreenDest->miGfxClipPosx1; }
 2d0:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 2d4:	42b7      	cmp	r7, r6
 2d6:	da05      	bge.n	2e4 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x9e>
 2d8:	b2b6      	uxth	r6, r6
 2da:	1a71      	subs	r1, r6, r1
 2dc:	81a9      	strh	r1, [r5, #12]
 2de:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
 2e2:	83a9      	strh	r1, [r5, #28]
        if (miGfxDestY1 < mpcScreenDest->miGfxClipPosy1) { miGfxSpriteY1 = mpcScreenDest->miGfxClipPosy1 - miGfxDestY1; miGfxDestY1 = mpcScreenDest->miGfxClipPosy1; }
 2e4:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
 2e8:	458c      	cmp	ip, r1
 2ea:	da05      	bge.n	2f8 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xb2>
 2ec:	b289      	uxth	r1, r1
 2ee:	1a8a      	subs	r2, r1, r2
 2f0:	81ea      	strh	r2, [r5, #14]
 2f2:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
 2f6:	83ea      	strh	r2, [r5, #30]
        if (miGfxDestX2 > mpcScreenDest->miGfxClipPosx2) miGfxSpriteX2 = miGfxSpriteX1 + mpcScreenDest->miGfxClipPosx2 - miGfxDestX1;
 2f8:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 2fc:	4293      	cmp	r3, r2
 2fe:	dd06      	ble.n	30e <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xc8>
 300:	89ab      	ldrh	r3, [r5, #12]
 302:	fa13 f382 	uxtah	r3, r3, r2
 306:	b29b      	uxth	r3, r3
 308:	8baa      	ldrh	r2, [r5, #28]
 30a:	1a9b      	subs	r3, r3, r2
 30c:	822b      	strh	r3, [r5, #16]
        if (miGfxDestY2 > mpcScreenDest->miGfxClipPosy2) miGfxSpriteY2 = miGfxSpriteY1 + mpcScreenDest->miGfxClipPosy2 - miGfxDestY1;
 30e:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 312:	429c      	cmp	r4, r3
 314:	dd09      	ble.n	32a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xe4>
 316:	89ea      	ldrh	r2, [r5, #14]
 318:	fa12 f383 	uxtah	r3, r2, r3
 31c:	b29b      	uxth	r3, r3
 31e:	8bea      	ldrh	r2, [r5, #30]
 320:	1a9b      	subs	r3, r3, r2
 322:	826b      	strh	r3, [r5, #18]
 324:	e001      	b.n	32a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xe4>
      return False;
 326:	f04f 0e00 	mov.w	lr, #0
 32a:	f1be 0f00 	cmp.w	lr, #0
 32e:	d10b      	bne.n	348 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x102>
  }
 330:	2000      	movs	r0, #0
 332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 336:	f04f 0e00 	mov.w	lr, #0
 33a:	e7f6      	b.n	32a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xe4>
 33c:	f04f 0e00 	mov.w	lr, #0
 340:	e7f3      	b.n	32a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xe4>
 342:	f04f 0e00 	mov.w	lr, #0
 346:	e7f0      	b.n	32a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xe4>
    mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 348:	6982      	ldr	r2, [r0, #24]
 34a:	7813      	ldrb	r3, [r2, #0]
 34c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 350:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 354:	7813      	ldrb	r3, [r2, #0]
 356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 35a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    vGoPxlRle(miGfxSpriteX1 + (miGfxSpriteY1 * mpcSprite->miGfxWidth));
 35e:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
 362:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
 366:	68c3      	ldr	r3, [r0, #12]
 368:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 36c:	fb03 4305 	mla	r3, r3, r5, r4
    while (muixPxlCnt > 0)
 370:	b1ab      	cbz	r3, 39e <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x158>
      if (mui8SpriteRleCnt > muixPxlCnt)
 372:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 376:	4293      	cmp	r3, r2
 378:	d30e      	bcc.n	398 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x152>
        muixPxlCnt -= mui8SpriteRleCnt;
 37a:	1a9b      	subs	r3, r3, r2
        mpui8Sprite++;
 37c:	6982      	ldr	r2, [r0, #24]
 37e:	1c51      	adds	r1, r2, #1
 380:	6181      	str	r1, [r0, #24]
        mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 382:	7851      	ldrb	r1, [r2, #1]
 384:	f001 0180 	and.w	r1, r1, #128	; 0x80
 388:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
        mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 38c:	7852      	ldrb	r2, [r2, #1]
 38e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 392:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 396:	e7eb      	b.n	370 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x12a>
        mui8SpriteRleCnt -= muixPxlCnt;
 398:	1ad3      	subs	r3, r2, r3
 39a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    luixBytePosDest = (GfxImgSize)(miGfxDestY1 * mpcScreenDest->mpcBm->miGfxWidth + miGfxDestX1);
 39e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 3a2:	69c2      	ldr	r2, [r0, #28]
 3a4:	6951      	ldr	r1, [r2, #20]
 3a6:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 3aa:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
 3ae:	fb06 2203 	mla	r2, r6, r3, r2
    mpui8Dest = mpcScreenDest->mpcBm->mpui8Data + BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(luixBytePosDest);
 3b2:	680b      	ldr	r3, [r1, #0]
 3b4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 3b8:	6283      	str	r3, [r0, #40]	; 0x28
    muixYCnt = (miGfxSpriteY2 - miGfxSpriteY1) + 1;
 3ba:	8ac2      	ldrh	r2, [r0, #22]
 3bc:	b2ad      	uxth	r5, r5
 3be:	1b52      	subs	r2, r2, r5
 3c0:	b292      	uxth	r2, r2
 3c2:	3201      	adds	r2, #1
 3c4:	8582      	strh	r2, [r0, #44]	; 0x2c
    muixXCnt = (miGfxSpriteX2 - miGfxSpriteX1) + 1;
 3c6:	8a83      	ldrh	r3, [r0, #20]
 3c8:	b2a4      	uxth	r4, r4
 3ca:	1b1b      	subs	r3, r3, r4
 3cc:	b29b      	uxth	r3, r3
 3ce:	3301      	adds	r3, #1
 3d0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 3d2:	e052      	b.n	47a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x234>
            *lpui16Dest = 0;
 3d4:	2300      	movs	r3, #0
 3d6:	800b      	strh	r3, [r1, #0]
 3d8:	e00b      	b.n	3f2 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x1ac>
          luixXCnt--;
 3da:	3a01      	subs	r2, #1
 3dc:	b212      	sxth	r2, r2
        while (luixXCnt > 0)
 3de:	2a00      	cmp	r2, #0
 3e0:	dd1e      	ble.n	420 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x1da>
          if (mui8SpriteRleValue)
 3e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 3e6:	2b00      	cmp	r3, #0
 3e8:	d0f4      	beq.n	3d4 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x18e>
            *lpui16Dest ^= mui32Col;
 3ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 3ec:	880c      	ldrh	r4, [r1, #0]
 3ee:	4063      	eors	r3, r4
 3f0:	800b      	strh	r3, [r1, #0]
          lpui16Dest++;
 3f2:	3102      	adds	r1, #2
          mui8SpriteRleCnt--;
 3f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 3f8:	3b01      	subs	r3, #1
 3fa:	b2db      	uxtb	r3, r3
 3fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
          if (mui8SpriteRleCnt == 0)
 400:	2b00      	cmp	r3, #0
 402:	d1ea      	bne.n	3da <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x194>
            mpui8Sprite++;
 404:	6983      	ldr	r3, [r0, #24]
 406:	1c5c      	adds	r4, r3, #1
 408:	6184      	str	r4, [r0, #24]
            mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 40a:	785c      	ldrb	r4, [r3, #1]
 40c:	f004 0480 	and.w	r4, r4, #128	; 0x80
 410:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
            mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 414:	785b      	ldrb	r3, [r3, #1]
 416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 41a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 41e:	e7dc      	b.n	3da <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x194>
        vGoPxlRle(miGfxSpriteX1 + (mpcSprite->miGfxWidth - (miGfxSpriteX2 + 1)));
 420:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 424:	68c2      	ldr	r2, [r0, #12]
 426:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 42a:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 42e:	3101      	adds	r1, #1
 430:	1a52      	subs	r2, r2, r1
 432:	4413      	add	r3, r2
    while (muixPxlCnt > 0)
 434:	b1ab      	cbz	r3, 462 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x21c>
      if (mui8SpriteRleCnt > muixPxlCnt)
 436:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 43a:	4293      	cmp	r3, r2
 43c:	d30e      	bcc.n	45c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x216>
        muixPxlCnt -= mui8SpriteRleCnt;
 43e:	1a9b      	subs	r3, r3, r2
        mpui8Sprite++;
 440:	6982      	ldr	r2, [r0, #24]
 442:	1c51      	adds	r1, r2, #1
 444:	6181      	str	r1, [r0, #24]
        mui8SpriteRleValue = ((*mpui8Sprite) & 128);
 446:	7851      	ldrb	r1, [r2, #1]
 448:	f001 0180 	and.w	r1, r1, #128	; 0x80
 44c:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
        mui8SpriteRleCnt = ((*mpui8Sprite) & 127);
 450:	7852      	ldrb	r2, [r2, #1]
 452:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 456:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 45a:	e7eb      	b.n	434 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x1ee>
        mui8SpriteRleCnt -= muixPxlCnt;
 45c:	1ad3      	subs	r3, r2, r3
 45e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        mpui8Dest += BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(mpcScreenDest->mpcBm->miGfxWidth);
 462:	69c3      	ldr	r3, [r0, #28]
 464:	695b      	ldr	r3, [r3, #20]
 466:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 46a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 46c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 470:	6283      	str	r3, [r0, #40]	; 0x28
        muixYCnt--;
 472:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 476:	3b01      	subs	r3, #1
 478:	8583      	strh	r3, [r0, #44]	; 0x2c
      while (muixYCnt > 0)
 47a:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 47e:	2b00      	cmp	r3, #0
 480:	f77f af56 	ble.w	330 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0xea>
        luixXCnt = muixXCnt;
 484:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
        lpui16Dest = (uint16*)mpui8Dest;
 488:	6a81      	ldr	r1, [r0, #40]	; 0x28
 48a:	e7a8      	b.n	3de <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitXorRle(short, short)+0x198>

Disassembly of section .text._ZN40cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B11i8BitAndRawEss:

00000000 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)>:
   0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4:	1f04      	subs	r4, r0, #4
   6:	69e5      	ldr	r5, [r4, #28]
   8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   c:	4419      	add	r1, r3
   e:	b289      	uxth	r1, r1
  10:	b20f      	sxth	r7, r1
  12:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  16:	441a      	add	r2, r3
  18:	b292      	uxth	r2, r2
  1a:	fa0f fc82 	sxth.w	ip, r2
  1e:	8387      	strh	r7, [r0, #28]
  20:	f8a0 c01e 	strh.w	ip, [r0, #30]
  24:	6886      	ldr	r6, [r0, #8]
  26:	88b3      	ldrh	r3, [r6, #4]
  28:	440b      	add	r3, r1
  2a:	b29b      	uxth	r3, r3
  2c:	3b01      	subs	r3, #1
  2e:	b21b      	sxth	r3, r3
  30:	8403      	strh	r3, [r0, #32]
  32:	88f5      	ldrh	r5, [r6, #6]
  34:	4415      	add	r5, r2
  36:	b2ad      	uxth	r5, r5
  38:	3d01      	subs	r5, #1
  3a:	b22d      	sxth	r5, r5
  3c:	8445      	strh	r5, [r0, #34]	; 0x22
  3e:	f8d0 8018 	ldr.w	r8, [r0, #24]
  42:	f898 e010 	ldrb.w	lr, [r8, #16]
  46:	f1be 0f00 	cmp.w	lr, #0
  4a:	d04b      	beq.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xe4>
  4c:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
  50:	454f      	cmp	r7, r9
  52:	dc45      	bgt.n	e0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xe0>
  54:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
  58:	45cc      	cmp	ip, r9
  5a:	dc49      	bgt.n	f0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xf0>
  5c:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
  60:	454b      	cmp	r3, r9
  62:	db48      	blt.n	f6 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xf6>
  64:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
  68:	454d      	cmp	r5, r9
  6a:	db47      	blt.n	fc <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xfc>
  6c:	f04f 0900 	mov.w	r9, #0
  70:	f8a0 900c 	strh.w	r9, [r0, #12]
  74:	f8a0 900e 	strh.w	r9, [r0, #14]
  78:	f8b6 9004 	ldrh.w	r9, [r6, #4]
  7c:	f109 39ff 	add.w	r9, r9, #4294967295
  80:	f8a0 9010 	strh.w	r9, [r0, #16]
  84:	88f6      	ldrh	r6, [r6, #6]
  86:	3e01      	subs	r6, #1
  88:	8246      	strh	r6, [r0, #18]
  8a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
  8e:	42b7      	cmp	r7, r6
  90:	da05      	bge.n	9e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x9e>
  92:	b2b6      	uxth	r6, r6
  94:	1a71      	subs	r1, r6, r1
  96:	8181      	strh	r1, [r0, #12]
  98:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
  9c:	8381      	strh	r1, [r0, #28]
  9e:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
  a2:	458c      	cmp	ip, r1
  a4:	da05      	bge.n	b2 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xb2>
  a6:	b289      	uxth	r1, r1
  a8:	1a8a      	subs	r2, r1, r2
  aa:	81c2      	strh	r2, [r0, #14]
  ac:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
  b0:	83c2      	strh	r2, [r0, #30]
  b2:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
  b6:	4293      	cmp	r3, r2
  b8:	dd06      	ble.n	c8 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xc8>
  ba:	8983      	ldrh	r3, [r0, #12]
  bc:	fa13 f382 	uxtah	r3, r3, r2
  c0:	b29b      	uxth	r3, r3
  c2:	8b82      	ldrh	r2, [r0, #28]
  c4:	1a9b      	subs	r3, r3, r2
  c6:	8203      	strh	r3, [r0, #16]
  c8:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  cc:	429d      	cmp	r5, r3
  ce:	dd09      	ble.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xe4>
  d0:	89c2      	ldrh	r2, [r0, #14]
  d2:	fa12 f383 	uxtah	r3, r2, r3
  d6:	b29b      	uxth	r3, r3
  d8:	8bc2      	ldrh	r2, [r0, #30]
  da:	1a9b      	subs	r3, r3, r2
  dc:	8243      	strh	r3, [r0, #18]
  de:	e001      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xe4>
  e0:	f04f 0e00 	mov.w	lr, #0
  e4:	f1be 0f00 	cmp.w	lr, #0
  e8:	d10b      	bne.n	102 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x102>
  ea:	2000      	movs	r0, #0
  ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  f0:	f04f 0e00 	mov.w	lr, #0
  f4:	e7f6      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xe4>
  f6:	f04f 0e00 	mov.w	lr, #0
  fa:	e7f3      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xe4>
  fc:	f04f 0e00 	mov.w	lr, #0
 100:	e7f0      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xe4>
 102:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 106:	68e2      	ldr	r2, [r4, #12]
 108:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 10c:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 110:	fb01 0103 	mla	r1, r1, r3, r0
 114:	6361      	str	r1, [r4, #52]	; 0x34
 116:	6812      	ldr	r2, [r2, #0]
 118:	eb02 02d1 	add.w	r2, r2, r1, lsr #3
 11c:	61a2      	str	r2, [r4, #24]
 11e:	f001 0107 	and.w	r1, r1, #7
 122:	63a1      	str	r1, [r4, #56]	; 0x38
 124:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 128:	69e1      	ldr	r1, [r4, #28]
 12a:	694d      	ldr	r5, [r1, #20]
 12c:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 130:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 134:	fb06 1102 	mla	r1, r6, r2, r1
 138:	682a      	ldr	r2, [r5, #0]
 13a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 13e:	62a2      	str	r2, [r4, #40]	; 0x28
 140:	8ae2      	ldrh	r2, [r4, #22]
 142:	b29b      	uxth	r3, r3
 144:	1ad2      	subs	r2, r2, r3
 146:	b292      	uxth	r2, r2
 148:	3201      	adds	r2, #1
 14a:	85a2      	strh	r2, [r4, #44]	; 0x2c
 14c:	8aa3      	ldrh	r3, [r4, #20]
 14e:	b280      	uxth	r0, r0
 150:	1a1b      	subs	r3, r3, r0
 152:	b29b      	uxth	r3, r3
 154:	3301      	adds	r3, #1
 156:	85e3      	strh	r3, [r4, #46]	; 0x2e
 158:	e029      	b.n	1ae <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x1ae>
 15a:	2000      	movs	r0, #0
 15c:	8010      	strh	r0, [r2, #0]
 15e:	2b01      	cmp	r3, #1
 160:	d90a      	bls.n	178 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x178>
 162:	085b      	lsrs	r3, r3, #1
 164:	3202      	adds	r2, #2
 166:	3901      	subs	r1, #1
 168:	b149      	cbz	r1, 17e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x17e>
 16a:	7828      	ldrb	r0, [r5, #0]
 16c:	4218      	tst	r0, r3
 16e:	d0f4      	beq.n	15a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x15a>
 170:	8810      	ldrh	r0, [r2, #0]
 172:	4030      	ands	r0, r6
 174:	8010      	strh	r0, [r2, #0]
 176:	e7f2      	b.n	15e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x15e>
 178:	3501      	adds	r5, #1
 17a:	2380      	movs	r3, #128	; 0x80
 17c:	e7f2      	b.n	164 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x164>
 17e:	68e3      	ldr	r3, [r4, #12]
 180:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 184:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 186:	4413      	add	r3, r2
 188:	69a2      	ldr	r2, [r4, #24]
 18a:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 18e:	61a2      	str	r2, [r4, #24]
 190:	f003 0307 	and.w	r3, r3, #7
 194:	63a3      	str	r3, [r4, #56]	; 0x38
 196:	69e3      	ldr	r3, [r4, #28]
 198:	695b      	ldr	r3, [r3, #20]
 19a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 19e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1a0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 1a4:	62a3      	str	r3, [r4, #40]	; 0x28
 1a6:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 1aa:	3b01      	subs	r3, #1
 1ac:	85a3      	strh	r3, [r4, #44]	; 0x2c
 1ae:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 1b2:	2b00      	cmp	r3, #0
 1b4:	dd99      	ble.n	ea <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xea>
 1b6:	69a5      	ldr	r5, [r4, #24]
 1b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 1ba:	8e26      	ldrh	r6, [r4, #48]	; 0x30
 1bc:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 1c0:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 1c4:	2380      	movs	r3, #128	; 0x80
 1c6:	4103      	asrs	r3, r0
 1c8:	b2db      	uxtb	r3, r3
 1ca:	e7cd      	b.n	168 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x168>

000001cc <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)>:
  FRet i8BitAndRaw(GfxInt lixDestX, GfxInt lixDestY)
 1cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mpcScreenDest->vRel2Abs(lixDestX, lixDestY);
 1d0:	69c4      	ldr	r4, [r0, #28]
  SCREEN_INLINE void vRel2AbsX(GfxInt &liGfxX) { liGfxX += miGfxRefPosx1; }
 1d2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 1d6:	4419      	add	r1, r3
 1d8:	b289      	uxth	r1, r1
 1da:	b20f      	sxth	r7, r1
  SCREEN_INLINE void vRel2AbsY(GfxInt &liGfxY) { liGfxY += miGfxRefPosy1; }
 1dc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 1e0:	441a      	add	r2, r3
 1e2:	b292      	uxth	r2, r2
 1e4:	fa0f fc82 	sxth.w	ip, r2
    if (bClip(lixDestX, lixDestY))
 1e8:	1d05      	adds	r5, r0, #4
      miGfxDestX1 = liGfxDestX1;
 1ea:	83af      	strh	r7, [r5, #28]
      miGfxDestY1 = liGfxDestY1;
 1ec:	f8a5 c01e 	strh.w	ip, [r5, #30]
      miGfxDestX2 = miGfxDestX1 + mpcSprite->miGfxWidth - 1;
 1f0:	68ae      	ldr	r6, [r5, #8]
 1f2:	88b3      	ldrh	r3, [r6, #4]
 1f4:	440b      	add	r3, r1
 1f6:	b29b      	uxth	r3, r3
 1f8:	3b01      	subs	r3, #1
 1fa:	b21b      	sxth	r3, r3
 1fc:	842b      	strh	r3, [r5, #32]
      miGfxDestY2 = miGfxDestY1 + mpcSprite->miGfxHeight - 1;
 1fe:	88f4      	ldrh	r4, [r6, #6]
 200:	4414      	add	r4, r2
 202:	b2a4      	uxth	r4, r4
 204:	3c01      	subs	r4, #1
 206:	b224      	sxth	r4, r4
 208:	846c      	strh	r4, [r5, #34]	; 0x22
      if (mpcScreenDest->isInAbs(miGfxDestX1, miGfxDestY1, miGfxDestX2, miGfxDestY2))
 20a:	f8d5 8018 	ldr.w	r8, [r5, #24]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
 20e:	f898 e010 	ldrb.w	lr, [r8, #16]
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 212:	f1be 0f00 	cmp.w	lr, #0
 216:	d04b      	beq.n	2b0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xe4>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 218:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
 21c:	454f      	cmp	r7, r9
 21e:	dc45      	bgt.n	2ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xe0>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 220:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
 224:	45cc      	cmp	ip, r9
 226:	dc49      	bgt.n	2bc <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xf0>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 228:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 22c:	454b      	cmp	r3, r9
 22e:	db48      	blt.n	2c2 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xf6>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 230:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
 234:	454c      	cmp	r4, r9
 236:	db47      	blt.n	2c8 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xfc>
        miGfxSpriteX1 = 0;
 238:	f04f 0900 	mov.w	r9, #0
 23c:	f8a5 900c 	strh.w	r9, [r5, #12]
        miGfxSpriteY1 = 0;
 240:	f8a5 900e 	strh.w	r9, [r5, #14]
        miGfxSpriteX2 = mpcSprite->miGfxWidth - 1;
 244:	f8b6 9004 	ldrh.w	r9, [r6, #4]
 248:	f109 39ff 	add.w	r9, r9, #4294967295
 24c:	f8a5 9010 	strh.w	r9, [r5, #16]
        miGfxSpriteY2 = mpcSprite->miGfxHeight - 1;
 250:	88f6      	ldrh	r6, [r6, #6]
 252:	3e01      	subs	r6, #1
 254:	826e      	strh	r6, [r5, #18]
        if (miGfxDestX1 < mpcScreenDest->miGfxClipPosx1) { miGfxSpriteX1 = mpcScreenDest->miGfxClipPosx1 - miGfxDestX1; miGfxDestX1 = mpcScreenDest->miGfxClipPosx1; }
 256:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 25a:	42b7      	cmp	r7, r6
 25c:	da05      	bge.n	26a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x9e>
 25e:	b2b6      	uxth	r6, r6
 260:	1a71      	subs	r1, r6, r1
 262:	81a9      	strh	r1, [r5, #12]
 264:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
 268:	83a9      	strh	r1, [r5, #28]
        if (miGfxDestY1 < mpcScreenDest->miGfxClipPosy1) { miGfxSpriteY1 = mpcScreenDest->miGfxClipPosy1 - miGfxDestY1; miGfxDestY1 = mpcScreenDest->miGfxClipPosy1; }
 26a:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
 26e:	458c      	cmp	ip, r1
 270:	da05      	bge.n	27e <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xb2>
 272:	b289      	uxth	r1, r1
 274:	1a8a      	subs	r2, r1, r2
 276:	81ea      	strh	r2, [r5, #14]
 278:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
 27c:	83ea      	strh	r2, [r5, #30]
        if (miGfxDestX2 > mpcScreenDest->miGfxClipPosx2) miGfxSpriteX2 = miGfxSpriteX1 + mpcScreenDest->miGfxClipPosx2 - miGfxDestX1;
 27e:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 282:	4293      	cmp	r3, r2
 284:	dd06      	ble.n	294 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xc8>
 286:	89ab      	ldrh	r3, [r5, #12]
 288:	fa13 f382 	uxtah	r3, r3, r2
 28c:	b29b      	uxth	r3, r3
 28e:	8baa      	ldrh	r2, [r5, #28]
 290:	1a9b      	subs	r3, r3, r2
 292:	822b      	strh	r3, [r5, #16]
        if (miGfxDestY2 > mpcScreenDest->miGfxClipPosy2) miGfxSpriteY2 = miGfxSpriteY1 + mpcScreenDest->miGfxClipPosy2 - miGfxDestY1;
 294:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 298:	429c      	cmp	r4, r3
 29a:	dd09      	ble.n	2b0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xe4>
 29c:	89ea      	ldrh	r2, [r5, #14]
 29e:	fa12 f383 	uxtah	r3, r2, r3
 2a2:	b29b      	uxth	r3, r3
 2a4:	8bea      	ldrh	r2, [r5, #30]
 2a6:	1a9b      	subs	r3, r3, r2
 2a8:	826b      	strh	r3, [r5, #18]
 2aa:	e001      	b.n	2b0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xe4>
      return False;
 2ac:	f04f 0e00 	mov.w	lr, #0
 2b0:	f1be 0f00 	cmp.w	lr, #0
 2b4:	d10b      	bne.n	2ce <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x102>
  }
 2b6:	2000      	movs	r0, #0
 2b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 2bc:	f04f 0e00 	mov.w	lr, #0
 2c0:	e7f6      	b.n	2b0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xe4>
 2c2:	f04f 0e00 	mov.w	lr, #0
 2c6:	e7f3      	b.n	2b0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xe4>
 2c8:	f04f 0e00 	mov.w	lr, #0
 2cc:	e7f0      	b.n	2b0 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xe4>
    muixBytePosSprite = (GfxImgSize)(miGfxSpriteY1 * mpcSprite->miGfxWidth + miGfxSpriteX1);
 2ce:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 2d2:	68c2      	ldr	r2, [r0, #12]
 2d4:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 2d8:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
 2dc:	fb01 4103 	mla	r1, r1, r3, r4
 2e0:	6341      	str	r1, [r0, #52]	; 0x34
    mpui8Sprite = mpcSprite->mpui8Data + BM_BPP1_1G_PXLIDX2BYTEPOS(muixBytePosSprite);
 2e2:	6812      	ldr	r2, [r2, #0]
 2e4:	eb02 02d1 	add.w	r2, r2, r1, lsr #3
 2e8:	6182      	str	r2, [r0, #24]
    muixBitPosSprite = BM_BPP1_1G_PXLIDX2BITPOS(muixBytePosSprite);
 2ea:	f001 0107 	and.w	r1, r1, #7
 2ee:	6381      	str	r1, [r0, #56]	; 0x38
    luixBytePosDest = (GfxImgSize)(miGfxDestY1 * mpcScreenDest->mpcBm->miGfxWidth + miGfxDestX1);
 2f0:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
 2f4:	69c1      	ldr	r1, [r0, #28]
 2f6:	694d      	ldr	r5, [r1, #20]
 2f8:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 2fc:	f9b0 1020 	ldrsh.w	r1, [r0, #32]
 300:	fb06 1102 	mla	r1, r6, r2, r1
    mpui8Dest = mpcScreenDest->mpcBm->mpui8Data + BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(luixBytePosDest);
 304:	682a      	ldr	r2, [r5, #0]
 306:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 30a:	6282      	str	r2, [r0, #40]	; 0x28
    muixYCnt = (miGfxSpriteY2 - miGfxSpriteY1) + 1;
 30c:	8ac2      	ldrh	r2, [r0, #22]
 30e:	b29b      	uxth	r3, r3
 310:	1ad2      	subs	r2, r2, r3
 312:	b292      	uxth	r2, r2
 314:	3201      	adds	r2, #1
 316:	8582      	strh	r2, [r0, #44]	; 0x2c
    muixXCnt = (miGfxSpriteX2 - miGfxSpriteX1) + 1;
 318:	8a83      	ldrh	r3, [r0, #20]
 31a:	b2a4      	uxth	r4, r4
 31c:	1b1b      	subs	r3, r3, r4
 31e:	b29b      	uxth	r3, r3
 320:	3301      	adds	r3, #1
 322:	85c3      	strh	r3, [r0, #46]	; 0x2e
 324:	e029      	b.n	37a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x1ae>
        *lpui16Dest = 0;
 326:	2400      	movs	r4, #0
 328:	8014      	strh	r4, [r2, #0]
  static inline void  vBitIncPos(u8* &pui8Ptr, u8 &ui8Mask)                                 {if ((ui8Mask) > 1) {ui8Mask >>= 1;} else {ui8Mask = 128; pui8Ptr++;}}
 32a:	2b01      	cmp	r3, #1
 32c:	d90a      	bls.n	344 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x178>
 32e:	085b      	lsrs	r3, r3, #1
      lpui16Dest++;
 330:	3202      	adds	r2, #2
      luixSize--;
 332:	3901      	subs	r1, #1
    while (luixSize > 0)
 334:	b149      	cbz	r1, 34a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x17e>
      if (*lpui8Source & lui8BitMskSource)
 336:	782c      	ldrb	r4, [r5, #0]
 338:	421c      	tst	r4, r3
 33a:	d0f4      	beq.n	326 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x15a>
        *lpui16Dest &= lui16Value;
 33c:	8814      	ldrh	r4, [r2, #0]
 33e:	4034      	ands	r4, r6
 340:	8014      	strh	r4, [r2, #0]
 342:	e7f2      	b.n	32a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x15e>
  static inline void  vBitIncPos(u8* &pui8Ptr, u8 &ui8Mask)                                 {if ((ui8Mask) > 1) {ui8Mask >>= 1;} else {ui8Mask = 128; pui8Ptr++;}}
 344:	3501      	adds	r5, #1
 346:	2380      	movs	r3, #128	; 0x80
 348:	e7f2      	b.n	330 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x164>
    muixBitPosSprite += mpcSprite->miGfxWidth;
 34a:	68c3      	ldr	r3, [r0, #12]
 34c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 350:	6b82      	ldr	r2, [r0, #56]	; 0x38
 352:	4413      	add	r3, r2
    mpui8Sprite += BM_BPP1_1G_PXLIDX2BYTEPOS(muixBitPosSprite);
 354:	6982      	ldr	r2, [r0, #24]
 356:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 35a:	6182      	str	r2, [r0, #24]
    muixBitPosSprite = BM_BPP1_1G_PXLIDX2BITPOS(muixBitPosSprite);
 35c:	f003 0307 	and.w	r3, r3, #7
 360:	6383      	str	r3, [r0, #56]	; 0x38
    mpui8Dest += BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(mpcScreenDest->mpcBm->miGfxWidth);
 362:	69c3      	ldr	r3, [r0, #28]
 364:	695b      	ldr	r3, [r3, #20]
 366:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 36a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 36c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 370:	6283      	str	r3, [r0, #40]	; 0x28
        muixYCnt--;
 372:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 376:	3b01      	subs	r3, #1
 378:	8583      	strh	r3, [r0, #44]	; 0x2c
      while (muixYCnt > 0)
 37a:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 37e:	2b00      	cmp	r3, #0
 380:	dd99      	ble.n	2b6 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0xea>
        cMemTools::vMemBit2u16And(mpui8Sprite, muixBitPosSprite, (uint16*)mpui8Dest, mui32Col, muixXCnt);
 382:	6985      	ldr	r5, [r0, #24]
 384:	6a82      	ldr	r2, [r0, #40]	; 0x28
 386:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 388:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    lui8BitMskSource = 128 >> lui8SrcStartBitPos;
 38c:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 390:	2380      	movs	r3, #128	; 0x80
 392:	4123      	asrs	r3, r4
 394:	b2db      	uxtb	r3, r3
 396:	e7cd      	b.n	334 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitAndRaw(short, short)+0x168>

Disassembly of section .text._ZN40cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B10i8BitOrRawEss:

00000000 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)>:
   0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4:	1f04      	subs	r4, r0, #4
   6:	69e5      	ldr	r5, [r4, #28]
   8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   c:	4419      	add	r1, r3
   e:	b289      	uxth	r1, r1
  10:	b20f      	sxth	r7, r1
  12:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  16:	441a      	add	r2, r3
  18:	b292      	uxth	r2, r2
  1a:	fa0f fc82 	sxth.w	ip, r2
  1e:	8387      	strh	r7, [r0, #28]
  20:	f8a0 c01e 	strh.w	ip, [r0, #30]
  24:	6886      	ldr	r6, [r0, #8]
  26:	88b3      	ldrh	r3, [r6, #4]
  28:	440b      	add	r3, r1
  2a:	b29b      	uxth	r3, r3
  2c:	3b01      	subs	r3, #1
  2e:	b21b      	sxth	r3, r3
  30:	8403      	strh	r3, [r0, #32]
  32:	88f5      	ldrh	r5, [r6, #6]
  34:	4415      	add	r5, r2
  36:	b2ad      	uxth	r5, r5
  38:	3d01      	subs	r5, #1
  3a:	b22d      	sxth	r5, r5
  3c:	8445      	strh	r5, [r0, #34]	; 0x22
  3e:	f8d0 8018 	ldr.w	r8, [r0, #24]
  42:	f898 e010 	ldrb.w	lr, [r8, #16]
  46:	f1be 0f00 	cmp.w	lr, #0
  4a:	d04b      	beq.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xe4>
  4c:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
  50:	454f      	cmp	r7, r9
  52:	dc45      	bgt.n	e0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xe0>
  54:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
  58:	45cc      	cmp	ip, r9
  5a:	dc49      	bgt.n	f0 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xf0>
  5c:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
  60:	454b      	cmp	r3, r9
  62:	db48      	blt.n	f6 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xf6>
  64:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
  68:	454d      	cmp	r5, r9
  6a:	db47      	blt.n	fc <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xfc>
  6c:	f04f 0900 	mov.w	r9, #0
  70:	f8a0 900c 	strh.w	r9, [r0, #12]
  74:	f8a0 900e 	strh.w	r9, [r0, #14]
  78:	f8b6 9004 	ldrh.w	r9, [r6, #4]
  7c:	f109 39ff 	add.w	r9, r9, #4294967295
  80:	f8a0 9010 	strh.w	r9, [r0, #16]
  84:	88f6      	ldrh	r6, [r6, #6]
  86:	3e01      	subs	r6, #1
  88:	8246      	strh	r6, [r0, #18]
  8a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
  8e:	42b7      	cmp	r7, r6
  90:	da05      	bge.n	9e <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x9e>
  92:	b2b6      	uxth	r6, r6
  94:	1a71      	subs	r1, r6, r1
  96:	8181      	strh	r1, [r0, #12]
  98:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
  9c:	8381      	strh	r1, [r0, #28]
  9e:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
  a2:	458c      	cmp	ip, r1
  a4:	da05      	bge.n	b2 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xb2>
  a6:	b289      	uxth	r1, r1
  a8:	1a8a      	subs	r2, r1, r2
  aa:	81c2      	strh	r2, [r0, #14]
  ac:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
  b0:	83c2      	strh	r2, [r0, #30]
  b2:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
  b6:	4293      	cmp	r3, r2
  b8:	dd06      	ble.n	c8 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xc8>
  ba:	8983      	ldrh	r3, [r0, #12]
  bc:	fa13 f382 	uxtah	r3, r3, r2
  c0:	b29b      	uxth	r3, r3
  c2:	8b82      	ldrh	r2, [r0, #28]
  c4:	1a9b      	subs	r3, r3, r2
  c6:	8203      	strh	r3, [r0, #16]
  c8:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  cc:	429d      	cmp	r5, r3
  ce:	dd09      	ble.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xe4>
  d0:	89c2      	ldrh	r2, [r0, #14]
  d2:	fa12 f383 	uxtah	r3, r2, r3
  d6:	b29b      	uxth	r3, r3
  d8:	8bc2      	ldrh	r2, [r0, #30]
  da:	1a9b      	subs	r3, r3, r2
  dc:	8243      	strh	r3, [r0, #18]
  de:	e001      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xe4>
  e0:	f04f 0e00 	mov.w	lr, #0
  e4:	f1be 0f00 	cmp.w	lr, #0
  e8:	d10b      	bne.n	102 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x102>
  ea:	2000      	movs	r0, #0
  ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  f0:	f04f 0e00 	mov.w	lr, #0
  f4:	e7f6      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xe4>
  f6:	f04f 0e00 	mov.w	lr, #0
  fa:	e7f3      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xe4>
  fc:	f04f 0e00 	mov.w	lr, #0
 100:	e7f0      	b.n	e4 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xe4>
 102:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 106:	68e2      	ldr	r2, [r4, #12]
 108:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 10c:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 110:	fb01 0103 	mla	r1, r1, r3, r0
 114:	6361      	str	r1, [r4, #52]	; 0x34
 116:	6812      	ldr	r2, [r2, #0]
 118:	eb02 02d1 	add.w	r2, r2, r1, lsr #3
 11c:	61a2      	str	r2, [r4, #24]
 11e:	f001 0107 	and.w	r1, r1, #7
 122:	63a1      	str	r1, [r4, #56]	; 0x38
 124:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 128:	69e1      	ldr	r1, [r4, #28]
 12a:	694d      	ldr	r5, [r1, #20]
 12c:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 130:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 134:	fb06 1102 	mla	r1, r6, r2, r1
 138:	682a      	ldr	r2, [r5, #0]
 13a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 13e:	62a2      	str	r2, [r4, #40]	; 0x28
 140:	8ae2      	ldrh	r2, [r4, #22]
 142:	b29b      	uxth	r3, r3
 144:	1ad2      	subs	r2, r2, r3
 146:	b292      	uxth	r2, r2
 148:	3201      	adds	r2, #1
 14a:	85a2      	strh	r2, [r4, #44]	; 0x2c
 14c:	8aa3      	ldrh	r3, [r4, #20]
 14e:	b280      	uxth	r0, r0
 150:	1a1b      	subs	r3, r3, r0
 152:	b29b      	uxth	r3, r3
 154:	3301      	adds	r3, #1
 156:	85e3      	strh	r3, [r4, #46]	; 0x2e
 158:	e027      	b.n	1aa <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x1aa>
 15a:	2b01      	cmp	r3, #1
 15c:	d90a      	bls.n	174 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x174>
 15e:	085b      	lsrs	r3, r3, #1
 160:	3102      	adds	r1, #2
 162:	3a01      	subs	r2, #1
 164:	b14a      	cbz	r2, 17a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x17a>
 166:	7828      	ldrb	r0, [r5, #0]
 168:	4218      	tst	r0, r3
 16a:	d0f6      	beq.n	15a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x15a>
 16c:	8808      	ldrh	r0, [r1, #0]
 16e:	4330      	orrs	r0, r6
 170:	8008      	strh	r0, [r1, #0]
 172:	e7f2      	b.n	15a <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x15a>
 174:	3501      	adds	r5, #1
 176:	2380      	movs	r3, #128	; 0x80
 178:	e7f2      	b.n	160 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x160>
 17a:	68e3      	ldr	r3, [r4, #12]
 17c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 180:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 182:	4413      	add	r3, r2
 184:	69a2      	ldr	r2, [r4, #24]
 186:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 18a:	61a2      	str	r2, [r4, #24]
 18c:	f003 0307 	and.w	r3, r3, #7
 190:	63a3      	str	r3, [r4, #56]	; 0x38
 192:	69e3      	ldr	r3, [r4, #28]
 194:	695b      	ldr	r3, [r3, #20]
 196:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 19a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 19c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 1a0:	62a3      	str	r3, [r4, #40]	; 0x28
 1a2:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 1a6:	3b01      	subs	r3, #1
 1a8:	85a3      	strh	r3, [r4, #44]	; 0x2c
 1aa:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 1ae:	2b00      	cmp	r3, #0
 1b0:	dd9b      	ble.n	ea <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xea>
 1b2:	69a5      	ldr	r5, [r4, #24]
 1b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 1b6:	8e26      	ldrh	r6, [r4, #48]	; 0x30
 1b8:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 1bc:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 1c0:	2380      	movs	r3, #128	; 0x80
 1c2:	4103      	asrs	r3, r0
 1c4:	b2db      	uxtb	r3, r3
 1c6:	e7cd      	b.n	164 <non-virtual thunk to cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x164>

000001c8 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)>:
  FRet i8BitOrRaw(GfxInt lixDestX, GfxInt lixDestY)
 1c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mpcScreenDest->vRel2Abs(lixDestX, lixDestY);
 1cc:	69c4      	ldr	r4, [r0, #28]
  SCREEN_INLINE void vRel2AbsX(GfxInt &liGfxX) { liGfxX += miGfxRefPosx1; }
 1ce:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 1d2:	4419      	add	r1, r3
 1d4:	b289      	uxth	r1, r1
 1d6:	b20f      	sxth	r7, r1
  SCREEN_INLINE void vRel2AbsY(GfxInt &liGfxY) { liGfxY += miGfxRefPosy1; }
 1d8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 1dc:	441a      	add	r2, r3
 1de:	b292      	uxth	r2, r2
 1e0:	fa0f fc82 	sxth.w	ip, r2
    if (bClip(lixDestX, lixDestY))
 1e4:	1d05      	adds	r5, r0, #4
      miGfxDestX1 = liGfxDestX1;
 1e6:	83af      	strh	r7, [r5, #28]
      miGfxDestY1 = liGfxDestY1;
 1e8:	f8a5 c01e 	strh.w	ip, [r5, #30]
      miGfxDestX2 = miGfxDestX1 + mpcSprite->miGfxWidth - 1;
 1ec:	68ae      	ldr	r6, [r5, #8]
 1ee:	88b3      	ldrh	r3, [r6, #4]
 1f0:	440b      	add	r3, r1
 1f2:	b29b      	uxth	r3, r3
 1f4:	3b01      	subs	r3, #1
 1f6:	b21b      	sxth	r3, r3
 1f8:	842b      	strh	r3, [r5, #32]
      miGfxDestY2 = miGfxDestY1 + mpcSprite->miGfxHeight - 1;
 1fa:	88f4      	ldrh	r4, [r6, #6]
 1fc:	4414      	add	r4, r2
 1fe:	b2a4      	uxth	r4, r4
 200:	3c01      	subs	r4, #1
 202:	b224      	sxth	r4, r4
 204:	846c      	strh	r4, [r5, #34]	; 0x22
      if (mpcScreenDest->isInAbs(miGfxDestX1, miGfxDestY1, miGfxDestX2, miGfxDestY2))
 206:	f8d5 8018 	ldr.w	r8, [r5, #24]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
 20a:	f898 e010 	ldrb.w	lr, [r8, #16]
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 20e:	f1be 0f00 	cmp.w	lr, #0
 212:	d04b      	beq.n	2ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xe4>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 214:	f9b8 900c 	ldrsh.w	r9, [r8, #12]
                             GfxInt liGfxX2, GfxInt liGfxY2) { return ((mbVisible) &&
 218:	454f      	cmp	r7, r9
 21a:	dc45      	bgt.n	2a8 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xe0>
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 21c:	f9b8 900e 	ldrsh.w	r9, [r8, #14]
 220:	45cc      	cmp	ip, r9
 222:	dc49      	bgt.n	2b8 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xf0>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 224:	f9b8 9008 	ldrsh.w	r9, [r8, #8]
                                                                       (liGfxX1 <= miGfxClipPosx2) && (liGfxY1 <= miGfxClipPosy2) &&
 228:	454b      	cmp	r3, r9
 22a:	db48      	blt.n	2be <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xf6>
                                                                       (liGfxX2 >= miGfxClipPosx1) && (liGfxY2 >= miGfxClipPosy1));}
 22c:	f9b8 900a 	ldrsh.w	r9, [r8, #10]
 230:	454c      	cmp	r4, r9
 232:	db47      	blt.n	2c4 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xfc>
        miGfxSpriteX1 = 0;
 234:	f04f 0900 	mov.w	r9, #0
 238:	f8a5 900c 	strh.w	r9, [r5, #12]
        miGfxSpriteY1 = 0;
 23c:	f8a5 900e 	strh.w	r9, [r5, #14]
        miGfxSpriteX2 = mpcSprite->miGfxWidth - 1;
 240:	f8b6 9004 	ldrh.w	r9, [r6, #4]
 244:	f109 39ff 	add.w	r9, r9, #4294967295
 248:	f8a5 9010 	strh.w	r9, [r5, #16]
        miGfxSpriteY2 = mpcSprite->miGfxHeight - 1;
 24c:	88f6      	ldrh	r6, [r6, #6]
 24e:	3e01      	subs	r6, #1
 250:	826e      	strh	r6, [r5, #18]
        if (miGfxDestX1 < mpcScreenDest->miGfxClipPosx1) { miGfxSpriteX1 = mpcScreenDest->miGfxClipPosx1 - miGfxDestX1; miGfxDestX1 = mpcScreenDest->miGfxClipPosx1; }
 252:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 256:	42b7      	cmp	r7, r6
 258:	da05      	bge.n	266 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x9e>
 25a:	b2b6      	uxth	r6, r6
 25c:	1a71      	subs	r1, r6, r1
 25e:	81a9      	strh	r1, [r5, #12]
 260:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
 264:	83a9      	strh	r1, [r5, #28]
        if (miGfxDestY1 < mpcScreenDest->miGfxClipPosy1) { miGfxSpriteY1 = mpcScreenDest->miGfxClipPosy1 - miGfxDestY1; miGfxDestY1 = mpcScreenDest->miGfxClipPosy1; }
 266:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
 26a:	458c      	cmp	ip, r1
 26c:	da05      	bge.n	27a <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xb2>
 26e:	b289      	uxth	r1, r1
 270:	1a8a      	subs	r2, r1, r2
 272:	81ea      	strh	r2, [r5, #14]
 274:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
 278:	83ea      	strh	r2, [r5, #30]
        if (miGfxDestX2 > mpcScreenDest->miGfxClipPosx2) miGfxSpriteX2 = miGfxSpriteX1 + mpcScreenDest->miGfxClipPosx2 - miGfxDestX1;
 27a:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
 27e:	4293      	cmp	r3, r2
 280:	dd06      	ble.n	290 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xc8>
 282:	89ab      	ldrh	r3, [r5, #12]
 284:	fa13 f382 	uxtah	r3, r3, r2
 288:	b29b      	uxth	r3, r3
 28a:	8baa      	ldrh	r2, [r5, #28]
 28c:	1a9b      	subs	r3, r3, r2
 28e:	822b      	strh	r3, [r5, #16]
        if (miGfxDestY2 > mpcScreenDest->miGfxClipPosy2) miGfxSpriteY2 = miGfxSpriteY1 + mpcScreenDest->miGfxClipPosy2 - miGfxDestY1;
 290:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
 294:	429c      	cmp	r4, r3
 296:	dd09      	ble.n	2ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xe4>
 298:	89ea      	ldrh	r2, [r5, #14]
 29a:	fa12 f383 	uxtah	r3, r2, r3
 29e:	b29b      	uxth	r3, r3
 2a0:	8bea      	ldrh	r2, [r5, #30]
 2a2:	1a9b      	subs	r3, r3, r2
 2a4:	826b      	strh	r3, [r5, #18]
 2a6:	e001      	b.n	2ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xe4>
      return False;
 2a8:	f04f 0e00 	mov.w	lr, #0
 2ac:	f1be 0f00 	cmp.w	lr, #0
 2b0:	d10b      	bne.n	2ca <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x102>
  }
 2b2:	2000      	movs	r0, #0
 2b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 2b8:	f04f 0e00 	mov.w	lr, #0
 2bc:	e7f6      	b.n	2ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xe4>
 2be:	f04f 0e00 	mov.w	lr, #0
 2c2:	e7f3      	b.n	2ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xe4>
 2c4:	f04f 0e00 	mov.w	lr, #0
 2c8:	e7f0      	b.n	2ac <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xe4>
    muixBytePosSprite = (GfxImgSize)(miGfxSpriteY1 * mpcSprite->miGfxWidth + miGfxSpriteX1);
 2ca:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 2ce:	68c2      	ldr	r2, [r0, #12]
 2d0:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 2d4:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
 2d8:	fb01 4103 	mla	r1, r1, r3, r4
 2dc:	6341      	str	r1, [r0, #52]	; 0x34
    mpui8Sprite = mpcSprite->mpui8Data + BM_BPP1_1G_PXLIDX2BYTEPOS(muixBytePosSprite);
 2de:	6812      	ldr	r2, [r2, #0]
 2e0:	eb02 02d1 	add.w	r2, r2, r1, lsr #3
 2e4:	6182      	str	r2, [r0, #24]
    muixBitPosSprite = BM_BPP1_1G_PXLIDX2BITPOS(muixBytePosSprite);
 2e6:	f001 0107 	and.w	r1, r1, #7
 2ea:	6381      	str	r1, [r0, #56]	; 0x38
    luixBytePosDest = (GfxImgSize)(miGfxDestY1 * mpcScreenDest->mpcBm->miGfxWidth + miGfxDestX1);
 2ec:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
 2f0:	69c1      	ldr	r1, [r0, #28]
 2f2:	694d      	ldr	r5, [r1, #20]
 2f4:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 2f8:	f9b0 1020 	ldrsh.w	r1, [r0, #32]
 2fc:	fb06 1102 	mla	r1, r6, r2, r1
    mpui8Dest = mpcScreenDest->mpcBm->mpui8Data + BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(luixBytePosDest);
 300:	682a      	ldr	r2, [r5, #0]
 302:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 306:	6282      	str	r2, [r0, #40]	; 0x28
    muixYCnt = (miGfxSpriteY2 - miGfxSpriteY1) + 1;
 308:	8ac2      	ldrh	r2, [r0, #22]
 30a:	b29b      	uxth	r3, r3
 30c:	1ad2      	subs	r2, r2, r3
 30e:	b292      	uxth	r2, r2
 310:	3201      	adds	r2, #1
 312:	8582      	strh	r2, [r0, #44]	; 0x2c
    muixXCnt = (miGfxSpriteX2 - miGfxSpriteX1) + 1;
 314:	8a83      	ldrh	r3, [r0, #20]
 316:	b2a4      	uxth	r4, r4
 318:	1b1b      	subs	r3, r3, r4
 31a:	b29b      	uxth	r3, r3
 31c:	3301      	adds	r3, #1
 31e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 320:	e027      	b.n	372 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x1aa>
  static inline void  vBitIncPos(u8* &pui8Ptr, u8 &ui8Mask)                                 {if ((ui8Mask) > 1) {ui8Mask >>= 1;} else {ui8Mask = 128; pui8Ptr++;}}
 322:	2b01      	cmp	r3, #1
 324:	d90a      	bls.n	33c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x174>
 326:	085b      	lsrs	r3, r3, #1
      lpui16Dest++;
 328:	3102      	adds	r1, #2
      luixSize--;
 32a:	3a01      	subs	r2, #1
    while (luixSize > 0)
 32c:	b14a      	cbz	r2, 342 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x17a>
      if (*lpui8Source & lui8BitMskSource)
 32e:	782c      	ldrb	r4, [r5, #0]
 330:	421c      	tst	r4, r3
 332:	d0f6      	beq.n	322 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x15a>
        *lpui16Dest |= lui16Value;
 334:	880c      	ldrh	r4, [r1, #0]
 336:	4334      	orrs	r4, r6
 338:	800c      	strh	r4, [r1, #0]
 33a:	e7f2      	b.n	322 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x15a>
  static inline void  vBitIncPos(u8* &pui8Ptr, u8 &ui8Mask)                                 {if ((ui8Mask) > 1) {ui8Mask >>= 1;} else {ui8Mask = 128; pui8Ptr++;}}
 33c:	3501      	adds	r5, #1
 33e:	2380      	movs	r3, #128	; 0x80
 340:	e7f2      	b.n	328 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x160>
    muixBitPosSprite += mpcSprite->miGfxWidth;
 342:	68c3      	ldr	r3, [r0, #12]
 344:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 348:	6b82      	ldr	r2, [r0, #56]	; 0x38
 34a:	4413      	add	r3, r2
    mpui8Sprite += BM_BPP1_1G_PXLIDX2BYTEPOS(muixBitPosSprite);
 34c:	6982      	ldr	r2, [r0, #24]
 34e:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 352:	6182      	str	r2, [r0, #24]
    muixBitPosSprite = BM_BPP1_1G_PXLIDX2BITPOS(muixBitPosSprite);
 354:	f003 0307 	and.w	r3, r3, #7
 358:	6383      	str	r3, [r0, #56]	; 0x38
    mpui8Dest += BM_BPP16_5R6G5B_PXLIDX2BYTEPOS(mpcScreenDest->mpcBm->miGfxWidth);
 35a:	69c3      	ldr	r3, [r0, #28]
 35c:	695b      	ldr	r3, [r3, #20]
 35e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 362:	6a83      	ldr	r3, [r0, #40]	; 0x28
 364:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 368:	6283      	str	r3, [r0, #40]	; 0x28
        muixYCnt--;
 36a:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 36e:	3b01      	subs	r3, #1
 370:	8583      	strh	r3, [r0, #44]	; 0x2c
      while (muixYCnt > 0)
 372:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 376:	2b00      	cmp	r3, #0
 378:	dd9b      	ble.n	2b2 <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0xea>
        cMemTools::vMemBit2u16Or(mpui8Sprite, muixBitPosSprite, (uint16*)mpui8Dest, mui32Col, muixXCnt);
 37a:	6985      	ldr	r5, [r0, #24]
 37c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 37e:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 380:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
    lui8BitMskSource = 128 >> lui8SrcStartBitPos;
 384:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 388:	2380      	movs	r3, #128	; 0x80
 38a:	4123      	asrs	r3, r4
 38c:	b2db      	uxtb	r3, r3
 38e:	e7cd      	b.n	32c <cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B::i8BitOrRaw(short, short)+0x164>

Disassembly of section .text._ZN10cDiffTimer8toStringEv:

00000000 <cDiffTimer::toString()>:
    mu32LastTimerValue = lu32Temp;

    return lu32Diff;
  };

  char* toString()
   0:	b538      	push	{r3, r4, r5, lr}
   2:	4604      	mov	r4, r0
    lu32Temp = u32GetTimer();
   4:	f7ff fffe 	bl	0 <u32GetTimer>	4: R_ARM_THM_CALL	u32GetTimer
    lu32Diff = lu32Temp - mu32LastTimerValue;
   8:	68e3      	ldr	r3, [r4, #12]
   a:	1ac3      	subs	r3, r0, r3
    mu32LastTimerValue = lu32Temp;
   c:	60e0      	str	r0, [r4, #12]
  {
    cStrTools::i8Itoan(get(), mszString, 10, 10);
   e:	4625      	mov	r5, r4
    if (len == 0)
    {
      return -1;
    }

    if (num < 0)
  10:	2b00      	cmp	r3, #0
  12:	db06      	blt.n	22 <cDiffTimer::toString()+0x22>
  14:	461a      	mov	r2, r3
    int i = 0;
  16:	2000      	movs	r0, #0
      str[i++] = '-';
    }

    sum = num;

    if (i == (len - 1) && sum)
  18:	2809      	cmp	r0, #9
  1a:	d114      	bne.n	46 <cDiffTimer::toString()+0x46>
  1c:	b19a      	cbz	r2, 46 <cDiffTimer::toString()+0x46>
    return mszString;
  };
  1e:	4620      	mov	r0, r4
  20:	bd38      	pop	{r3, r4, r5, pc}
      num = -num;
  22:	425a      	negs	r2, r3
      str[i++] = '-';
  24:	232d      	movs	r3, #45	; 0x2d
  26:	7023      	strb	r3, [r4, #0]
  28:	2001      	movs	r0, #1
  2a:	e7f5      	b.n	18 <cDiffTimer::toString()+0x18>
      {
        str[i++] = '0' + digit;
      }
      else
      {
        str[i++] = 'A' + digit - 0xA;
  2c:	1c41      	adds	r1, r0, #1
  2e:	3337      	adds	r3, #55	; 0x37
  30:	542b      	strb	r3, [r5, r0]
      }

      sum /= base;
  32:	4b1e      	ldr	r3, [pc, #120]	; (ac <cDiffTimer::toString()+0xac>)
  34:	fb83 c302 	smull	ip, r3, r3, r2
  38:	17d2      	asrs	r2, r2, #31

    }
    while (sum && (i < (len - 1)));
  3a:	ebd2 02a3 	rsbs	r2, r2, r3, asr #2
  3e:	d012      	beq.n	66 <cDiffTimer::toString()+0x66>
  40:	2908      	cmp	r1, #8
  42:	dc10      	bgt.n	66 <cDiffTimer::toString()+0x66>
  44:	4608      	mov	r0, r1
      digit = sum % base;
  46:	4919      	ldr	r1, [pc, #100]	; (ac <cDiffTimer::toString()+0xac>)
  48:	fb81 3102 	smull	r3, r1, r1, r2
  4c:	17d3      	asrs	r3, r2, #31
  4e:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  56:	0059      	lsls	r1, r3, #1
  58:	1a53      	subs	r3, r2, r1
      if (digit < 0xA)
  5a:	2b09      	cmp	r3, #9
  5c:	dce6      	bgt.n	2c <cDiffTimer::toString()+0x2c>
        str[i++] = '0' + digit;
  5e:	1c41      	adds	r1, r0, #1
  60:	3330      	adds	r3, #48	; 0x30
  62:	542b      	strb	r3, [r5, r0]
  64:	e7e5      	b.n	32 <cDiffTimer::toString()+0x32>

    if (i == (len - 1) && sum)
  66:	2909      	cmp	r1, #9
  68:	d010      	beq.n	8c <cDiffTimer::toString()+0x8c>
    {
      return -1;
    }

    str[i] = '\0';
  6a:	2300      	movs	r3, #0
  6c:	5463      	strb	r3, [r4, r1]
    if (str[0] == '-')
  6e:	f994 3000 	ldrsb.w	r3, [r4]
  72:	2b2d      	cmp	r3, #45	; 0x2d
  74:	d00d      	beq.n	92 <cDiffTimer::toString()+0x92>
    for (i = 0, j = len - 1; i < j; i++, j--)
  76:	3901      	subs	r1, #1
  78:	2300      	movs	r3, #0
  7a:	428b      	cmp	r3, r1
  7c:	d2cf      	bcs.n	1e <cDiffTimer::toString()+0x1e>
      a = str[i];
  7e:	56ea      	ldrsb	r2, [r5, r3]
      str[i] = str[j];
  80:	5668      	ldrsb	r0, [r5, r1]
  82:	54e8      	strb	r0, [r5, r3]
      str[j] = a;
  84:	546a      	strb	r2, [r5, r1]
    for (i = 0, j = len - 1; i < j; i++, j--)
  86:	3301      	adds	r3, #1
  88:	3901      	subs	r1, #1
  8a:	e7f6      	b.n	7a <cDiffTimer::toString()+0x7a>
    if (i == (len - 1) && sum)
  8c:	2a00      	cmp	r2, #0
  8e:	d0ec      	beq.n	6a <cDiffTimer::toString()+0x6a>
  90:	e7c5      	b.n	1e <cDiffTimer::toString()+0x1e>
      vStrRev(&str[1], i-1);
  92:	1c62      	adds	r2, r4, #1
    for (i = 0, j = len - 1; i < j; i++, j--)
  94:	3801      	subs	r0, #1
  96:	2300      	movs	r3, #0
  98:	4283      	cmp	r3, r0
  9a:	d2c0      	bcs.n	1e <cDiffTimer::toString()+0x1e>
      a = str[i];
  9c:	56d1      	ldrsb	r1, [r2, r3]
      str[i] = str[j];
  9e:	5615      	ldrsb	r5, [r2, r0]
  a0:	54d5      	strb	r5, [r2, r3]
      str[j] = a;
  a2:	5411      	strb	r1, [r2, r0]
    for (i = 0, j = len - 1; i < j; i++, j--)
  a4:	3301      	adds	r3, #1
  a6:	3801      	subs	r0, #1
  a8:	e7f6      	b.n	98 <cDiffTimer::toString()+0x98>
  aa:	bf00      	nop
  ac:	66666667 	.word	0x66666667

Disassembly of section .text._ZN20cRFont_Res8b_Bpp1_1G15i8InitFromRes8BEPKhS1_:

00000000 <cRFont_Res8b_Bpp1_1G::i8InitFromRes8B(unsigned char const*, unsigned char const*)>:
      if ((lpui8RFontRes8B[0] == Sprite_nType_ArrayFont) &&
   0:	780b      	ldrb	r3, [r1, #0]
   2:	2b01      	cmp	r3, #1
   4:	d001      	beq.n	a <cRFont_Res8b_Bpp1_1G::i8InitFromRes8B(unsigned char const*, unsigned char const*)+0xa>
      return RFONT_FAIL;
   6:	2001      	movs	r0, #1
   8:	4770      	bx	lr
          (lpui8RFontRes8B[1] == Sprite_nBPP_BPP1_1G))
   a:	784b      	ldrb	r3, [r1, #1]
      if ((lpui8RFontRes8B[0] == Sprite_nType_ArrayFont) &&
   c:	2b02      	cmp	r3, #2
   e:	d001      	beq.n	14 <cRFont_Res8b_Bpp1_1G::i8InitFromRes8B(unsigned char const*, unsigned char const*)+0x14>
      return RFONT_FAIL;
  10:	2001      	movs	r0, #1
    }
  12:	4770      	bx	lr
    FRet i8InitFromRes8B(const uint8 *lpui8RFontRes8B, const uint8 *lpaui8CharData)
  14:	b410      	push	{r4}
        menFormat  = (Sprite_tenFormat)lpui8RFontRes8B[2]; // RAW, RLE, ...
  16:	788b      	ldrb	r3, [r1, #2]
  18:	7103      	strb	r3, [r0, #4]
        mui8IdxMin = lpui8RFontRes8B[3];
  1a:	78cc      	ldrb	r4, [r1, #3]
  1c:	7144      	strb	r4, [r0, #5]
        mui8IdxMax = lpui8RFontRes8B[4];
  1e:	790c      	ldrb	r4, [r1, #4]
  20:	7184      	strb	r4, [r0, #6]
        miGfxSpacing = lpui8RFontRes8B[5];
  22:	794c      	ldrb	r4, [r1, #5]
  24:	8104      	strh	r4, [r0, #8]
        miGfxHeight  = lpui8RFontRes8B[6];
  26:	798c      	ldrb	r4, [r1, #6]
  28:	8144      	strh	r4, [r0, #10]
        miGfxYOffset = lpui8RFontRes8B[7];
  2a:	79cc      	ldrb	r4, [r1, #7]
  2c:	8184      	strh	r4, [r0, #12]
        maui16CharLut = (uint16*)(lpui8RFontRes8B + 8);
  2e:	3108      	adds	r1, #8
  30:	6141      	str	r1, [r0, #20]
        maui8CharData = (uint8*)lpaui8CharData;
  32:	6102      	str	r2, [r0, #16]
        switch (menFormat)
  34:	b173      	cbz	r3, 54 <cRFont_Res8b_Bpp1_1G::i8InitFromRes8B(unsigned char const*, unsigned char const*)+0x54>
  36:	2b01      	cmp	r3, #1
  38:	d01b      	beq.n	72 <cRFont_Res8b_Bpp1_1G::i8InitFromRes8B(unsigned char const*, unsigned char const*)+0x72>
          mi8Bitx = (cSpriteEngine_Bpp1_1G::i8Bitx[(u8)mpcSpriteEng->menMode]);
  3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  3c:	7919      	ldrb	r1, [r3, #4]
  3e:	f100 0338 	add.w	r3, r0, #56	; 0x38
  42:	4a13      	ldr	r2, [pc, #76]	; (90 <cRFont_Res8b_Bpp1_1G::i8InitFromRes8B(unsigned char const*, unsigned char const*)+0x90>)
  44:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  48:	e892 0003 	ldmia.w	r2, {r0, r1}
  4c:	e883 0003 	stmia.w	r3, {r0, r1}
        return RFONT_OK;
  50:	2000      	movs	r0, #0
          break;
  52:	e00b      	b.n	6c <cRFont_Res8b_Bpp1_1G::i8InitFromRes8B(unsigned char const*, unsigned char const*)+0x6c>
          mi8Bitx = (cSpriteEngine_Bpp1_1G::i8Bitx[(u8)mpcSpriteEng->menMode]);
  54:	6b43      	ldr	r3, [r0, #52]	; 0x34
  56:	7919      	ldrb	r1, [r3, #4]
  58:	f100 0238 	add.w	r2, r0, #56	; 0x38
  5c:	4b0c      	ldr	r3, [pc, #48]	; (90 <cRFont_Res8b_Bpp1_1G::i8InitFromRes8B(unsigned char const*, unsigned char const*)+0x90>)
  5e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  62:	e893 0003 	ldmia.w	r3, {r0, r1}
  66:	e882 0003 	stmia.w	r2, {r0, r1}
        return RFONT_OK;
  6a:	2000      	movs	r0, #0
    }
  6c:	f85d 4b04 	ldr.w	r4, [sp], #4
  70:	4770      	bx	lr
          mi8Bitx = ((cSpriteEngine_Bpp1_1G::i8Bitx[(u8)(mpcSpriteEng->menMode + Sprite_nModeLastEntry)]));
  72:	6b43      	ldr	r3, [r0, #52]	; 0x34
  74:	791b      	ldrb	r3, [r3, #4]
  76:	3304      	adds	r3, #4
  78:	b2db      	uxtb	r3, r3
  7a:	f100 0438 	add.w	r4, r0, #56	; 0x38
  7e:	4a04      	ldr	r2, [pc, #16]	; (90 <cRFont_Res8b_Bpp1_1G::i8InitFromRes8B(unsigned char const*, unsigned char const*)+0x90>)
  80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  84:	e893 0003 	ldmia.w	r3, {r0, r1}
  88:	e884 0003 	stmia.w	r4, {r0, r1}
        return RFONT_OK;
  8c:	2000      	movs	r0, #0
          break;
  8e:	e7ed      	b.n	6c <cRFont_Res8b_Bpp1_1G::i8InitFromRes8B(unsigned char const*, unsigned char const*)+0x6c>
  90:	00000000 	.word	0x00000000	90: R_ARM_ABS32	cSpriteEngine::i8Bitx

Disassembly of section .text._Z41__static_initialization_and_destruction_0ii:

00000000 <__static_initialization_and_destruction_0(int, int)>:
  while (1)
  {
    CycCall_vIdle();
    __asm("wfi");
  }
}
   0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4:	b083      	sub	sp, #12
   6:	4604      	mov	r4, r0
   8:	460d      	mov	r5, r1
   a:	2801      	cmp	r0, #1
   c:	d008      	beq.n	20 <__static_initialization_and_destruction_0(int, int)+0x20>
cRFont_Res8b_Bpp1_1G                     cRFont_Res8b_Bpp1_1G_Full(SPRTMST_FontLut_RFont01_06x08_1BPP_1G_Bmp, SPRTMST_FontData_RFont01_06x08_1BPP_1G_Bmp, &mc16GSpriteEng);
   e:	b924      	cbnz	r4, 1a <__static_initialization_and_destruction_0(int, int)+0x1a>
  10:	f64f 73ff 	movw	r3, #65535	; 0xffff
  14:	429d      	cmp	r5, r3
  16:	f000 80b0 	beq.w	17a <__static_initialization_and_destruction_0(int, int)+0x17a>
}
  1a:	b003      	add	sp, #12
  1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  20:	f64f 73ff 	movw	r3, #65535	; 0xffff
  24:	4299      	cmp	r1, r3
  26:	d1f2      	bne.n	e <__static_initialization_and_destruction_0(int, int)+0xe>
      case GPIOA_BASE: RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);break;
      case GPIOB_BASE: RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);break;
      case GPIOC_BASE: RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);break;
      case GPIOD_BASE: RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);break;
      case GPIOE_BASE: RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);break;
      case GPIOF_BASE: RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);break;
  28:	2101      	movs	r1, #1
  2a:	2020      	movs	r0, #32
  2c:	f7ff fffe 	bl	0 <RCC_AHB1PeriphClockCmd>	2c: R_ARM_THM_CALL	RCC_AHB1PeriphClockCmd
    this->Port()->BSRRL = PinBitMask();
  }

  inline void vSet0(void)
  {
    this->Port()->BSRRH = PinBitMask();
  30:	486d      	ldr	r0, [pc, #436]	; (1e8 <__static_initialization_and_destruction_0(int, int)+0x1e8>)
  32:	f44f 7300 	mov.w	r3, #512	; 0x200
  36:	8343      	strh	r3, [r0, #26]
    GPIO_InitStructure.GPIO_Pin = (1 << mui16Pin);
  38:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.GPIO_Mode = lenMode;
  3a:	2301      	movs	r3, #1
  3c:	f88d 3004 	strb.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_OType = lenOType;
  40:	2200      	movs	r2, #0
  42:	f88d 2006 	strb.w	r2, [sp, #6]
    GPIO_InitStructure.GPIO_PuPd = lenPuPd;
  46:	f88d 2007 	strb.w	r2, [sp, #7]
    GPIO_InitStructure.GPIO_Speed = lenSpeed;
  4a:	f88d 3005 	strb.w	r3, [sp, #5]
    GPIO_Init((GPIO_TypeDef*)this->Port(), &GPIO_InitStructure);
  4e:	4669      	mov	r1, sp
  50:	f7ff fffe 	bl	0 <GPIO_Init>	50: R_ARM_THM_CALL	GPIO_Init
    Update();
  };

  static void Update()
  {
    RCC_GetClocksFreq(&mstClocks);
  54:	4865      	ldr	r0, [pc, #404]	; (198 <RCC_GetClocksFreq+0x198>)
  56:	f7ff fffe 	bl	0 <RCC_GetClocksFreq>	56: R_ARM_THM_CALL	RCC_GetClocksFreq
    if (mu8Init == 0)
  5a:	4b65      	ldr	r3, [pc, #404]	; (1f0 <__static_initialization_and_destruction_0(int, int)+0x1f0>)
  5c:	781b      	ldrb	r3, [r3, #0]
  5e:	2b00      	cmp	r3, #0
  60:	f000 8085 	beq.w	16e <__static_initialization_and_destruction_0(int, int)+0x16e>
    mu32LastTimerValue = u32GetTimer();
  64:	f7ff fffe 	bl	0 <u32GetTimer>	64: R_ARM_THM_CALL	u32GetTimer
  68:	4b62      	ldr	r3, [pc, #392]	; (1f4 <__static_initialization_and_destruction_0(int, int)+0x1f4>)
  6a:	60d8      	str	r0, [r3, #12]
      mpui8Data   = lpui8Data;
  6c:	4962      	ldr	r1, [pc, #392]	; (1f8 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
  6e:	4b63      	ldr	r3, [pc, #396]	; (1fc <__static_initialization_and_destruction_0(int, int)+0x1fc>)
  70:	600b      	str	r3, [r1, #0]
      miGfxWidth  = liGfxWidth;
  72:	f44f 73a0 	mov.w	r3, #320	; 0x140
  76:	808b      	strh	r3, [r1, #4]
      miGfxHeight = liGfxHeight;
  78:	23f0      	movs	r3, #240	; 0xf0
  7a:	80cb      	strh	r3, [r1, #6]
      mui8Type    = lui8Type;
  7c:	2303      	movs	r3, #3
  7e:	720b      	strb	r3, [r1, #8]
    miGfxRefPosx1 = 0;
  80:	4b5f      	ldr	r3, [pc, #380]	; (200 <__static_initialization_and_destruction_0(int, int)+0x200>)
  82:	2200      	movs	r2, #0
  84:	809a      	strh	r2, [r3, #4]
    miGfxRefPosy1 = 0;
  86:	80da      	strh	r2, [r3, #6]
    miGfxClipPosx1 = 0;
  88:	811a      	strh	r2, [r3, #8]
    miGfxClipPosy1 = 0;
  8a:	815a      	strh	r2, [r3, #10]
    miGfxClipPosx2 = 0;
  8c:	819a      	strh	r2, [r3, #12]
    miGfxClipPosy2 = 0;
  8e:	81da      	strh	r2, [r3, #14]
    mbVisible = True;
  90:	2201      	movs	r2, #1
  92:	741a      	strb	r2, [r3, #16]
{
  public:
    cBitmap *mpcBm;

    cScreen(cBitmap* lcBm)
    {
  94:	4a5b      	ldr	r2, [pc, #364]	; (204 <__static_initialization_and_destruction_0(int, int)+0x204>)
  96:	601a      	str	r2, [r3, #0]
      mpcBm = lcBm;
  98:	6159      	str	r1, [r3, #20]
      vSet(0, 0, mpcBm->miGfxWidth - 1, mpcBm->miGfxHeight - 1);
  9a:	f240 113f 	movw	r1, #319	; 0x13f
  9e:	468c      	mov	ip, r1
  a0:	20ef      	movs	r0, #239	; 0xef
  a2:	4607      	mov	r7, r0
    {
      mbVisible = True;

      if ((liGfxPosx2 <  0) || 
          (liGfxPosy2 <  0) || 
          (liGfxPosx1 >= mpcBm->miGfxWidth) ||
  a4:	4b54      	ldr	r3, [pc, #336]	; (1f8 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
  a6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
          (liGfxPosy2 <  0) || 
  aa:	2a00      	cmp	r2, #0
  ac:	dd03      	ble.n	b6 <__static_initialization_and_destruction_0(int, int)+0xb6>
          (liGfxPosy1 >= mpcBm->miGfxHeight))
  ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
          (liGfxPosx1 >= mpcBm->miGfxWidth) ||
  b2:	2b00      	cmp	r3, #0
  b4:	dc02      	bgt.n	bc <__static_initialization_and_destruction_0(int, int)+0xbc>
      {
        mbVisible = False;
  b6:	4b52      	ldr	r3, [pc, #328]	; (200 <__static_initialization_and_destruction_0(int, int)+0x200>)
  b8:	2200      	movs	r2, #0
  ba:	741a      	strb	r2, [r3, #16]
      }

      if (liGfxPosx1 <  0) liGfxPosx1 = 0;
      if (liGfxPosy1 <  0) liGfxPosy1 = 0;
      if (liGfxPosx2 >= mpcBm->miGfxWidth)  liGfxPosx2 = mpcBm->miGfxWidth  - 1;
  bc:	4b50      	ldr	r3, [pc, #320]	; (200 <__static_initialization_and_destruction_0(int, int)+0x200>)
  be:	695e      	ldr	r6, [r3, #20]
  c0:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  c4:	4291      	cmp	r1, r2
  c6:	db03      	blt.n	d0 <__static_initialization_and_destruction_0(int, int)+0xd0>
  c8:	b292      	uxth	r2, r2
  ca:	3a01      	subs	r2, #1
  cc:	fa0f fc82 	sxth.w	ip, r2
      if (liGfxPosy2 >= mpcBm->miGfxHeight) liGfxPosy2 = mpcBm->miGfxHeight - 1;
  d0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
  d4:	4298      	cmp	r0, r3
  d6:	db02      	blt.n	de <__static_initialization_and_destruction_0(int, int)+0xde>
  d8:	b29b      	uxth	r3, r3
  da:	3b01      	subs	r3, #1
  dc:	b21f      	sxth	r7, r3

      miGfxClipPosx1 = liGfxPosx1;
  de:	4b48      	ldr	r3, [pc, #288]	; (200 <__static_initialization_and_destruction_0(int, int)+0x200>)
  e0:	2600      	movs	r6, #0
  e2:	811e      	strh	r6, [r3, #8]
      miGfxClipPosy1 = liGfxPosy1;
  e4:	815e      	strh	r6, [r3, #10]
      miGfxClipPosx2 = liGfxPosx2;
  e6:	f8a3 c00c 	strh.w	ip, [r3, #12]
      miGfxClipPosy2 = liGfxPosy2;
  ea:	81df      	strh	r7, [r3, #14]
      : cScreen(lcBm) {};
  ec:	4a46      	ldr	r2, [pc, #280]	; (208 <__static_initialization_and_destruction_0(int, int)+0x208>)
  ee:	601a      	str	r2, [r3, #0]
      mpui8Data   = BM_INVALID;
  f0:	4b46      	ldr	r3, [pc, #280]	; (20c <__static_initialization_and_destruction_0(int, int)+0x20c>)
  f2:	601e      	str	r6, [r3, #0]
      miGfxWidth  = 0;
  f4:	809e      	strh	r6, [r3, #4]
      miGfxHeight = 0;
  f6:	80de      	strh	r6, [r3, #6]
      mui8Type    = 0;
  f8:	721e      	strb	r6, [r3, #8]
      menMode  = lenMode;
  fa:	4f45      	ldr	r7, [pc, #276]	; (210 <__static_initialization_and_destruction_0(int, int)+0x210>)
  fc:	2302      	movs	r3, #2
  fe:	723b      	strb	r3, [r7, #8]
      mui32Col = 0xFFFFFF;
 100:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 104:	633b      	str	r3, [r7, #48]	; 0x30
      :cSpriteEngine_Res8b_Bpp1_1G_Base(), cSpriteEngine(lenMode)
 106:	4b43      	ldr	r3, [pc, #268]	; (214 <__static_initialization_and_destruction_0(int, int)+0x214>)
 108:	603b      	str	r3, [r7, #0]
 10a:	3334      	adds	r3, #52	; 0x34
 10c:	f847 3f04 	str.w	r3, [r7, #4]!
    tybArrayIdxT  muiSize;
    uint8         *mpu8Data;

    cbArrayT()
    {
      mpu8Data = null;
 110:	4841      	ldr	r0, [pc, #260]	; (218 <__static_initialization_and_destruction_0(int, int)+0x218>)
 112:	83c6      	strh	r6, [r0, #30]
 114:	8406      	strh	r6, [r0, #32]
      muiSize  = 0;
 116:	8386      	strh	r6, [r0, #28]
    tyArrayExtIdxT  muiLen;

    cbArrayExtT()
    {
      cbArrayT<tyArrayExtIdxT>::mpu8Data = null;
      muiLen  = 0;
 118:	8446      	strh	r6, [r0, #34]	; 0x22
    tstGfxPos2D     mstStartPos;

    cRFont()
      : mcText()
    {
      mstStartPos.x = 0;
 11a:	8486      	strh	r6, [r0, #36]	; 0x24
      mstStartPos.y = 0;
 11c:	84c6      	strh	r6, [r0, #38]	; 0x26
      mui32Col      = (uint32)-1;
 11e:	f04f 39ff 	mov.w	r9, #4294967295
 122:	f8c0 9018 	str.w	r9, [r0, #24]
      :cRFont()
 126:	f8df 8108 	ldr.w	r8, [pc, #264]	; 230 <__static_initialization_and_destruction_0(int, int)+0x230>
 12a:	f8c0 8000 	str.w	r8, [r0]
      mpui8Data   = BM_INVALID;
 12e:	6286      	str	r6, [r0, #40]	; 0x28
      miGfxWidth  = 0;
 130:	8586      	strh	r6, [r0, #44]	; 0x2c
      miGfxHeight = 0;
 132:	85c6      	strh	r6, [r0, #46]	; 0x2e
      mui8Type    = 0;
 134:	f880 6030 	strb.w	r6, [r0, #48]	; 0x30
      mpcSpriteEng = lpcSpriteEng;
 138:	6347      	str	r7, [r0, #52]	; 0x34
      i8InitFromRes8B(lpui8RFontRes8B, lpaui8CharData);
 13a:	4a38      	ldr	r2, [pc, #224]	; (21c <__static_initialization_and_destruction_0(int, int)+0x21c>)
 13c:	4938      	ldr	r1, [pc, #224]	; (220 <__static_initialization_and_destruction_0(int, int)+0x220>)
 13e:	f7ff fffe 	bl	0 <__static_initialization_and_destruction_0(int, int)>	13e: R_ARM_THM_CALL	cRFont_Res8b_Bpp1_1G::i8InitFromRes8B(unsigned char const*, unsigned char const*)
      mpu8Data = null;
 142:	4838      	ldr	r0, [pc, #224]	; (224 <__static_initialization_and_destruction_0(int, int)+0x224>)
 144:	83c6      	strh	r6, [r0, #30]
 146:	8406      	strh	r6, [r0, #32]
      muiSize  = 0;
 148:	8386      	strh	r6, [r0, #28]
 14a:	8446      	strh	r6, [r0, #34]	; 0x22
      mstStartPos.x = 0;
 14c:	8486      	strh	r6, [r0, #36]	; 0x24
      mstStartPos.y = 0;
 14e:	84c6      	strh	r6, [r0, #38]	; 0x26
      mui32Col      = (uint32)-1;
 150:	f8c0 9018 	str.w	r9, [r0, #24]
      :cRFont()
 154:	f8c0 8000 	str.w	r8, [r0]
      mpui8Data   = BM_INVALID;
 158:	6286      	str	r6, [r0, #40]	; 0x28
      miGfxWidth  = 0;
 15a:	8586      	strh	r6, [r0, #44]	; 0x2c
      miGfxHeight = 0;
 15c:	85c6      	strh	r6, [r0, #46]	; 0x2e
      mui8Type    = 0;
 15e:	f880 6030 	strb.w	r6, [r0, #48]	; 0x30
      mpcSpriteEng = lpcSpriteEng;
 162:	6347      	str	r7, [r0, #52]	; 0x34
      i8InitFromRes8B(lpui8RFontRes8B, lpaui8CharData);
 164:	4a30      	ldr	r2, [pc, #192]	; (228 <__static_initialization_and_destruction_0(int, int)+0x228>)
 166:	4931      	ldr	r1, [pc, #196]	; (22c <__static_initialization_and_destruction_0(int, int)+0x22c>)
 168:	f7ff fffe 	bl	0 <__static_initialization_and_destruction_0(int, int)>	168: R_ARM_THM_CALL	cRFont_Res8b_Bpp1_1G::i8InitFromRes8B(unsigned char const*, unsigned char const*)
 16c:	e74f      	b.n	e <__static_initialization_and_destruction_0(int, int)+0xe>
      mu8Init = 0;
 16e:	4b20      	ldr	r3, [pc, #128]	; (1f0 <__static_initialization_and_destruction_0(int, int)+0x1f0>)
 170:	2200      	movs	r2, #0
 172:	701a      	strb	r2, [r3, #0]
      InitTimer();
 174:	f7ff fffe 	bl	0 <InitTimer>	174: R_ARM_THM_CALL	InitTimer
 178:	e774      	b.n	64 <__static_initialization_and_destruction_0(int, int)+0x64>
class cRFont_Res8b_Bpp1_1G : public cRFont
 17a:	4b2a      	ldr	r3, [pc, #168]	; (224 <__static_initialization_and_destruction_0(int, int)+0x224>)
 17c:	4a2c      	ldr	r2, [pc, #176]	; (230 <__static_initialization_and_destruction_0(int, int)+0x230>)
 17e:	601a      	str	r2, [r3, #0]
      return (mui8Type > 127);
 180:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30

    void vDelete()
    {
      if (bDyn())
 184:	2b00      	cmp	r3, #0
 186:	db19      	blt.n	1bc <__static_initialization_and_destruction_0(int, int)+0x1bc>
 188:	4b23      	ldr	r3, [pc, #140]	; (218 <__static_initialization_and_destruction_0(int, int)+0x218>)
 18a:	4a29      	ldr	r2, [pc, #164]	; (230 <__static_initialization_and_destruction_0(int, int)+0x230>)
 18c:	601a      	str	r2, [r3, #0]
      return (mui8Type > 127);
 18e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
      if (bDyn())
 192:	2b00      	cmp	r3, #0
 194:	db19      	blt.n	1ca <__static_initialization_and_destruction_0(int, int)+0x1ca>
      return (mui8Type > 127);
 196:	4b1d      	ldr	r3, [pc, #116]	; (20c <__static_initialization_and_destruction_0(int, int)+0x20c>)
 198:	f993 3008 	ldrsb.w	r3, [r3, #8]
      if (bDyn())
 19c:	2b00      	cmp	r3, #0
 19e:	db1b      	blt.n	1d8 <__static_initialization_and_destruction_0(int, int)+0x1d8>
      return (mui8Type > 127);
 1a0:	4b15      	ldr	r3, [pc, #84]	; (1f8 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
 1a2:	f993 3008 	ldrsb.w	r3, [r3, #8]
      if (bDyn())
 1a6:	2b00      	cmp	r3, #0
 1a8:	f6bf af37 	bge.w	1a <__static_initialization_and_destruction_0(int, int)+0x1a>
      {
        if (mpui8Data != BM_INVALID)
 1ac:	4b12      	ldr	r3, [pc, #72]	; (1f8 <__static_initialization_and_destruction_0(int, int)+0x1f8>)
 1ae:	6818      	ldr	r0, [r3, #0]
 1b0:	2800      	cmp	r0, #0
 1b2:	f43f af32 	beq.w	1a <__static_initialization_and_destruction_0(int, int)+0x1a>
        {
          delete [] mpui8Data;
 1b6:	f7ff fffe 	bl	0 <operator delete[](void*)>	1b6: R_ARM_THM_CALL	operator delete[](void*)
 1ba:	e72e      	b.n	1a <__static_initialization_and_destruction_0(int, int)+0x1a>
        if (mpui8Data != BM_INVALID)
 1bc:	4b19      	ldr	r3, [pc, #100]	; (224 <__static_initialization_and_destruction_0(int, int)+0x224>)
 1be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 1c0:	2800      	cmp	r0, #0
 1c2:	d0e1      	beq.n	188 <__static_initialization_and_destruction_0(int, int)+0x188>
          delete [] mpui8Data;
 1c4:	f7ff fffe 	bl	0 <operator delete[](void*)>	1c4: R_ARM_THM_CALL	operator delete[](void*)
 1c8:	e7de      	b.n	188 <__static_initialization_and_destruction_0(int, int)+0x188>
        if (mpui8Data != BM_INVALID)
 1ca:	4b13      	ldr	r3, [pc, #76]	; (218 <__static_initialization_and_destruction_0(int, int)+0x218>)
 1cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 1ce:	2800      	cmp	r0, #0
 1d0:	d0e1      	beq.n	196 <__static_initialization_and_destruction_0(int, int)+0x196>
          delete [] mpui8Data;
 1d2:	f7ff fffe 	bl	0 <operator delete[](void*)>	1d2: R_ARM_THM_CALL	operator delete[](void*)
 1d6:	e7de      	b.n	196 <__static_initialization_and_destruction_0(int, int)+0x196>
        if (mpui8Data != BM_INVALID)
 1d8:	4b0c      	ldr	r3, [pc, #48]	; (20c <__static_initialization_and_destruction_0(int, int)+0x20c>)
 1da:	6818      	ldr	r0, [r3, #0]
 1dc:	2800      	cmp	r0, #0
 1de:	d0df      	beq.n	1a0 <__static_initialization_and_destruction_0(int, int)+0x1a0>
          delete [] mpui8Data;
 1e0:	f7ff fffe 	bl	0 <operator delete[](void*)>	1e0: R_ARM_THM_CALL	operator delete[](void*)
 1e4:	e7dc      	b.n	1a0 <__static_initialization_and_destruction_0(int, int)+0x1a0>
 1e6:	bf00      	nop
 1e8:	40021400 	.word	0x40021400
	...
	1ec: R_ARM_ABS32	cClockInfo::mstClocks
	1f0: R_ARM_ABS32	cDiffTimer::mu8Init
	1f4: R_ARM_ABS32	.bss.mcDiffTimer
	1f8: R_ARM_ABS32	.bss.mc16GBm
	1fc: R_ARM_ABS32	mDisplayMemory
	200: R_ARM_ABS32	.bss.mc16GScreen1
 204:	00000008 	.word	0x00000008	204: R_ARM_ABS32	vtable for cScreen
 208:	00000008 	.word	0x00000008	208: R_ARM_ABS32	vtable for cScreen_Bpp16_5R6G5B
	...
	20c: R_ARM_ABS32	.bss.mc16GSprite
	210: R_ARM_ABS32	.bss.mc16GSpriteEng
 214:	00000008 	.word	0x00000008	214: R_ARM_ABS32	vtable for cRes8b_Bpp1_1G_SpriteEngine_Bpp16_5R6G5B
	...
	218: R_ARM_ABS32	.bss.cRFont_Res8b_Bpp1_1G_5x5Ucase
	21c: R_ARM_ABS32	.rodata._ZL43SPRTMST_FontData_RFont01_05x05U_1BPP_1G_Bmp
	220: R_ARM_ABS32	.rodata._ZL42SPRTMST_FontLut_RFont01_05x05U_1BPP_1G_Bmp
	224: R_ARM_ABS32	.bss.cRFont_Res8b_Bpp1_1G_Full
	228: R_ARM_ABS32	.rodata._ZL42SPRTMST_FontData_RFont01_06x08_1BPP_1G_Bmp
	22c: R_ARM_ABS32	.rodata._ZL41SPRTMST_FontLut_RFont01_06x08_1BPP_1G_Bmp
 230:	00000008 	.word	0x00000008	230: R_ARM_ABS32	vtable for cRFont_Res8b_Bpp1_1G

Disassembly of section .text.NMI_Handler:

00000000 <NMI_Handler>:
{
   0:	e7fe      	b.n	0 <NMI_Handler>

Disassembly of section .text.HardFault_Handler:

00000000 <HardFault_Handler>:
{
   0:	e7fe      	b.n	0 <HardFault_Handler>

Disassembly of section .text.MemManage_Handler:

00000000 <MemManage_Handler>:
{
   0:	e7fe      	b.n	0 <MemManage_Handler>

Disassembly of section .text.BusFault_Handler:

00000000 <BusFault_Handler>:
{
   0:	e7fe      	b.n	0 <BusFault_Handler>

Disassembly of section .text.UsageFault_Handler:

00000000 <UsageFault_Handler>:
{
   0:	e7fe      	b.n	0 <UsageFault_Handler>

Disassembly of section .text.SVC_Handler:

00000000 <SVC_Handler>:
{
   0:	e7fe      	b.n	0 <SVC_Handler>

Disassembly of section .text.DebugMon_Handler:

00000000 <DebugMon_Handler>:
{
   0:	e7fe      	b.n	0 <DebugMon_Handler>

Disassembly of section .text.PendSV_Handler:

00000000 <PendSV_Handler>:
{
   0:	e7fe      	b.n	0 <PendSV_Handler>

Disassembly of section .text._Z21TimingDelay_Decrementv:

00000000 <TimingDelay_Decrement()>:
  if (TimingDelay != 0x00)
   0:	4b03      	ldr	r3, [pc, #12]	; (10 <TimingDelay_Decrement()+0x10>)
   2:	681b      	ldr	r3, [r3, #0]
   4:	b11b      	cbz	r3, e <TimingDelay_Decrement()+0xe>
    TimingDelay--;
   6:	4a02      	ldr	r2, [pc, #8]	; (10 <TimingDelay_Decrement()+0x10>)
   8:	6813      	ldr	r3, [r2, #0]
   a:	3b01      	subs	r3, #1
   c:	6013      	str	r3, [r2, #0]
}
   e:	4770      	bx	lr
  10:	00000000 	.word	0x00000000	10: R_ARM_ABS32	.bss.TimingDelay

Disassembly of section .text.SysTick_Handler:

00000000 <SysTick_Handler>:
{
   0:	b508      	push	{r3, lr}
  TimingDelay_Decrement();
   2:	f7ff fffe 	bl	0 <SysTick_Handler>	2: R_ARM_THM_CALL	TimingDelay_Decrement()
}
   6:	bd08      	pop	{r3, pc}

Disassembly of section .text._ZN11cMatrix_4x4C2Eb:

00000000 <cMatrix_4x4::cMatrix_4x4(bool)>:
  cMatrix_4x4(bool lbInit)
   0:	b570      	push	{r4, r5, r6, lr}
   2:	b090      	sub	sp, #64	; 0x40
   4:	4604      	mov	r4, r0
    if (lbInit) Set_Default();
   6:	b9b9      	cbnz	r1, 38 <cMatrix_4x4::cMatrix_4x4(bool)+0x38>
    arm_mat_init_f32(&mstMat1, 4, 4, null);
   8:	2300      	movs	r3, #0
   a:	2204      	movs	r2, #4
   c:	4611      	mov	r1, r2
   e:	f104 0040 	add.w	r0, r4, #64	; 0x40
  12:	f7ff fffe 	bl	0 <arm_mat_init_f32>	12: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstMat2, 4, 4, null);
  16:	2300      	movs	r3, #0
  18:	2204      	movs	r2, #4
  1a:	4611      	mov	r1, r2
  1c:	f104 0048 	add.w	r0, r4, #72	; 0x48
  20:	f7ff fffe 	bl	0 <arm_mat_init_f32>	20: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstRet, 4, 4, (float*)m);
  24:	4623      	mov	r3, r4
  26:	2204      	movs	r2, #4
  28:	4611      	mov	r1, r2
  2a:	f104 0050 	add.w	r0, r4, #80	; 0x50
  2e:	f7ff fffe 	bl	0 <arm_mat_init_f32>	2e: R_ARM_THM_CALL	arm_mat_init_f32
  }
  32:	4620      	mov	r0, r4
  34:	b010      	add	sp, #64	; 0x40
  36:	bd70      	pop	{r4, r5, r6, pc}
    float DefaultMat[4][4] =
  38:	466d      	mov	r5, sp
  3a:	4e10      	ldr	r6, [pc, #64]	; (7c <cMatrix_4x4::cMatrix_4x4(bool)+0x7c>)
  3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  48:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  4c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    for (c = 0; c < 4; c++)
  50:	2100      	movs	r1, #0
  52:	e001      	b.n	58 <cMatrix_4x4::cMatrix_4x4(bool)+0x58>
  54:	3101      	adds	r1, #1
  56:	b2c9      	uxtb	r1, r1
  58:	2903      	cmp	r1, #3
  5a:	d8d5      	bhi.n	8 <cMatrix_4x4::cMatrix_4x4(bool)+0x8>
      for (r = 0; r < 4; r++)
  5c:	2300      	movs	r3, #0
  5e:	2b03      	cmp	r3, #3
  60:	d8f8      	bhi.n	54 <cMatrix_4x4::cMatrix_4x4(bool)+0x54>
        m[c][r] = lMatrix[c][r];
  62:	eb0d 1201 	add.w	r2, sp, r1, lsl #4
  66:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  6a:	6810      	ldr	r0, [r2, #0]
  6c:	eb03 0281 	add.w	r2, r3, r1, lsl #2
  70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  74:	6010      	str	r0, [r2, #0]
      for (r = 0; r < 4; r++)
  76:	3301      	adds	r3, #1
  78:	b2db      	uxtb	r3, r3
  7a:	e7f0      	b.n	5e <cMatrix_4x4::cMatrix_4x4(bool)+0x5e>
  7c:	00000000 	.word	0x00000000	7c: R_ARM_ABS32	.rodata

Disassembly of section .text._ZN9cVector4fC2Ev:

00000000 <cVector4f::cVector4f()>:
  cVector4f()
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
    arm_mat_init_f32(&mstMat,    4, 4, null);
   4:	2300      	movs	r3, #0
   6:	2204      	movs	r2, #4
   8:	4611      	mov	r1, r2
   a:	3010      	adds	r0, #16
   c:	f7ff fffe 	bl	0 <arm_mat_init_f32>	c: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstVec,    4, 1, null);
  10:	2300      	movs	r3, #0
  12:	2201      	movs	r2, #1
  14:	2104      	movs	r1, #4
  16:	f104 0018 	add.w	r0, r4, #24
  1a:	f7ff fffe 	bl	0 <arm_mat_init_f32>	1a: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstRetVec, 4, 1, (float*)n);
  1e:	4623      	mov	r3, r4
  20:	2201      	movs	r2, #1
  22:	2104      	movs	r1, #4
  24:	f104 0030 	add.w	r0, r4, #48	; 0x30
  28:	f7ff fffe 	bl	0 <arm_mat_init_f32>	28: R_ARM_THM_CALL	arm_mat_init_f32
  }
  2c:	4620      	mov	r0, r4
  2e:	bd10      	pop	{r4, pc}

Disassembly of section .text._Z14FSMC_SRAM_Initv:

00000000 <FSMC_SRAM_Init()>:
{
   0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	b099      	sub	sp, #100	; 0x64
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOG, ENABLE);//??PD,PE,PF,PG??
   6:	2101      	movs	r1, #1
   8:	207a      	movs	r0, #122	; 0x7a
   a:	f7ff fffe 	bl	0 <RCC_AHB1PeriphClockCmd>	a: R_ARM_THM_CALL	RCC_AHB1PeriphClockCmd
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);//??FSMC??
   e:	2101      	movs	r1, #1
  10:	4608      	mov	r0, r1
  12:	f7ff fffe 	bl	0 <RCC_AHB3PeriphClockCmd>	12: R_ARM_THM_CALL	RCC_AHB3PeriphClockCmd
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;//PB15 ????,????
  16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  1a:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//??????
  1c:	2701      	movs	r7, #1
  1e:	f88d 705c 	strb.w	r7, [sp, #92]	; 0x5c
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//????
  22:	2400      	movs	r4, #0
  24:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//100MHz
  28:	f04f 0a02 	mov.w	sl, #2
  2c:	f88d a05d 	strb.w	sl, [sp, #93]	; 0x5d
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//??
  30:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
  GPIO_Init(GPIOB, &GPIO_InitStructure);//??? //PB15 ????,????
  34:	a916      	add	r1, sp, #88	; 0x58
  36:	489b      	ldr	r0, [pc, #620]	; (2a4 <FSMC_SRAM_Init()+0x2a4>)
  38:	f7ff fffe 	bl	0 <GPIO_Init>	38: R_ARM_THM_CALL	GPIO_Init
  GPIO_InitStructure.GPIO_Pin = (3 << 0) | (3 << 4) | (0XFF << 8);//PD0,1,4,5,8~15 AF OUT
  3c:	f64f 7333 	movw	r3, #65331	; 0xff33
  40:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//????
  42:	f88d a05c 	strb.w	sl, [sp, #92]	; 0x5c
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//????
  46:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
  4a:	f04f 0b03 	mov.w	fp, #3
  4e:	f88d b05d 	strb.w	fp, [sp, #93]	; 0x5d
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//??
  52:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
  GPIO_Init(GPIOD, &GPIO_InitStructure);//???
  56:	4d94      	ldr	r5, [pc, #592]	; (2a8 <FSMC_SRAM_Init()+0x2a8>)
  58:	a916      	add	r1, sp, #88	; 0x58
  5a:	4628      	mov	r0, r5
  5c:	f7ff fffe 	bl	0 <GPIO_Init>	5c: R_ARM_THM_CALL	GPIO_Init
  GPIO_InitStructure.GPIO_Pin = (3 << 0) | (0X1FF << 7);//PE0,1,7~15,AF OUT
  60:	f64f 7383 	movw	r3, #65411	; 0xff83
  64:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//????
  66:	f88d a05c 	strb.w	sl, [sp, #92]	; 0x5c
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//????
  6a:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
  6e:	f88d b05d 	strb.w	fp, [sp, #93]	; 0x5d
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//??
  72:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
  GPIO_Init(GPIOE, &GPIO_InitStructure);//???
  76:	4e8d      	ldr	r6, [pc, #564]	; (2ac <FSMC_SRAM_Init()+0x2ac>)
  78:	a916      	add	r1, sp, #88	; 0x58
  7a:	4630      	mov	r0, r6
  7c:	f7ff fffe 	bl	0 <GPIO_Init>	7c: R_ARM_THM_CALL	GPIO_Init
  GPIO_InitStructure.GPIO_Pin = (0X3F << 0) | (0XF << 12);   //PF0~5,12~15
  80:	f24f 033f 	movw	r3, #61503	; 0xf03f
  84:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//????
  86:	f88d a05c 	strb.w	sl, [sp, #92]	; 0x5c
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//????
  8a:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
  8e:	f88d b05d 	strb.w	fp, [sp, #93]	; 0x5d
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//??
  92:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
  GPIO_Init(GPIOF, &GPIO_InitStructure);//???
  96:	f8df 8218 	ldr.w	r8, [pc, #536]	; 2b0 <FSMC_SRAM_Init()+0x2b0>
  9a:	a916      	add	r1, sp, #88	; 0x58
  9c:	4640      	mov	r0, r8
  9e:	f7ff fffe 	bl	0 <GPIO_Init>	9e: R_ARM_THM_CALL	GPIO_Init
  GPIO_InitStructure.GPIO_Pin = (0X3F << 0) | GPIO_Pin_10;//PG0~5,10
  a2:	f240 433f 	movw	r3, #1087	; 0x43f
  a6:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//????
  a8:	f88d a05c 	strb.w	sl, [sp, #92]	; 0x5c
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//????
  ac:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
  b0:	f88d b05d 	strb.w	fp, [sp, #93]	; 0x5d
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//??
  b4:	f88d 705f 	strb.w	r7, [sp, #95]	; 0x5f
  GPIO_Init(GPIOG, &GPIO_InitStructure);//???
  b8:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 2b4 <FSMC_SRAM_Init()+0x2b4>
  bc:	a916      	add	r1, sp, #88	; 0x58
  be:	4648      	mov	r0, r9
  c0:	f7ff fffe 	bl	0 <GPIO_Init>	c0: R_ARM_THM_CALL	GPIO_Init
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);//PD0,AF12
  c4:	220c      	movs	r2, #12
  c6:	4621      	mov	r1, r4
  c8:	4628      	mov	r0, r5
  ca:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	ca: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);//PD1,AF12
  ce:	220c      	movs	r2, #12
  d0:	4639      	mov	r1, r7
  d2:	4628      	mov	r0, r5
  d4:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	d4: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC);
  d8:	220c      	movs	r2, #12
  da:	2104      	movs	r1, #4
  dc:	4628      	mov	r0, r5
  de:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	de: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);
  e2:	220c      	movs	r2, #12
  e4:	2105      	movs	r1, #5
  e6:	4628      	mov	r0, r5
  e8:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	e8: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
  ec:	220c      	movs	r2, #12
  ee:	2108      	movs	r1, #8
  f0:	4628      	mov	r0, r5
  f2:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	f2: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
  f6:	220c      	movs	r2, #12
  f8:	2109      	movs	r1, #9
  fa:	4628      	mov	r0, r5
  fc:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	fc: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
 100:	220c      	movs	r2, #12
 102:	210a      	movs	r1, #10
 104:	4628      	mov	r0, r5
 106:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	106: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource11, GPIO_AF_FSMC);
 10a:	220c      	movs	r2, #12
 10c:	210b      	movs	r1, #11
 10e:	4628      	mov	r0, r5
 110:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	110: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_FSMC);
 114:	220c      	movs	r2, #12
 116:	4611      	mov	r1, r2
 118:	4628      	mov	r0, r5
 11a:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	11a: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_FSMC);
 11e:	220c      	movs	r2, #12
 120:	210d      	movs	r1, #13
 122:	4628      	mov	r0, r5
 124:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	124: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
 128:	220c      	movs	r2, #12
 12a:	210e      	movs	r1, #14
 12c:	4628      	mov	r0, r5
 12e:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	12e: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);//PD15,AF12
 132:	220c      	movs	r2, #12
 134:	210f      	movs	r1, #15
 136:	4628      	mov	r0, r5
 138:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	138: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0, GPIO_AF_FSMC);
 13c:	220c      	movs	r2, #12
 13e:	4621      	mov	r1, r4
 140:	4630      	mov	r0, r6
 142:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	142: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1, GPIO_AF_FSMC);
 146:	220c      	movs	r2, #12
 148:	4639      	mov	r1, r7
 14a:	4630      	mov	r0, r6
 14c:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	14c: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7, GPIO_AF_FSMC);//PE7,AF12
 150:	220c      	movs	r2, #12
 152:	2107      	movs	r1, #7
 154:	4630      	mov	r0, r6
 156:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	156: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8, GPIO_AF_FSMC);
 15a:	220c      	movs	r2, #12
 15c:	2108      	movs	r1, #8
 15e:	4630      	mov	r0, r6
 160:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	160: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9, GPIO_AF_FSMC);
 164:	220c      	movs	r2, #12
 166:	2109      	movs	r1, #9
 168:	4630      	mov	r0, r6
 16a:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	16a: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10, GPIO_AF_FSMC);
 16e:	220c      	movs	r2, #12
 170:	210a      	movs	r1, #10
 172:	4630      	mov	r0, r6
 174:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	174: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11, GPIO_AF_FSMC);
 178:	220c      	movs	r2, #12
 17a:	210b      	movs	r1, #11
 17c:	4630      	mov	r0, r6
 17e:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	17e: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12, GPIO_AF_FSMC);
 182:	220c      	movs	r2, #12
 184:	4611      	mov	r1, r2
 186:	4630      	mov	r0, r6
 188:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	188: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13, GPIO_AF_FSMC);
 18c:	220c      	movs	r2, #12
 18e:	210d      	movs	r1, #13
 190:	4630      	mov	r0, r6
 192:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	192: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14, GPIO_AF_FSMC);
 196:	220c      	movs	r2, #12
 198:	210e      	movs	r1, #14
 19a:	4630      	mov	r0, r6
 19c:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	19c: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15, GPIO_AF_FSMC);//PE15,AF12
 1a0:	220c      	movs	r2, #12
 1a2:	210f      	movs	r1, #15
 1a4:	4630      	mov	r0, r6
 1a6:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	1a6: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0, GPIO_AF_FSMC);//PF0,AF12
 1aa:	220c      	movs	r2, #12
 1ac:	4621      	mov	r1, r4
 1ae:	4640      	mov	r0, r8
 1b0:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	1b0: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1, GPIO_AF_FSMC);//PF1,AF12
 1b4:	220c      	movs	r2, #12
 1b6:	4639      	mov	r1, r7
 1b8:	4640      	mov	r0, r8
 1ba:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	1ba: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2, GPIO_AF_FSMC);//PF2,AF12
 1be:	220c      	movs	r2, #12
 1c0:	4651      	mov	r1, sl
 1c2:	4640      	mov	r0, r8
 1c4:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	1c4: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3, GPIO_AF_FSMC);//PF3,AF12
 1c8:	220c      	movs	r2, #12
 1ca:	4659      	mov	r1, fp
 1cc:	4640      	mov	r0, r8
 1ce:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	1ce: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4, GPIO_AF_FSMC);//PF4,AF12
 1d2:	220c      	movs	r2, #12
 1d4:	2104      	movs	r1, #4
 1d6:	4640      	mov	r0, r8
 1d8:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	1d8: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5, GPIO_AF_FSMC);//PF5,AF12
 1dc:	220c      	movs	r2, #12
 1de:	2105      	movs	r1, #5
 1e0:	4640      	mov	r0, r8
 1e2:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	1e2: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12, GPIO_AF_FSMC);//PF12,AF12
 1e6:	220c      	movs	r2, #12
 1e8:	4611      	mov	r1, r2
 1ea:	4640      	mov	r0, r8
 1ec:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	1ec: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13, GPIO_AF_FSMC);//PF13,AF12
 1f0:	220c      	movs	r2, #12
 1f2:	210d      	movs	r1, #13
 1f4:	4640      	mov	r0, r8
 1f6:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	1f6: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14, GPIO_AF_FSMC);//PF14,AF12
 1fa:	220c      	movs	r2, #12
 1fc:	210e      	movs	r1, #14
 1fe:	4640      	mov	r0, r8
 200:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	200: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15, GPIO_AF_FSMC);//PF15,AF12
 204:	220c      	movs	r2, #12
 206:	210f      	movs	r1, #15
 208:	4640      	mov	r0, r8
 20a:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	20a: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0, GPIO_AF_FSMC);
 20e:	220c      	movs	r2, #12
 210:	4621      	mov	r1, r4
 212:	4648      	mov	r0, r9
 214:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	214: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1, GPIO_AF_FSMC);
 218:	220c      	movs	r2, #12
 21a:	4639      	mov	r1, r7
 21c:	4648      	mov	r0, r9
 21e:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	21e: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource2, GPIO_AF_FSMC);
 222:	220c      	movs	r2, #12
 224:	4651      	mov	r1, sl
 226:	4648      	mov	r0, r9
 228:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	228: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource3, GPIO_AF_FSMC);
 22c:	220c      	movs	r2, #12
 22e:	4659      	mov	r1, fp
 230:	4648      	mov	r0, r9
 232:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	232: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4, GPIO_AF_FSMC);
 236:	220c      	movs	r2, #12
 238:	2104      	movs	r1, #4
 23a:	4648      	mov	r0, r9
 23c:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	23c: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5, GPIO_AF_FSMC);
 240:	220c      	movs	r2, #12
 242:	2105      	movs	r1, #5
 244:	4648      	mov	r0, r9
 246:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	246: R_ARM_THM_CALL	GPIO_PinAFConfig
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_FSMC);
 24a:	220c      	movs	r2, #12
 24c:	210a      	movs	r1, #10
 24e:	4648      	mov	r0, r9
 250:	f7ff fffe 	bl	0 <GPIO_PinAFConfig>	250: R_ARM_THM_CALL	GPIO_PinAFConfig
  readWriteTiming.FSMC_AddressSetupTime = 0x00;   //??????(ADDSET)?1?HCLK 1/36M=27ns
 254:	9400      	str	r4, [sp, #0]
  readWriteTiming.FSMC_AddressHoldTime = 0x00;   //??????(ADDHLD)??A???
 256:	9401      	str	r4, [sp, #4]
  readWriteTiming.FSMC_DataSetupTime = 0x08;     ////??????(DATAST)?9?HCLK 6*9=54ns
 258:	2308      	movs	r3, #8
 25a:	9302      	str	r3, [sp, #8]
  readWriteTiming.FSMC_BusTurnAroundDuration = 0x00;
 25c:	9403      	str	r4, [sp, #12]
  readWriteTiming.FSMC_CLKDivision = 0x00;
 25e:	9404      	str	r4, [sp, #16]
  readWriteTiming.FSMC_DataLatency = 0x00;
 260:	9405      	str	r4, [sp, #20]
  readWriteTiming.FSMC_AccessMode = FSMC_AccessMode_A;   //??A
 262:	9406      	str	r4, [sp, #24]
  FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;//  ??????NE3 ,????BTCR[4],[5]?
 264:	2504      	movs	r5, #4
 266:	9507      	str	r5, [sp, #28]
  FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
 268:	9408      	str	r4, [sp, #32]
  FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;// FSMC_MemoryType_SRAM;  //SRAM
 26a:	9409      	str	r4, [sp, #36]	; 0x24
  FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;//????????16bit
 26c:	2310      	movs	r3, #16
 26e:	930a      	str	r3, [sp, #40]	; 0x28
  FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;// FSMC_BurstAccessMode_Disable;
 270:	940b      	str	r4, [sp, #44]	; 0x2c
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 272:	940d      	str	r4, [sp, #52]	; 0x34
  FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 274:	940c      	str	r4, [sp, #48]	; 0x30
  FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
 276:	940e      	str	r4, [sp, #56]	; 0x38
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 278:	940f      	str	r4, [sp, #60]	; 0x3c
  FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;  //??????
 27a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 27e:	9310      	str	r3, [sp, #64]	; 0x40
  FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
 280:	9411      	str	r4, [sp, #68]	; 0x44
  FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable; // ?????????
 282:	9412      	str	r4, [sp, #72]	; 0x48
  FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 284:	9413      	str	r4, [sp, #76]	; 0x4c
  FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &readWriteTiming;
 286:	f8cd d050 	str.w	sp, [sp, #80]	; 0x50
  FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &readWriteTiming; //??????
 28a:	f8cd d054 	str.w	sp, [sp, #84]	; 0x54
  FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);  //???FSMC??
 28e:	a807      	add	r0, sp, #28
 290:	f7ff fffe 	bl	0 <FSMC_NORSRAMInit>	290: R_ARM_THM_CALL	FSMC_NORSRAMInit
  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);  // ??BANK3
 294:	4639      	mov	r1, r7
 296:	4628      	mov	r0, r5
 298:	f7ff fffe 	bl	0 <FSMC_NORSRAMCmd>	298: R_ARM_THM_CALL	FSMC_NORSRAMCmd
}
 29c:	b019      	add	sp, #100	; 0x64
 29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2a2:	bf00      	nop
 2a4:	40020400 	.word	0x40020400
 2a8:	40020c00 	.word	0x40020c00
 2ac:	40021000 	.word	0x40021000
 2b0:	40021400 	.word	0x40021400
 2b4:	40021800 	.word	0x40021800

Disassembly of section .text._Z16MAIN_vTick10msLpv:

00000000 <MAIN_vTick10msLp()>:
}
   0:	4770      	bx	lr

Disassembly of section .text._Z18MAIN_vTick1000msLpv:

00000000 <MAIN_vTick1000msLp()>:
  }

  inline void vToggle(void)
  {
    this->Port()->ODR ^= PinBitMask();
   0:	4a04      	ldr	r2, [pc, #16]	; (14 <MAIN_vTick1000msLp()+0x14>)
   2:	6953      	ldr	r3, [r2, #20]
   4:	f483 7300 	eor.w	r3, r3, #512	; 0x200
   8:	6153      	str	r3, [r2, #20]
  lui8t++;
   a:	4a03      	ldr	r2, [pc, #12]	; (18 <MAIN_vTick1000msLp()+0x18>)
   c:	7813      	ldrb	r3, [r2, #0]
   e:	3301      	adds	r3, #1
  10:	7013      	strb	r3, [r2, #0]
}
  12:	4770      	bx	lr
  14:	40021400 	.word	0x40021400
  18:	00000000 	.word	0x00000000	18: R_ARM_ABS32	.bss._ZZ18MAIN_vTick1000msLpvE5lui8t

Disassembly of section .text._Z16MAIN_vInitSystemv:

00000000 <MAIN_vInitSystem()>:
{
   0:	b508      	push	{r3, lr}
    SystemInit();
   2:	f7ff fffe 	bl	0 <SystemInit>	2: R_ARM_THM_CALL	SystemInit
   6:	4804      	ldr	r0, [pc, #16]	; (14 <RCC_GetClocksFreq+0x14>)
   8:	f7ff fffe 	bl	0 <RCC_GetClocksFreq>	8: R_ARM_THM_CALL	RCC_GetClocksFreq
    FSMC_SRAM_Init();
   c:	f7ff fffe 	bl	0 <MAIN_vInitSystem()>	c: R_ARM_THM_CALL	FSMC_SRAM_Init()
    ILI9341_Init();
  10:	f7ff fffe 	bl	0 <ILI9341_Init>	10: R_ARM_THM_CALL	ILI9341_Init
}
  14:	bd08      	pop	{r3, pc}
  16:	bf00      	nop
  18:	00000000 	.word	0x00000000	18: R_ARM_ABS32	cClockInfo::mstClocks

Disassembly of section .text._ZN9cStrBaseTItE4SetfEPKcz:

00000000 <cStrBaseT<unsigned short>::Setf(char const*, ...)>:
     *  \section history History
     *  \since 17.11.2011
     *  - Erstellt
     */
     /****************************************************************************************/
    cStrBaseT& Setf(const char8* lpszfStr, ...)
   0:	b40e      	push	{r1, r2, r3}
   2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   6:	b08c      	sub	sp, #48	; 0x30
   8:	4606      	mov	r6, r0
   a:	ab15      	add	r3, sp, #84	; 0x54
   c:	f853 ab04 	ldr.w	sl, [r3], #4
      char8  lszValue[16];

      char8  lc8Zeichen;

      va_list lParList;
      va_start(lParList, lpszfStr);
  10:	9307      	str	r3, [sp, #28]
        cbArrayExtT<tyCStrT>::muiLen = 0;
  12:	2300      	movs	r3, #0
  14:	7183      	strb	r3, [r0, #6]
  16:	71c3      	strb	r3, [r0, #7]
  18:	e006      	b.n	28 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x28>

      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;

      if (luiFreeByteCnt)
      {
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
  1a:	f8d6 0002 	ldr.w	r0, [r6, #2]
  1e:	5443      	strb	r3, [r0, r1]
        muiLen++;
  20:	88f3      	ldrh	r3, [r6, #6]
  22:	3301      	adds	r3, #1
  24:	80f3      	strh	r3, [r6, #6]

      *this = "";

      while (1)
      {
        lc8Zeichen = *lpszfStr++;       /* Get a char */
  26:	4692      	mov	sl, r2
  28:	f10a 0201 	add.w	r2, sl, #1
  2c:	f99a 3000 	ldrsb.w	r3, [sl]
        if (!lc8Zeichen) break;         /* End of format? */
  30:	2b00      	cmp	r3, #0
  32:	f000 81d2 	beq.w	3da <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x3da>
        if (lc8Zeichen != '%')
  36:	2b25      	cmp	r3, #37	; 0x25
  38:	d005      	beq.n	46 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x46>
     *  - Erstellt
     */
     /****************************************************************************************/
    cStrBaseT& Add(char8 li8Char)
    {
      cbArrayExtT<tyCStrT>::Add(li8Char);
  3a:	b2db      	uxtb	r3, r3
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
  3c:	8830      	ldrh	r0, [r6, #0]
  3e:	88f1      	ldrh	r1, [r6, #6]
      if (luiFreeByteCnt)
  40:	4288      	cmp	r0, r1
  42:	d1ea      	bne.n	1a <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1a>
  44:	e7ef      	b.n	26 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x26>
        lc8Zeichen = *lpszfStr++;          /* Get first char of the sequense */
  46:	f10a 0202 	add.w	r2, sl, #2
  4a:	f99a b001 	ldrsb.w	fp, [sl, #1]
        if (lc8Zeichen == '0')
  4e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  52:	d016      	beq.n	82 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x82>
          if (lc8Zeichen == '-')
  54:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  58:	d01a      	beq.n	90 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x90>
        lui8Flags = 0;
  5a:	2300      	movs	r3, #0
  5c:	9301      	str	r3, [sp, #4]
        for (li16Width = 0; (lc8Zeichen >= '0') && (lc8Zeichen <= '9'); lc8Zeichen = *lpszfStr++)
  5e:	2400      	movs	r4, #0
  60:	f1ab 0130 	sub.w	r1, fp, #48	; 0x30
  64:	b2c9      	uxtb	r1, r1
  66:	2909      	cmp	r1, #9
  68:	d819      	bhi.n	9e <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x9e>
          li16Width = li16Width * 10 + lc8Zeichen - '0';
  6a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  6e:	0063      	lsls	r3, r4, #1
  70:	b29c      	uxth	r4, r3
  72:	445c      	add	r4, fp
  74:	b2a4      	uxth	r4, r4
  76:	3c30      	subs	r4, #48	; 0x30
  78:	b224      	sxth	r4, r4
        for (li16Width = 0; (lc8Zeichen >= '0') && (lc8Zeichen <= '9'); lc8Zeichen = *lpszfStr++)
  7a:	f992 b000 	ldrsb.w	fp, [r2]
  7e:	3201      	adds	r2, #1
  80:	e7ee      	b.n	60 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x60>
          lui8Flags = 1; lc8Zeichen = *lpszfStr++;
  82:	f10a 0203 	add.w	r2, sl, #3
  86:	f99a b002 	ldrsb.w	fp, [sl, #2]
  8a:	2301      	movs	r3, #1
  8c:	9301      	str	r3, [sp, #4]
  8e:	e7e6      	b.n	5e <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x5e>
            lui8Flags = 2; lc8Zeichen = *lpszfStr++;
  90:	f10a 0203 	add.w	r2, sl, #3
  94:	f99a b002 	ldrsb.w	fp, [sl, #2]
  98:	2302      	movs	r3, #2
  9a:	9301      	str	r3, [sp, #4]
  9c:	e7df      	b.n	5e <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x5e>
        if (lc8Zeichen == 'l' || lc8Zeichen == 'L')
  9e:	f1bb 0f6c 	cmp.w	fp, #108	; 0x6c
  a2:	d004      	beq.n	ae <cStrBaseT<unsigned short>::Setf(char const*, ...)+0xae>
  a4:	f1bb 0f4c 	cmp.w	fp, #76	; 0x4c
  a8:	d001      	beq.n	ae <cStrBaseT<unsigned short>::Setf(char const*, ...)+0xae>
  aa:	4692      	mov	sl, r2
  ac:	e007      	b.n	be <cStrBaseT<unsigned short>::Setf(char const*, ...)+0xbe>
          lui8Flags |= 4; lc8Zeichen = *lpszfStr++;
  ae:	9b01      	ldr	r3, [sp, #4]
  b0:	f043 0304 	orr.w	r3, r3, #4
  b4:	9301      	str	r3, [sp, #4]
  b6:	f102 0a01 	add.w	sl, r2, #1
  ba:	f992 b000 	ldrsb.w	fp, [r2]
        if (!lc8Zeichen) break;
  be:	f1bb 0f00 	cmp.w	fp, #0
  c2:	f000 818a 	beq.w	3da <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x3da>
        if (li8Spec >= 'a') li8Spec -= 0x20;
  c6:	f1bb 0f60 	cmp.w	fp, #96	; 0x60
  ca:	dd15      	ble.n	f8 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0xf8>
  cc:	f1ab 0320 	sub.w	r3, fp, #32
  d0:	b25b      	sxtb	r3, r3
        switch (li8Spec)
  d2:	f1a3 0242 	sub.w	r2, r3, #66	; 0x42
  d6:	2a16      	cmp	r2, #22
  d8:	f200 80af 	bhi.w	23a <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x23a>
  dc:	e8df f002 	tbb	[pc, r2]
  e0:	ada797bc 	.word	0xada797bc
  e4:	adadadad 	.word	0xadadadad
  e8:	adadadad 	.word	0xadadadad
  ec:	adadbfad 	.word	0xadadbfad
  f0:	a7ad0ead 	.word	0xa7ad0ead
  f4:	adad      	.short	0xadad
  f6:	aa          	.byte	0xaa
  f7:	00          	.byte	0x00
        li8Spec = lc8Zeichen;
  f8:	465b      	mov	r3, fp
  fa:	e7ea      	b.n	d2 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0xd2>
          lszStr = va_arg(lParList, char8*);
  fc:	9b07      	ldr	r3, [sp, #28]
  fe:	1d1a      	adds	r2, r3, #4
 100:	9207      	str	r2, [sp, #28]
 102:	681a      	ldr	r2, [r3, #0]
    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
 104:	4613      	mov	r3, r2
 106:	f993 1000 	ldrsb.w	r1, [r3]
 10a:	b109      	cbz	r1, 110 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x110>
 10c:	3301      	adds	r3, #1
 10e:	e7fa      	b.n	106 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x106>
    return (lpszTemp - lpszSrc);
 110:	1a9b      	subs	r3, r3, r2
      if (lui32StrLen > cbArrayT<tyCStrT>::muiSize)
 112:	8831      	ldrh	r1, [r6, #0]
 114:	4299      	cmp	r1, r3
 116:	d300      	bcc.n	11a <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x11a>
      lui32StrLen += luiOffset;
 118:	4619      	mov	r1, r3
          li8Pos = CheckStrlen(0, (CSTRT_UINT)cStrT_strlen(lszStr));
 11a:	b24b      	sxtb	r3, r1
          if (!(lui8Flags & 2))
 11c:	9901      	ldr	r1, [sp, #4]
 11e:	f011 0f02 	tst.w	r1, #2
 122:	d00d      	beq.n	140 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x140>
      if (lpszStr != null) // ""-String
 124:	2a00      	cmp	r2, #0
 126:	d061      	beq.n	1ec <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1ec>
        if (*lpszStr != 0) // ""-String
 128:	f992 1000 	ldrsb.w	r1, [r2]
 12c:	2900      	cmp	r1, #0
 12e:	d05d      	beq.n	1ec <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1ec>
        cbArrayExtT<tyCStrT>::Add((uint8*)lpszStr, (CSTRT_UINT)cStrT_strlen(lpszStr));
 130:	4635      	mov	r5, r6
    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
 132:	4611      	mov	r1, r2
 134:	f991 0000 	ldrsb.w	r0, [r1]
 138:	b1a0      	cbz	r0, 164 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x164>
 13a:	3101      	adds	r1, #1
 13c:	e7fa      	b.n	134 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x134>
      lui32StrLen += luiOffset;
 13e:	460b      	mov	r3, r1
            while (li8Pos++ < li16Width) *this += ' ';
 140:	1c59      	adds	r1, r3, #1
 142:	b249      	sxtb	r1, r1
 144:	42a3      	cmp	r3, r4
 146:	da0b      	bge.n	160 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x160>
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
 148:	8830      	ldrh	r0, [r6, #0]
 14a:	88f3      	ldrh	r3, [r6, #6]
      if (luiFreeByteCnt)
 14c:	4298      	cmp	r0, r3
 14e:	d0f6      	beq.n	13e <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x13e>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
 150:	f8d6 0002 	ldr.w	r0, [r6, #2]
 154:	2520      	movs	r5, #32
 156:	54c5      	strb	r5, [r0, r3]
        muiLen++;
 158:	88f3      	ldrh	r3, [r6, #6]
 15a:	3301      	adds	r3, #1
 15c:	80f3      	strh	r3, [r6, #6]
 15e:	e7ee      	b.n	13e <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x13e>
 160:	460b      	mov	r3, r1
 162:	e7df      	b.n	124 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x124>
    return (lpszTemp - lpszSrc);
 164:	1a89      	subs	r1, r1, r2
        cbArrayExtT<tyCStrT>::Add((uint8*)lpszStr, (CSTRT_UINT)cStrT_strlen(lpszStr));
 166:	b289      	uxth	r1, r1
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
 168:	882f      	ldrh	r7, [r5, #0]
 16a:	88e8      	ldrh	r0, [r5, #6]
 16c:	1a3f      	subs	r7, r7, r0
 16e:	b2bf      	uxth	r7, r7
      if (luiFreeByteCnt)
 170:	2f00      	cmp	r7, #0
 172:	d03b      	beq.n	1ec <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1ec>
        if (luiSize > luiFreeByteCnt)
 174:	42b9      	cmp	r1, r7
 176:	d800      	bhi.n	17a <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x17a>
 178:	460f      	mov	r7, r1
        cbArrayExtT_vMemCpy(cbArrayT<tyArrayExtIdxT>::mpu8Data + muiLen, lpaArray, luiSize);
 17a:	f8d5 1002 	ldr.w	r1, [r5, #2]
 17e:	4401      	add	r1, r0
 180:	46bc      	mov	ip, r7
      if (luixSize > 15)
 182:	2f0f      	cmp	r7, #15
 184:	d911      	bls.n	1aa <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1aa>
        luixCount = luixSize >> 4; // 16Byte Blöcke
 186:	0938      	lsrs	r0, r7, #4
        luixSize &= 15;
 188:	f007 0c0f 	and.w	ip, r7, #15
 18c:	469e      	mov	lr, r3
        while (luixCount > 0) // 4 * 4 Byte = 16Byte
 18e:	b158      	cbz	r0, 1a8 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1a8>
          *lpui32Dest++ = *lpui32Source++;
 190:	6813      	ldr	r3, [r2, #0]
 192:	600b      	str	r3, [r1, #0]
          *lpui32Dest++ = *lpui32Source++;
 194:	6853      	ldr	r3, [r2, #4]
 196:	604b      	str	r3, [r1, #4]
          *lpui32Dest++ = *lpui32Source++;
 198:	6893      	ldr	r3, [r2, #8]
 19a:	608b      	str	r3, [r1, #8]
          *lpui32Dest++ = *lpui32Source++;
 19c:	68d3      	ldr	r3, [r2, #12]
 19e:	60cb      	str	r3, [r1, #12]
          luixCount--;
 1a0:	3801      	subs	r0, #1
          *lpui32Dest++ = *lpui32Source++;
 1a2:	3110      	adds	r1, #16
 1a4:	3210      	adds	r2, #16
 1a6:	e7f2      	b.n	18e <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x18e>
 1a8:	4673      	mov	r3, lr
      if (luixSize > 3)
 1aa:	f1bc 0f03 	cmp.w	ip, #3
 1ae:	d90b      	bls.n	1c8 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1c8>
        luixCount = luixSize >> 2; // 4Byte Blöcke
 1b0:	ea4f 009c 	mov.w	r0, ip, lsr #2
        luixSize &= 3;
 1b4:	f00c 0c03 	and.w	ip, ip, #3
 1b8:	469e      	mov	lr, r3
        while (luixCount > 0) // 1 * 4 Byte = 16Byte
 1ba:	b178      	cbz	r0, 1dc <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1dc>
          *lpui32Dest++ = *lpui32Source++;
 1bc:	6813      	ldr	r3, [r2, #0]
 1be:	600b      	str	r3, [r1, #0]
          luixCount--;
 1c0:	3801      	subs	r0, #1
          *lpui32Dest++ = *lpui32Source++;
 1c2:	3104      	adds	r1, #4
 1c4:	3204      	adds	r2, #4
 1c6:	e7f8      	b.n	1ba <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1ba>
 1c8:	4660      	mov	r0, ip
      while (luixSize > 0)
 1ca:	b150      	cbz	r0, 1e2 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1e2>
        *lpui8Dest++ = *lpui8Source++;
 1cc:	f892 c000 	ldrb.w	ip, [r2]
 1d0:	f881 c000 	strb.w	ip, [r1]
        luixSize--;
 1d4:	3801      	subs	r0, #1
        *lpui8Dest++ = *lpui8Source++;
 1d6:	3201      	adds	r2, #1
 1d8:	3101      	adds	r1, #1
 1da:	e7f6      	b.n	1ca <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1ca>
 1dc:	4673      	mov	r3, lr
 1de:	4660      	mov	r0, ip
 1e0:	e7f3      	b.n	1ca <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1ca>
        muiLen += luiSize;
 1e2:	88ea      	ldrh	r2, [r5, #6]
 1e4:	4417      	add	r7, r2
 1e6:	80f7      	strh	r7, [r6, #6]
 1e8:	e000      	b.n	1ec <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1ec>
 1ea:	4613      	mov	r3, r2
          while (li8Pos++ < li16Width) *this += ' ';
 1ec:	1c5a      	adds	r2, r3, #1
 1ee:	b252      	sxtb	r2, r2
 1f0:	42a3      	cmp	r3, r4
 1f2:	f6bf af19 	bge.w	28 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x28>
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
 1f6:	8831      	ldrh	r1, [r6, #0]
 1f8:	88f3      	ldrh	r3, [r6, #6]
      if (luiFreeByteCnt)
 1fa:	4299      	cmp	r1, r3
 1fc:	d0f5      	beq.n	1ea <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1ea>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
 1fe:	f8d6 1002 	ldr.w	r1, [r6, #2]
 202:	2020      	movs	r0, #32
 204:	54c8      	strb	r0, [r1, r3]
        muiLen++;
 206:	88f3      	ldrh	r3, [r6, #6]
 208:	3301      	adds	r3, #1
 20a:	80f3      	strh	r3, [r6, #6]
 20c:	e7ed      	b.n	1ea <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x1ea>
          lc8Zeichen = (int8)va_arg(lParList, int);
 20e:	9b07      	ldr	r3, [sp, #28]
 210:	1d1a      	adds	r2, r3, #4
 212:	9207      	str	r2, [sp, #28]
      cbArrayExtT<tyCStrT>::Add(li8Char);
 214:	7819      	ldrb	r1, [r3, #0]
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
 216:	8832      	ldrh	r2, [r6, #0]
 218:	88f3      	ldrh	r3, [r6, #6]
      if (luiFreeByteCnt)
 21a:	429a      	cmp	r2, r3
 21c:	f43f af04 	beq.w	28 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x28>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
 220:	f8d6 2002 	ldr.w	r2, [r6, #2]
 224:	54d1      	strb	r1, [r2, r3]
        muiLen++;
 226:	88f3      	ldrh	r3, [r6, #6]
 228:	3301      	adds	r3, #1
 22a:	80f3      	strh	r3, [r6, #6]
          continue;
 22c:	e6fc      	b.n	28 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x28>
          lui8Radix = 10; break;
 22e:	220a      	movs	r2, #10
 230:	4610      	mov	r0, r2
 232:	e016      	b.n	262 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x262>
          lui8Radix = 16; break;
 234:	2210      	movs	r2, #16
 236:	4610      	mov	r0, r2
 238:	e013      	b.n	262 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x262>
      cbArrayExtT<tyCStrT>::Add(li8Char);
 23a:	fa5f fb8b 	uxtb.w	fp, fp
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
 23e:	8832      	ldrh	r2, [r6, #0]
 240:	88f3      	ldrh	r3, [r6, #6]
      if (luiFreeByteCnt)
 242:	429a      	cmp	r2, r3
 244:	f43f aef0 	beq.w	28 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x28>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
 248:	f8d6 2002 	ldr.w	r2, [r6, #2]
 24c:	f802 b003 	strb.w	fp, [r2, r3]
        muiLen++;
 250:	88f3      	ldrh	r3, [r6, #6]
 252:	3301      	adds	r3, #1
 254:	80f3      	strh	r3, [r6, #6]
          continue;
 256:	e6e7      	b.n	28 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x28>
          lui8Radix = 2; break;
 258:	2202      	movs	r2, #2
 25a:	4610      	mov	r0, r2
 25c:	e001      	b.n	262 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x262>
          lui8Radix = 8; break;
 25e:	2208      	movs	r2, #8
 260:	4610      	mov	r0, r2
        if (lui8Flags & 4)       lui64Value = va_arg(lParList, long);
 262:	9a01      	ldr	r2, [sp, #4]
 264:	f012 0f04 	tst.w	r2, #4
 268:	d011      	beq.n	28e <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x28e>
 26a:	9a07      	ldr	r2, [sp, #28]
 26c:	1d11      	adds	r1, r2, #4
 26e:	9107      	str	r1, [sp, #28]
 270:	6812      	ldr	r2, [r2, #0]
 272:	4690      	mov	r8, r2
 274:	ea4f 79e2 	mov.w	r9, r2, asr #31
        if (li8Spec == 'D' && (lui64Value & 0x80000000))
 278:	2b44      	cmp	r3, #68	; 0x44
 27a:	d01a      	beq.n	2b2 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x2b2>
        li8Idx = 0;
 27c:	2700      	movs	r7, #0
 27e:	9403      	str	r4, [sp, #12]
 280:	f8cd b008 	str.w	fp, [sp, #8]
 284:	9604      	str	r6, [sp, #16]
 286:	4606      	mov	r6, r0
 288:	f8cd a014 	str.w	sl, [sp, #20]
 28c:	e030      	b.n	2f0 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x2f0>
        else if (li8Spec == 'D') lui64Value = (long)va_arg(lParList, int);
 28e:	2b44      	cmp	r3, #68	; 0x44
 290:	d007      	beq.n	2a2 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x2a2>
        else                     lui64Value = (long)va_arg(lParList, unsigned int);
 292:	9a07      	ldr	r2, [sp, #28]
 294:	1d11      	adds	r1, r2, #4
 296:	9107      	str	r1, [sp, #28]
 298:	6812      	ldr	r2, [r2, #0]
 29a:	4690      	mov	r8, r2
 29c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 2a0:	e7ea      	b.n	278 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x278>
        else if (li8Spec == 'D') lui64Value = (long)va_arg(lParList, int);
 2a2:	9a07      	ldr	r2, [sp, #28]
 2a4:	1d11      	adds	r1, r2, #4
 2a6:	9107      	str	r1, [sp, #28]
 2a8:	6812      	ldr	r2, [r2, #0]
 2aa:	4690      	mov	r8, r2
 2ac:	ea4f 79e2 	mov.w	r9, r2, asr #31
 2b0:	e7e2      	b.n	278 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x278>
        if (li8Spec == 'D' && (lui64Value & 0x80000000))
 2b2:	f008 4200 	and.w	r2, r8, #2147483648	; 0x80000000
 2b6:	2300      	movs	r3, #0
 2b8:	4313      	orrs	r3, r2
 2ba:	d0df      	beq.n	27c <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x27c>
          lui64Value = 0 - lui64Value;
 2bc:	f1d8 0800 	rsbs	r8, r8, #0
 2c0:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
          lui8Flags |= 8;
 2c4:	9b01      	ldr	r3, [sp, #4]
 2c6:	f043 0308 	orr.w	r3, r3, #8
 2ca:	9301      	str	r3, [sp, #4]
 2cc:	e7d6      	b.n	27c <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x27c>
              li8Spec += 0x27;
 2ce:	f105 0427 	add.w	r4, r5, #39	; 0x27
 2d2:	b264      	sxtb	r4, r4
          lszValue[li8Idx++] = li8Spec + '0';
 2d4:	b2fa      	uxtb	r2, r7
 2d6:	1c53      	adds	r3, r2, #1
 2d8:	b25b      	sxtb	r3, r3
 2da:	3430      	adds	r4, #48	; 0x30
 2dc:	a90c      	add	r1, sp, #48	; 0x30
 2de:	440f      	add	r7, r1
 2e0:	f807 4c10 	strb.w	r4, [r7, #-16]
        } while (lui64Value && (li8Idx < (i8)sizeof(lszValue)));
 2e4:	ea58 0109 	orrs.w	r1, r8, r9
 2e8:	d01e      	beq.n	328 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x328>
 2ea:	2b0f      	cmp	r3, #15
 2ec:	dc1c      	bgt.n	328 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x328>
          lszValue[li8Idx++] = li8Spec + '0';
 2ee:	461f      	mov	r7, r3
          li8Spec = (char)(lui64Value % lui8Radix);
 2f0:	fa5f fa86 	uxtb.w	sl, r6
 2f4:	f04f 0b00 	mov.w	fp, #0
 2f8:	4652      	mov	r2, sl
 2fa:	465b      	mov	r3, fp
 2fc:	4640      	mov	r0, r8
 2fe:	4649      	mov	r1, r9
 300:	f7ff fffe 	bl	0 <__aeabi_uldivmod>	300: R_ARM_THM_CALL	__aeabi_uldivmod
 304:	4615      	mov	r5, r2
 306:	b254      	sxtb	r4, r2
          lui64Value /= lui8Radix;
 308:	4652      	mov	r2, sl
 30a:	465b      	mov	r3, fp
 30c:	4640      	mov	r0, r8
 30e:	4649      	mov	r1, r9
 310:	f7ff fffe 	bl	0 <__aeabi_uldivmod>	310: R_ARM_THM_CALL	__aeabi_uldivmod
 314:	4680      	mov	r8, r0
 316:	4689      	mov	r9, r1
          if (li8Spec > 9)
 318:	2c09      	cmp	r4, #9
 31a:	dddb      	ble.n	2d4 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x2d4>
            if (lc8Zeichen == 'x')
 31c:	9b02      	ldr	r3, [sp, #8]
 31e:	2b78      	cmp	r3, #120	; 0x78
 320:	d0d5      	beq.n	2ce <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x2ce>
              li8Spec += 0x07;
 322:	1dec      	adds	r4, r5, #7
 324:	b264      	sxtb	r4, r4
 326:	e7d5      	b.n	2d4 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x2d4>
 328:	9c03      	ldr	r4, [sp, #12]
 32a:	9e04      	ldr	r6, [sp, #16]
 32c:	f8dd a014 	ldr.w	sl, [sp, #20]
        if (lui8Flags & 8)
 330:	9901      	ldr	r1, [sp, #4]
 332:	f011 0f08 	tst.w	r1, #8
 336:	d006      	beq.n	346 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x346>
          lszValue[li8Idx++] = '-';
 338:	3202      	adds	r2, #2
 33a:	a90c      	add	r1, sp, #48	; 0x30
 33c:	440b      	add	r3, r1
 33e:	212d      	movs	r1, #45	; 0x2d
 340:	f803 1c10 	strb.w	r1, [r3, #-16]
 344:	b253      	sxtb	r3, r2
        lszValue[li8Idx] = 0;
 346:	2100      	movs	r1, #0
 348:	aa0c      	add	r2, sp, #48	; 0x30
 34a:	441a      	add	r2, r3
 34c:	f802 1c10 	strb.w	r1, [r2, #-16]
        if (lui8Flags & 1)
 350:	9a01      	ldr	r2, [sp, #4]
 352:	f012 0f01 	tst.w	r2, #1
 356:	d006      	beq.n	366 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x366>
          lc8Zeichen = '0';
 358:	2730      	movs	r7, #48	; 0x30
        if (!(lui8Flags & 2))
 35a:	9a01      	ldr	r2, [sp, #4]
 35c:	f012 0f02 	tst.w	r2, #2
 360:	d014      	beq.n	38c <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x38c>
        li8Pos = li8Idx;
 362:	461a      	mov	r2, r3
 364:	e01b      	b.n	39e <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x39e>
          lc8Zeichen = ' ';
 366:	2720      	movs	r7, #32
 368:	e7f7      	b.n	35a <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x35a>
 36a:	4611      	mov	r1, r2
          while (li8Pos++ < li16Width) *this += lc8Zeichen;
 36c:	1c4a      	adds	r2, r1, #1
 36e:	b252      	sxtb	r2, r2
 370:	42a1      	cmp	r1, r4
 372:	da14      	bge.n	39e <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x39e>
      cbArrayExtT<tyCStrT>::Add(li8Char);
 374:	b2fd      	uxtb	r5, r7
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
 376:	8830      	ldrh	r0, [r6, #0]
 378:	88f1      	ldrh	r1, [r6, #6]
      if (luiFreeByteCnt)
 37a:	4288      	cmp	r0, r1
 37c:	d0f5      	beq.n	36a <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x36a>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
 37e:	f8d6 0002 	ldr.w	r0, [r6, #2]
 382:	5445      	strb	r5, [r0, r1]
        muiLen++;
 384:	88f1      	ldrh	r1, [r6, #6]
 386:	3101      	adds	r1, #1
 388:	80f1      	strh	r1, [r6, #6]
 38a:	e7ee      	b.n	36a <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x36a>
        li8Pos = li8Idx;
 38c:	4619      	mov	r1, r3
 38e:	e7ed      	b.n	36c <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x36c>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
 390:	f8d6 5002 	ldr.w	r5, [r6, #2]
 394:	5429      	strb	r1, [r5, r0]
        muiLen++;
 396:	88f1      	ldrh	r1, [r6, #6]
 398:	3101      	adds	r1, #1
 39a:	80f1      	strh	r1, [r6, #6]
        do
 39c:	b163      	cbz	r3, 3b8 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x3b8>
          *this += lszValue[--li8Idx];
 39e:	3b01      	subs	r3, #1
 3a0:	b25b      	sxtb	r3, r3
 3a2:	a90c      	add	r1, sp, #48	; 0x30
 3a4:	4419      	add	r1, r3
 3a6:	f911 1c10 	ldrsb.w	r1, [r1, #-16]
      cbArrayExtT<tyCStrT>::Add(li8Char);
 3aa:	b2c9      	uxtb	r1, r1
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
 3ac:	8835      	ldrh	r5, [r6, #0]
 3ae:	88f0      	ldrh	r0, [r6, #6]
      if (luiFreeByteCnt)
 3b0:	4285      	cmp	r5, r0
 3b2:	d1ed      	bne.n	390 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x390>
 3b4:	e7f2      	b.n	39c <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x39c>
        li8Pos = li8Idx;
 3b6:	461a      	mov	r2, r3
        while (li8Pos++ < li16Width) *this += ' ';
 3b8:	1c53      	adds	r3, r2, #1
 3ba:	b25b      	sxtb	r3, r3
 3bc:	42a2      	cmp	r2, r4
 3be:	f6bf ae33 	bge.w	28 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x28>
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
 3c2:	8831      	ldrh	r1, [r6, #0]
 3c4:	88f2      	ldrh	r2, [r6, #6]
      if (luiFreeByteCnt)
 3c6:	4291      	cmp	r1, r2
 3c8:	d0f5      	beq.n	3b6 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x3b6>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
 3ca:	f8d6 1002 	ldr.w	r1, [r6, #2]
 3ce:	2020      	movs	r0, #32
 3d0:	5488      	strb	r0, [r1, r2]
        muiLen++;
 3d2:	88f2      	ldrh	r2, [r6, #6]
 3d4:	3201      	adds	r2, #1
 3d6:	80f2      	strh	r2, [r6, #6]
 3d8:	e7ed      	b.n	3b6 <cStrBaseT<unsigned short>::Setf(char const*, ...)+0x3b6>
    };
 3da:	4630      	mov	r0, r6
 3dc:	b00c      	add	sp, #48	; 0x30
 3de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 3e2:	b003      	add	sp, #12
 3e4:	4770      	bx	lr

Disassembly of section .text.main:

00000000 <main>:
{
       0:	b5f0      	push	{r4, r5, r6, r7, lr}
       2:	ed2d 8b0a 	vpush	{d8-d12}
       6:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
  UNUSED(lu32Value3);
       a:	4bad      	ldr	r3, [pc, #692]	; (2c0 <main+0x2c0>)
       c:	681b      	ldr	r3, [r3, #0]
  UNUSED(lfValue3);
       e:	4bad      	ldr	r3, [pc, #692]	; (2c4 <main+0x2c4>)
      10:	681b      	ldr	r3, [r3, #0]
  float MyMatA[4][4] = { {1.0f,     2.0f,     3.0f,    4.0f},
      12:	4cad      	ldr	r4, [pc, #692]	; (2c8 <main+0x2c8>)
      14:	ad8a      	add	r5, sp, #552	; 0x228
      16:	f104 0640 	add.w	r6, r4, #64	; 0x40
      1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
      1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
      1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
      20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
      22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
      24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
      26:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
      2a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  float MyMatB[4][4] = { {1.0f,     2.0f,     3.0f,    4.0f},
      2e:	ad7a      	add	r5, sp, #488	; 0x1e8
      30:	3440      	adds	r4, #64	; 0x40
      32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
      36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
      3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
      3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
      42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  cMatrix_4x4           lcMat1(false);
      46:	2100      	movs	r1, #0
      48:	a864      	add	r0, sp, #400	; 0x190
      4a:	f7ff fffe 	bl	0 <main>	4a: R_ARM_THM_CALL	cMatrix_4x4::cMatrix_4x4(bool)
  cMatrix_4x4           lcMat2(false);
      4e:	2100      	movs	r1, #0
      50:	a84e      	add	r0, sp, #312	; 0x138
      52:	f7ff fffe 	bl	0 <main>	52: R_ARM_THM_CALL	cMatrix_4x4::cMatrix_4x4(bool)
  cMatrix_4x4           lcMat3(false);
      56:	2100      	movs	r1, #0
      58:	a838      	add	r0, sp, #224	; 0xe0
      5a:	f7ff fffe 	bl	0 <main>	5a: R_ARM_THM_CALL	cMatrix_4x4::cMatrix_4x4(bool)
    for (c = 0; c < 4; c++)
      5e:	2200      	movs	r2, #0
      60:	e001      	b.n	66 <main+0x66>
      62:	3201      	adds	r2, #1
      64:	b2d2      	uxtb	r2, r2
      66:	2a03      	cmp	r2, #3
      68:	d811      	bhi.n	8e <main+0x8e>
      for (r = 0; r < 4; r++)
      6a:	2300      	movs	r3, #0
      6c:	2b03      	cmp	r3, #3
      6e:	d8f8      	bhi.n	62 <main+0x62>
        m[c][r] = lMatrix[c][r];
      70:	a98a      	add	r1, sp, #552	; 0x228
      72:	eb01 1102 	add.w	r1, r1, r2, lsl #4
      76:	eb01 0183 	add.w	r1, r1, r3, lsl #2
      7a:	6808      	ldr	r0, [r1, #0]
      7c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
      80:	ac64      	add	r4, sp, #400	; 0x190
      82:	eb04 0181 	add.w	r1, r4, r1, lsl #2
      86:	6008      	str	r0, [r1, #0]
      for (r = 0; r < 4; r++)
      88:	3301      	adds	r3, #1
      8a:	b2db      	uxtb	r3, r3
      8c:	e7ee      	b.n	6c <main+0x6c>
    for (c = 0; c < 4; c++)
      8e:	2200      	movs	r2, #0
      90:	e001      	b.n	96 <main+0x96>
      92:	3201      	adds	r2, #1
      94:	b2d2      	uxtb	r2, r2
      96:	2a03      	cmp	r2, #3
      98:	d811      	bhi.n	be <main+0xbe>
      for (r = 0; r < 4; r++)
      9a:	2300      	movs	r3, #0
      9c:	2b03      	cmp	r3, #3
      9e:	d8f8      	bhi.n	92 <main+0x92>
        m[c][r] = lMatrix[c][r];
      a0:	a97a      	add	r1, sp, #488	; 0x1e8
      a2:	eb01 1102 	add.w	r1, r1, r2, lsl #4
      a6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
      aa:	6808      	ldr	r0, [r1, #0]
      ac:	eb03 0182 	add.w	r1, r3, r2, lsl #2
      b0:	ac4e      	add	r4, sp, #312	; 0x138
      b2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
      b6:	6008      	str	r0, [r1, #0]
      for (r = 0; r < 4; r++)
      b8:	3301      	adds	r3, #1
      ba:	b2db      	uxtb	r3, r3
      bc:	e7ee      	b.n	9c <main+0x9c>
  float MyVec[4] = { 1.0f,   2.0f,   3.0f,  4.0f };
      be:	ac34      	add	r4, sp, #208	; 0xd0
      c0:	4b82      	ldr	r3, [pc, #520]	; (2cc <main+0x2cc>)
      c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
      c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  cVector4f             lcVec1;
      c8:	a826      	add	r0, sp, #152	; 0x98
      ca:	f7ff fffe 	bl	0 <main>	ca: R_ARM_THM_CALL	cVector4f::cVector4f()
  cVector4f             lcVec2;
      ce:	a818      	add	r0, sp, #96	; 0x60
      d0:	f7ff fffe 	bl	0 <main>	d0: R_ARM_THM_CALL	cVector4f::cVector4f()
    for (c = 0; c < 4; c++)
      d4:	2300      	movs	r3, #0
      d6:	2b03      	cmp	r3, #3
      d8:	d80b      	bhi.n	f2 <main+0xf2>
      n[c] = lVec[c];
      da:	0099      	lsls	r1, r3, #2
      dc:	aaa6      	add	r2, sp, #664	; 0x298
      de:	440a      	add	r2, r1
      e0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
      e4:	6810      	ldr	r0, [r2, #0]
      e6:	aa26      	add	r2, sp, #152	; 0x98
      e8:	440a      	add	r2, r1
      ea:	6010      	str	r0, [r2, #0]
    for (c = 0; c < 4; c++)
      ec:	3301      	adds	r3, #1
      ee:	b2db      	uxtb	r3, r3
      f0:	e7f1      	b.n	d6 <main+0xd6>
      f2:	2300      	movs	r3, #0
      f4:	2b03      	cmp	r3, #3
      f6:	d80b      	bhi.n	110 <main+0x110>
      n[c] = lVec[c];
      f8:	0099      	lsls	r1, r3, #2
      fa:	aaa6      	add	r2, sp, #664	; 0x298
      fc:	440a      	add	r2, r1
      fe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
     102:	6810      	ldr	r0, [r2, #0]
     104:	aa18      	add	r2, sp, #96	; 0x60
     106:	440a      	add	r2, r1
     108:	6010      	str	r0, [r2, #0]
    for (c = 0; c < 4; c++)
     10a:	3301      	adds	r3, #1
     10c:	b2db      	uxtb	r3, r3
     10e:	e7f1      	b.n	f4 <main+0xf4>
      mpu8Data = null;
     110:	2300      	movs	r3, #0
     112:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
     116:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
      muiSize  = 0;
     11a:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
      muiLen  = 0;
     11e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
          (cbArrayT<tyCStrT>::muiSize < luiStrLen))
        {
          this->~cStrDynT();
        }

        if (cbArrayT<tyCStrT>::mpu8Data == null)
     122:	f8dd 305a 	ldr.w	r3, [sp, #90]	; 0x5a
     126:	b19b      	cbz	r3, 2a <main+0x2a>
  MAIN_vInitSystem();
     128:	f7ff fffe 	bl	0 <main>	128: R_ARM_THM_CALL	MAIN_vInitSystem()
  mc16GScreen1.vFill(0x0);
     12c:	2100      	movs	r1, #0
     12e:	4868      	ldr	r0, [pc, #416]	; (2d0 <main+0x2d0>)
     130:	f7ff fffe 	bl	0 <main>	130: R_ARM_THM_CALL	cScreen_Bpp16_5R6G5B::vFill(unsigned long)
  cRFont_Res8b_Bpp1_1G_Full.mui32Col = mc16GScreen1.u32GetCol(0xFFFFFF);
     134:	4b67      	ldr	r3, [pc, #412]	; (2d4 <main+0x2d4>)
     136:	f64f 72ff 	movw	r2, #65535	; 0xffff
     13a:	619a      	str	r2, [r3, #24]
      mstStartPos.x = lixDestX;
     13c:	2200      	movs	r2, #0
     13e:	849a      	strh	r2, [r3, #36]	; 0x24
      mstStartPos.y = lixDestY;
     140:	220a      	movs	r2, #10
     142:	84da      	strh	r2, [r3, #38]	; 0x26
    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
     144:	4b64      	ldr	r3, [pc, #400]	; (2d8 <main+0x2d8>)
     146:	f993 2000 	ldrsb.w	r2, [r3]
     14a:	b17a      	cbz	r2, 16c <main+0x16c>
     14c:	3301      	adds	r3, #1
     14e:	e7fa      	b.n	146 <main+0x146>
        {
          // Auf vielfaches von 4 aufrunden
          luiStrLen = (luiStrLen + 3) & (~3);

          cbArrayT<tyCStrT>::mpu8Data = (uint8*)CSTRT_pui8GETMEM(luiStrLen);
     150:	2040      	movs	r0, #64	; 0x40
     152:	f7ff fffe 	bl	0 <operator new[](unsigned int)>	152: R_ARM_THM_CALL	operator new[](unsigned int)
     156:	f8cd 005a 	str.w	r0, [sp, #90]	; 0x5a

          if (cbArrayT<tyCStrT>::mpu8Data != null)
     15a:	2800      	cmp	r0, #0
     15c:	d0e4      	beq.n	128 <main+0x128>
          {
            // Speicher konnte angefordert werden
            cbArrayT<tyCStrT>::muiSize = luiStrLen;
     15e:	2340      	movs	r3, #64	; 0x40
     160:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            cbArrayExtT<tyCStrT>::muiLen  = 0;
     164:	2300      	movs	r3, #0
     166:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
     16a:	e7dd      	b.n	128 <main+0x128>
    return (lpszTemp - lpszSrc);
     16c:	4a5a      	ldr	r2, [pc, #360]	; (2d8 <main+0x2d8>)
     16e:	1a9b      	subs	r3, r3, r2
      cbArrayExtT<tyCStrT>::muiLen = (CSTRT_UINT)cStrT_strlen(lszStr);
     170:	b29b      	uxth	r3, r3
     172:	4858      	ldr	r0, [pc, #352]	; (2d4 <main+0x2d4>)
     174:	8443      	strh	r3, [r0, #34]	; 0x22
      cbArrayT<tyCStrT>::muiSize = cbArrayExtT<tyCStrT>::muiLen;
     176:	8383      	strh	r3, [r0, #28]
      cbArrayT<tyCStrT>::mpu8Data = (uint8*)lszStr;
     178:	f8c0 201e 	str.w	r2, [r0, #30]
      return i8PutString(lpcScr, lbSizeOnly);
     17c:	6803      	ldr	r3, [r0, #0]
     17e:	681b      	ldr	r3, [r3, #0]
     180:	2200      	movs	r2, #0
     182:	4953      	ldr	r1, [pc, #332]	; (2d0 <main+0x2d0>)
     184:	4798      	blx	r3
     186:	909a      	str	r0, [sp, #616]	; 0x268
  ILI9341_Show(&mc16GBm);
     188:	4854      	ldr	r0, [pc, #336]	; (2dc <main+0x2dc>)
     18a:	f7ff fffe 	bl	0 <ILI9341_Show>	18a: R_ARM_THM_CALL	ILI9341_Show
    mu32LastTimerValue = u32GetTimer();
     18e:	f7ff fffe 	bl	0 <u32GetTimer>	18e: R_ARM_THM_CALL	u32GetTimer
     192:	4b53      	ldr	r3, [pc, #332]	; (2e0 <main+0x2e0>)
     194:	60d8      	str	r0, [r3, #12]
  for (lu8t = 0; lu8t < 100; lu8t++)
     196:	2000      	movs	r0, #0
     198:	e001      	b.n	19e <main+0x19e>
     19a:	3001      	adds	r0, #1
     19c:	b2c0      	uxtb	r0, r0
     19e:	2863      	cmp	r0, #99	; 0x63
     1a0:	d815      	bhi.n	1ce <main+0x1ce>
      lui32Value[0] = lui8Value;
     1a2:	2355      	movs	r3, #85	; 0x55
     1a4:	f88d 3000 	strb.w	r3, [sp]
      lui32Value[1] = lui8Value;
     1a8:	f88d 3001 	strb.w	r3, [sp, #1]
      lui32Value[2] = lui8Value;
     1ac:	f88d 3002 	strb.w	r3, [sp, #2]
      lui32Value[3] = lui8Value;
     1b0:	f88d 3003 	strb.w	r3, [sp, #3]
        luixCount = luixSize >> 4; // 16Byte Blöcke
     1b4:	f240 2171 	movw	r1, #625	; 0x271
      uint32* lpui32Dest = (uint32*)lpui8Dest;
     1b8:	4b4a      	ldr	r3, [pc, #296]	; (2e4 <main+0x2e4>)
        while (luixCount > 0) // 4 * 4 Byte = 16Byte
     1ba:	2900      	cmp	r1, #0
     1bc:	d0ed      	beq.n	19a <main+0x19a>
          *lpui32Dest++ = *(uint32*)lui32Value;
     1be:	9a00      	ldr	r2, [sp, #0]
     1c0:	601a      	str	r2, [r3, #0]
          *lpui32Dest++ = *(uint32*)lui32Value;
     1c2:	605a      	str	r2, [r3, #4]
          *lpui32Dest++ = *(uint32*)lui32Value;
     1c4:	609a      	str	r2, [r3, #8]
          *lpui32Dest++ = *(uint32*)lui32Value;
     1c6:	60da      	str	r2, [r3, #12]
          luixCount--;
     1c8:	3901      	subs	r1, #1
          *lpui32Dest++ = *(uint32*)lui32Value;
     1ca:	3310      	adds	r3, #16
     1cc:	e7f5      	b.n	1ba <main+0x1ba>
  lcStrOutput.Setf("ExtMem Test: %s us", mcDiffTimer.toString());
     1ce:	4844      	ldr	r0, [pc, #272]	; (2e0 <main+0x2e0>)
     1d0:	f7ff fffe 	bl	0 <main>	1d0: R_ARM_THM_CALL	cDiffTimer::toString()
     1d4:	4602      	mov	r2, r0
     1d6:	4944      	ldr	r1, [pc, #272]	; (2e8 <main+0x2e8>)
     1d8:	a816      	add	r0, sp, #88	; 0x58
     1da:	f7ff fffe 	bl	0 <main>	1da: R_ARM_THM_CALL	cStrBaseT<unsigned short>::Setf(char const*, ...)
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
     1de:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
     1e2:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
      if (luiFreeByteCnt)
     1e6:	429a      	cmp	r2, r3
     1e8:	d008      	beq.n	1fc <main+0x1fc>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
     1ea:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
     1ee:	2100      	movs	r1, #0
     1f0:	54d1      	strb	r1, [r2, r3]
        muiLen++;
     1f2:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
     1f6:	3301      	adds	r3, #1
     1f8:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
      return (char8*)cbArrayT<tyCStrT>::mpu8Data;
     1fc:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
      mstStartPos.x = lixDestX;
     200:	4b34      	ldr	r3, [pc, #208]	; (2d4 <main+0x2d4>)
     202:	2100      	movs	r1, #0
     204:	8499      	strh	r1, [r3, #36]	; 0x24
      mstStartPos.y = lixDestY;
     206:	211e      	movs	r1, #30
     208:	84d9      	strh	r1, [r3, #38]	; 0x26
    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
     20a:	4613      	mov	r3, r2
     20c:	f993 1000 	ldrsb.w	r1, [r3]
     210:	b109      	cbz	r1, 216 <main+0x216>
     212:	3301      	adds	r3, #1
     214:	e7fa      	b.n	20c <main+0x20c>
    return (lpszTemp - lpszSrc);
     216:	1a9b      	subs	r3, r3, r2
      cbArrayExtT<tyCStrT>::muiLen = (CSTRT_UINT)cStrT_strlen(lszStr);
     218:	b29b      	uxth	r3, r3
     21a:	482e      	ldr	r0, [pc, #184]	; (2d4 <main+0x2d4>)
     21c:	8443      	strh	r3, [r0, #34]	; 0x22
      cbArrayT<tyCStrT>::muiSize = cbArrayExtT<tyCStrT>::muiLen;
     21e:	8383      	strh	r3, [r0, #28]
      cbArrayT<tyCStrT>::mpu8Data = (uint8*)lszStr;
     220:	f8c0 201e 	str.w	r2, [r0, #30]
      return i8PutString(lpcScr, lbSizeOnly);
     224:	6803      	ldr	r3, [r0, #0]
     226:	681b      	ldr	r3, [r3, #0]
     228:	2200      	movs	r2, #0
     22a:	4929      	ldr	r1, [pc, #164]	; (2d0 <main+0x2d0>)
     22c:	4798      	blx	r3
     22e:	909b      	str	r0, [sp, #620]	; 0x26c
  ILI9341_Show(&mc16GBm);
     230:	482a      	ldr	r0, [pc, #168]	; (2dc <main+0x2dc>)
     232:	f7ff fffe 	bl	0 <ILI9341_Show>	232: R_ARM_THM_CALL	ILI9341_Show
     236:	f7ff fffe 	bl	0 <u32GetTimer>	236: R_ARM_THM_CALL	u32GetTimer
     23a:	4b29      	ldr	r3, [pc, #164]	; (2e0 <main+0x2e0>)
     23c:	60d8      	str	r0, [r3, #12]
  for (lu8t = 0; lu8t < 100; lu8t++)
     23e:	2000      	movs	r0, #0
     240:	e001      	b.n	246 <main+0x246>
     242:	3001      	adds	r0, #1
     244:	b2c0      	uxtb	r0, r0
     246:	2863      	cmp	r0, #99	; 0x63
     248:	d815      	bhi.n	276 <main+0x276>
      lui32Value[0] = lui8Value;
     24a:	2355      	movs	r3, #85	; 0x55
     24c:	f88d 3000 	strb.w	r3, [sp]
      lui32Value[1] = lui8Value;
     250:	f88d 3001 	strb.w	r3, [sp, #1]
      lui32Value[2] = lui8Value;
     254:	f88d 3002 	strb.w	r3, [sp, #2]
      lui32Value[3] = lui8Value;
     258:	f88d 3003 	strb.w	r3, [sp, #3]
        luixCount = luixSize >> 4; // 16Byte Blöcke
     25c:	f240 2171 	movw	r1, #625	; 0x271
      uint32* lpui32Dest = (uint32*)lpui8Dest;
     260:	4b22      	ldr	r3, [pc, #136]	; (2ec <main+0x2ec>)
        while (luixCount > 0) // 4 * 4 Byte = 16Byte
     262:	2900      	cmp	r1, #0
     264:	d0ed      	beq.n	242 <main+0x242>
          *lpui32Dest++ = *(uint32*)lui32Value;
     266:	9a00      	ldr	r2, [sp, #0]
     268:	601a      	str	r2, [r3, #0]
          *lpui32Dest++ = *(uint32*)lui32Value;
     26a:	605a      	str	r2, [r3, #4]
          *lpui32Dest++ = *(uint32*)lui32Value;
     26c:	609a      	str	r2, [r3, #8]
          *lpui32Dest++ = *(uint32*)lui32Value;
     26e:	60da      	str	r2, [r3, #12]
          luixCount--;
     270:	3901      	subs	r1, #1
          *lpui32Dest++ = *(uint32*)lui32Value;
     272:	3310      	adds	r3, #16
     274:	e7f5      	b.n	262 <main+0x262>
  lcStrOutput.Setf("IntMem Test: %s us", mcDiffTimer.toString());
     276:	481a      	ldr	r0, [pc, #104]	; (2e0 <main+0x2e0>)
     278:	f7ff fffe 	bl	0 <main>	278: R_ARM_THM_CALL	cDiffTimer::toString()
     27c:	4602      	mov	r2, r0
     27e:	491c      	ldr	r1, [pc, #112]	; (2f0 <main+0x2f0>)
     280:	a816      	add	r0, sp, #88	; 0x58
     282:	f7ff fffe 	bl	0 <main>	282: R_ARM_THM_CALL	cStrBaseT<unsigned short>::Setf(char const*, ...)
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
     286:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
     28a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
      if (luiFreeByteCnt)
     28e:	429a      	cmp	r2, r3
     290:	d008      	beq.n	2a4 <main+0x2a4>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
     292:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
     296:	2100      	movs	r1, #0
     298:	54d1      	strb	r1, [r2, r3]
        muiLen++;
     29a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
     29e:	3301      	adds	r3, #1
     2a0:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
      return (char8*)cbArrayT<tyCStrT>::mpu8Data;
     2a4:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
      mstStartPos.x = lixDestX;
     2a8:	4b0a      	ldr	r3, [pc, #40]	; (2d4 <main+0x2d4>)
     2aa:	2100      	movs	r1, #0
     2ac:	8499      	strh	r1, [r3, #36]	; 0x24
      mstStartPos.y = lixDestY;
     2ae:	2128      	movs	r1, #40	; 0x28
     2b0:	84d9      	strh	r1, [r3, #38]	; 0x26
    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
     2b2:	4613      	mov	r3, r2
     2b4:	f993 1000 	ldrsb.w	r1, [r3]
     2b8:	b1e1      	cbz	r1, 2f4 <main+0x2f4>
     2ba:	3301      	adds	r3, #1
     2bc:	e7fa      	b.n	2b4 <main+0x2b4>
     2be:	bf00      	nop
	...
	2c0: R_ARM_ABS32	.data._ZZ4mainE10lu32Value3
	2c4: R_ARM_ABS32	.data._ZZ4mainE8lfValue3
	2c8: R_ARM_ABS32	.rodata
     2cc:	00000080 	.word	0x00000080	2cc: R_ARM_ABS32	.rodata
	...
	2d0: R_ARM_ABS32	.bss.mc16GScreen1
	2d4: R_ARM_ABS32	.bss.cRFont_Res8b_Bpp1_1G_Full
	2d8: R_ARM_ABS32	.rodata.main.str1.4
	2dc: R_ARM_ABS32	.bss.mc16GBm
	2e0: R_ARM_ABS32	.bss.mcDiffTimer
	2e4: R_ARM_ABS32	mExtMemory
     2e8:	00000008 	.word	0x00000008	2e8: R_ARM_ABS32	.rodata.main.str1.4
     2ec:	00000000 	.word	0x00000000	2ec: R_ARM_ABS32	mIntMemory
     2f0:	0000001c 	.word	0x0000001c	2f0: R_ARM_ABS32	.rodata.main.str1.4
    return (lpszTemp - lpszSrc);
     2f4:	1a9b      	subs	r3, r3, r2
      cbArrayExtT<tyCStrT>::muiLen = (CSTRT_UINT)cStrT_strlen(lszStr);
     2f6:	b29b      	uxth	r3, r3
     2f8:	489a      	ldr	r0, [pc, #616]	; (564 <main+0x564>)
     2fa:	8443      	strh	r3, [r0, #34]	; 0x22
      cbArrayT<tyCStrT>::muiSize = cbArrayExtT<tyCStrT>::muiLen;
     2fc:	8383      	strh	r3, [r0, #28]
      cbArrayT<tyCStrT>::mpu8Data = (uint8*)lszStr;
     2fe:	f8c0 201e 	str.w	r2, [r0, #30]
      return i8PutString(lpcScr, lbSizeOnly);
     302:	6803      	ldr	r3, [r0, #0]
     304:	681b      	ldr	r3, [r3, #0]
     306:	2200      	movs	r2, #0
     308:	4997      	ldr	r1, [pc, #604]	; (568 <main+0x568>)
     30a:	4798      	blx	r3
     30c:	909c      	str	r0, [sp, #624]	; 0x270
  ILI9341_Show(&mc16GBm);
     30e:	4897      	ldr	r0, [pc, #604]	; (56c <main+0x56c>)
     310:	f7ff fffe 	bl	0 <ILI9341_Show>	310: R_ARM_THM_CALL	ILI9341_Show
  asm("nop"); // for breakpoint
     314:	bf00      	nop
  asm("nop"); // for breakpoint
     316:	bf00      	nop
     318:	f7ff fffe 	bl	0 <u32GetTimer>	318: R_ARM_THM_CALL	u32GetTimer
     31c:	4b94      	ldr	r3, [pc, #592]	; (570 <main+0x570>)
     31e:	60d8      	str	r0, [r3, #12]
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
     320:	2300      	movs	r3, #0
     322:	f242 720f 	movw	r2, #9999	; 0x270f
     326:	4293      	cmp	r3, r2
     328:	d80b      	bhi.n	342 <main+0x342>
    MyTest; MyTest; MyTest; MyTest; MyTest;
     32a:	bf00      	nop
     32c:	bf00      	nop
     32e:	bf00      	nop
     330:	bf00      	nop
     332:	bf00      	nop
    MyTest; MyTest; MyTest; MyTest; MyTest;
     334:	bf00      	nop
     336:	bf00      	nop
     338:	bf00      	nop
     33a:	bf00      	nop
     33c:	bf00      	nop
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
     33e:	3301      	adds	r3, #1
     340:	e7ef      	b.n	322 <main+0x322>
  lcStrOutput.Setf("Just NOP Test: %s us", mcDiffTimer.toString());
     342:	488b      	ldr	r0, [pc, #556]	; (570 <main+0x570>)
     344:	f7ff fffe 	bl	0 <main>	344: R_ARM_THM_CALL	cDiffTimer::toString()
     348:	4602      	mov	r2, r0
     34a:	498a      	ldr	r1, [pc, #552]	; (574 <main+0x574>)
     34c:	a816      	add	r0, sp, #88	; 0x58
     34e:	f7ff fffe 	bl	0 <main>	34e: R_ARM_THM_CALL	cStrBaseT<unsigned short>::Setf(char const*, ...)
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
     352:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
     356:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
      if (luiFreeByteCnt)
     35a:	429a      	cmp	r2, r3
     35c:	d008      	beq.n	370 <main+0x370>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
     35e:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
     362:	2100      	movs	r1, #0
     364:	54d1      	strb	r1, [r2, r3]
        muiLen++;
     366:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
     36a:	3301      	adds	r3, #1
     36c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
      return (char8*)cbArrayT<tyCStrT>::mpu8Data;
     370:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
      mstStartPos.x = lixDestX;
     374:	4b7b      	ldr	r3, [pc, #492]	; (564 <main+0x564>)
     376:	2100      	movs	r1, #0
     378:	8499      	strh	r1, [r3, #36]	; 0x24
      mstStartPos.y = lixDestY;
     37a:	2132      	movs	r1, #50	; 0x32
     37c:	84d9      	strh	r1, [r3, #38]	; 0x26
    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
     37e:	4613      	mov	r3, r2
     380:	f993 1000 	ldrsb.w	r1, [r3]
     384:	b109      	cbz	r1, 38a <main+0x38a>
     386:	3301      	adds	r3, #1
     388:	e7fa      	b.n	380 <main+0x380>
    return (lpszTemp - lpszSrc);
     38a:	1a9b      	subs	r3, r3, r2
      cbArrayExtT<tyCStrT>::muiLen = (CSTRT_UINT)cStrT_strlen(lszStr);
     38c:	b29b      	uxth	r3, r3
     38e:	4875      	ldr	r0, [pc, #468]	; (564 <main+0x564>)
     390:	8443      	strh	r3, [r0, #34]	; 0x22
      cbArrayT<tyCStrT>::muiSize = cbArrayExtT<tyCStrT>::muiLen;
     392:	8383      	strh	r3, [r0, #28]
      cbArrayT<tyCStrT>::mpu8Data = (uint8*)lszStr;
     394:	f8c0 201e 	str.w	r2, [r0, #30]
      return i8PutString(lpcScr, lbSizeOnly);
     398:	6803      	ldr	r3, [r0, #0]
     39a:	681b      	ldr	r3, [r3, #0]
     39c:	2200      	movs	r2, #0
     39e:	4972      	ldr	r1, [pc, #456]	; (568 <main+0x568>)
     3a0:	4798      	blx	r3
     3a2:	909d      	str	r0, [sp, #628]	; 0x274
  ILI9341_Show(&mc16GBm);
     3a4:	4871      	ldr	r0, [pc, #452]	; (56c <main+0x56c>)
     3a6:	f7ff fffe 	bl	0 <ILI9341_Show>	3a6: R_ARM_THM_CALL	ILI9341_Show
  asm("nop"); // for breakpoint
     3aa:	bf00      	nop
  asm("nop"); // for breakpoint
     3ac:	bf00      	nop
     3ae:	f7ff fffe 	bl	0 <u32GetTimer>	3ae: R_ARM_THM_CALL	u32GetTimer
     3b2:	4b6f      	ldr	r3, [pc, #444]	; (570 <main+0x570>)
     3b4:	60d8      	str	r0, [r3, #12]
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
     3b6:	2000      	movs	r0, #0
     3b8:	f242 730f 	movw	r3, #9999	; 0x270f
     3bc:	4298      	cmp	r0, r3
     3be:	d835      	bhi.n	42c <main+0x42c>
    MyTest; MyTest; MyTest; MyTest; MyTest;
     3c0:	4b6d      	ldr	r3, [pc, #436]	; (578 <main+0x578>)
     3c2:	681c      	ldr	r4, [r3, #0]
     3c4:	4a6d      	ldr	r2, [pc, #436]	; (57c <main+0x57c>)
     3c6:	6811      	ldr	r1, [r2, #0]
     3c8:	fb01 f104 	mul.w	r1, r1, r4
     3cc:	6019      	str	r1, [r3, #0]
     3ce:	681c      	ldr	r4, [r3, #0]
     3d0:	6811      	ldr	r1, [r2, #0]
     3d2:	fb01 f104 	mul.w	r1, r1, r4
     3d6:	6019      	str	r1, [r3, #0]
     3d8:	681c      	ldr	r4, [r3, #0]
     3da:	6811      	ldr	r1, [r2, #0]
     3dc:	fb01 f104 	mul.w	r1, r1, r4
     3e0:	6019      	str	r1, [r3, #0]
     3e2:	681c      	ldr	r4, [r3, #0]
     3e4:	6811      	ldr	r1, [r2, #0]
     3e6:	fb01 f104 	mul.w	r1, r1, r4
     3ea:	6019      	str	r1, [r3, #0]
     3ec:	681c      	ldr	r4, [r3, #0]
     3ee:	6811      	ldr	r1, [r2, #0]
     3f0:	fb01 f104 	mul.w	r1, r1, r4
     3f4:	6019      	str	r1, [r3, #0]
    MyTest; MyTest; MyTest; MyTest; MyTest;
     3f6:	681c      	ldr	r4, [r3, #0]
     3f8:	6811      	ldr	r1, [r2, #0]
     3fa:	fb01 f104 	mul.w	r1, r1, r4
     3fe:	6019      	str	r1, [r3, #0]
     400:	681c      	ldr	r4, [r3, #0]
     402:	6811      	ldr	r1, [r2, #0]
     404:	fb01 f104 	mul.w	r1, r1, r4
     408:	6019      	str	r1, [r3, #0]
     40a:	681c      	ldr	r4, [r3, #0]
     40c:	6811      	ldr	r1, [r2, #0]
     40e:	fb01 f104 	mul.w	r1, r1, r4
     412:	6019      	str	r1, [r3, #0]
     414:	681c      	ldr	r4, [r3, #0]
     416:	6811      	ldr	r1, [r2, #0]
     418:	fb01 f104 	mul.w	r1, r1, r4
     41c:	6019      	str	r1, [r3, #0]
     41e:	6819      	ldr	r1, [r3, #0]
     420:	6812      	ldr	r2, [r2, #0]
     422:	fb02 f201 	mul.w	r2, r2, r1
     426:	601a      	str	r2, [r3, #0]
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
     428:	3001      	adds	r0, #1
     42a:	e7c5      	b.n	3b8 <main+0x3b8>
  lcStrOutput.Setf("Int mul: %s us", mcDiffTimer.toString());
     42c:	4850      	ldr	r0, [pc, #320]	; (570 <main+0x570>)
     42e:	f7ff fffe 	bl	0 <main>	42e: R_ARM_THM_CALL	cDiffTimer::toString()
     432:	4602      	mov	r2, r0
     434:	4952      	ldr	r1, [pc, #328]	; (580 <main+0x580>)
     436:	a816      	add	r0, sp, #88	; 0x58
     438:	f7ff fffe 	bl	0 <main>	438: R_ARM_THM_CALL	cStrBaseT<unsigned short>::Setf(char const*, ...)
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
     43c:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
     440:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
      if (luiFreeByteCnt)
     444:	429a      	cmp	r2, r3
     446:	d008      	beq.n	45a <main+0x45a>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
     448:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
     44c:	2100      	movs	r1, #0
     44e:	54d1      	strb	r1, [r2, r3]
        muiLen++;
     450:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
     454:	3301      	adds	r3, #1
     456:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
      return (char8*)cbArrayT<tyCStrT>::mpu8Data;
     45a:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
      mstStartPos.x = lixDestX;
     45e:	4b41      	ldr	r3, [pc, #260]	; (564 <main+0x564>)
     460:	2100      	movs	r1, #0
     462:	8499      	strh	r1, [r3, #36]	; 0x24
      mstStartPos.y = lixDestY;
     464:	213c      	movs	r1, #60	; 0x3c
     466:	84d9      	strh	r1, [r3, #38]	; 0x26
    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
     468:	4613      	mov	r3, r2
     46a:	f993 1000 	ldrsb.w	r1, [r3]
     46e:	b109      	cbz	r1, 474 <main+0x474>
     470:	3301      	adds	r3, #1
     472:	e7fa      	b.n	46a <main+0x46a>
    return (lpszTemp - lpszSrc);
     474:	1a9b      	subs	r3, r3, r2
      cbArrayExtT<tyCStrT>::muiLen = (CSTRT_UINT)cStrT_strlen(lszStr);
     476:	b29b      	uxth	r3, r3
     478:	483a      	ldr	r0, [pc, #232]	; (564 <main+0x564>)
     47a:	8443      	strh	r3, [r0, #34]	; 0x22
      cbArrayT<tyCStrT>::muiSize = cbArrayExtT<tyCStrT>::muiLen;
     47c:	8383      	strh	r3, [r0, #28]
      cbArrayT<tyCStrT>::mpu8Data = (uint8*)lszStr;
     47e:	f8c0 201e 	str.w	r2, [r0, #30]
      return i8PutString(lpcScr, lbSizeOnly);
     482:	6803      	ldr	r3, [r0, #0]
     484:	681b      	ldr	r3, [r3, #0]
     486:	2200      	movs	r2, #0
     488:	4937      	ldr	r1, [pc, #220]	; (568 <main+0x568>)
     48a:	4798      	blx	r3
     48c:	909e      	str	r0, [sp, #632]	; 0x278
  ILI9341_Show(&mc16GBm);
     48e:	4837      	ldr	r0, [pc, #220]	; (56c <main+0x56c>)
     490:	f7ff fffe 	bl	0 <ILI9341_Show>	490: R_ARM_THM_CALL	ILI9341_Show
  asm("nop"); // for breakpoint
     494:	bf00      	nop
  asm("nop"); // for breakpoint
     496:	bf00      	nop
  lu32Value3 = 1000000;
     498:	4b37      	ldr	r3, [pc, #220]	; (578 <main+0x578>)
     49a:	4a3a      	ldr	r2, [pc, #232]	; (584 <main+0x584>)
     49c:	601a      	str	r2, [r3, #0]
     49e:	f7ff fffe 	bl	0 <u32GetTimer>	49e: R_ARM_THM_CALL	u32GetTimer
     4a2:	4b33      	ldr	r3, [pc, #204]	; (570 <main+0x570>)
     4a4:	60d8      	str	r0, [r3, #12]
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
     4a6:	2000      	movs	r0, #0
     4a8:	f242 730f 	movw	r3, #9999	; 0x270f
     4ac:	4298      	cmp	r0, r3
     4ae:	d835      	bhi.n	51c <main+0x51c>
    MyTest; MyTest; MyTest; MyTest; MyTest;
     4b0:	4b31      	ldr	r3, [pc, #196]	; (578 <main+0x578>)
     4b2:	6819      	ldr	r1, [r3, #0]
     4b4:	4a31      	ldr	r2, [pc, #196]	; (57c <main+0x57c>)
     4b6:	6814      	ldr	r4, [r2, #0]
     4b8:	fbb1 f1f4 	udiv	r1, r1, r4
     4bc:	6019      	str	r1, [r3, #0]
     4be:	6819      	ldr	r1, [r3, #0]
     4c0:	6814      	ldr	r4, [r2, #0]
     4c2:	fbb1 f1f4 	udiv	r1, r1, r4
     4c6:	6019      	str	r1, [r3, #0]
     4c8:	6819      	ldr	r1, [r3, #0]
     4ca:	6814      	ldr	r4, [r2, #0]
     4cc:	fbb1 f1f4 	udiv	r1, r1, r4
     4d0:	6019      	str	r1, [r3, #0]
     4d2:	6819      	ldr	r1, [r3, #0]
     4d4:	6814      	ldr	r4, [r2, #0]
     4d6:	fbb1 f1f4 	udiv	r1, r1, r4
     4da:	6019      	str	r1, [r3, #0]
     4dc:	6819      	ldr	r1, [r3, #0]
     4de:	6814      	ldr	r4, [r2, #0]
     4e0:	fbb1 f1f4 	udiv	r1, r1, r4
     4e4:	6019      	str	r1, [r3, #0]
    MyTest; MyTest; MyTest; MyTest; MyTest;
     4e6:	6819      	ldr	r1, [r3, #0]
     4e8:	6814      	ldr	r4, [r2, #0]
     4ea:	fbb1 f1f4 	udiv	r1, r1, r4
     4ee:	6019      	str	r1, [r3, #0]
     4f0:	6819      	ldr	r1, [r3, #0]
     4f2:	6814      	ldr	r4, [r2, #0]
     4f4:	fbb1 f1f4 	udiv	r1, r1, r4
     4f8:	6019      	str	r1, [r3, #0]
     4fa:	6819      	ldr	r1, [r3, #0]
     4fc:	6814      	ldr	r4, [r2, #0]
     4fe:	fbb1 f1f4 	udiv	r1, r1, r4
     502:	6019      	str	r1, [r3, #0]
     504:	6819      	ldr	r1, [r3, #0]
     506:	6814      	ldr	r4, [r2, #0]
     508:	fbb1 f1f4 	udiv	r1, r1, r4
     50c:	6019      	str	r1, [r3, #0]
     50e:	6819      	ldr	r1, [r3, #0]
     510:	6812      	ldr	r2, [r2, #0]
     512:	fbb1 f2f2 	udiv	r2, r1, r2
     516:	601a      	str	r2, [r3, #0]
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
     518:	3001      	adds	r0, #1
     51a:	e7c5      	b.n	4a8 <main+0x4a8>
  lcStrOutput.Setf("Int div: %s us", mcDiffTimer.toString());
     51c:	4814      	ldr	r0, [pc, #80]	; (570 <main+0x570>)
     51e:	f7ff fffe 	bl	0 <main>	51e: R_ARM_THM_CALL	cDiffTimer::toString()
     522:	4602      	mov	r2, r0
     524:	4918      	ldr	r1, [pc, #96]	; (588 <main+0x588>)
     526:	a816      	add	r0, sp, #88	; 0x58
     528:	f7ff fffe 	bl	0 <main>	528: R_ARM_THM_CALL	cStrBaseT<unsigned short>::Setf(char const*, ...)
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
     52c:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
     530:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
      if (luiFreeByteCnt)
     534:	429a      	cmp	r2, r3
     536:	d008      	beq.n	54a <main+0x54a>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
     538:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
     53c:	2100      	movs	r1, #0
     53e:	54d1      	strb	r1, [r2, r3]
        muiLen++;
     540:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
     544:	3301      	adds	r3, #1
     546:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
      return (char8*)cbArrayT<tyCStrT>::mpu8Data;
     54a:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
      mstStartPos.x = lixDestX;
     54e:	4b05      	ldr	r3, [pc, #20]	; (564 <main+0x564>)
     550:	2100      	movs	r1, #0
     552:	8499      	strh	r1, [r3, #36]	; 0x24
      mstStartPos.y = lixDestY;
     554:	2146      	movs	r1, #70	; 0x46
     556:	84d9      	strh	r1, [r3, #38]	; 0x26
    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
     558:	4613      	mov	r3, r2
     55a:	f993 1000 	ldrsb.w	r1, [r3]
     55e:	b1a9      	cbz	r1, 58c <main+0x58c>
     560:	3301      	adds	r3, #1
     562:	e7fa      	b.n	55a <main+0x55a>
	...
	564: R_ARM_ABS32	.bss.cRFont_Res8b_Bpp1_1G_Full
	568: R_ARM_ABS32	.bss.mc16GScreen1
	56c: R_ARM_ABS32	.bss.mc16GBm
	570: R_ARM_ABS32	.bss.mcDiffTimer
     574:	00000030 	.word	0x00000030	574: R_ARM_ABS32	.rodata.main.str1.4
	...
	578: R_ARM_ABS32	.data._ZZ4mainE10lu32Value3
	57c: R_ARM_ABS32	.data._ZZ4mainE10lu32Value2
     580:	00000048 	.word	0x00000048	580: R_ARM_ABS32	.rodata.main.str1.4
     584:	000f4240 	.word	0x000f4240
     588:	00000058 	.word	0x00000058	588: R_ARM_ABS32	.rodata.main.str1.4
    return (lpszTemp - lpszSrc);
     58c:	1a9b      	subs	r3, r3, r2
      cbArrayExtT<tyCStrT>::muiLen = (CSTRT_UINT)cStrT_strlen(lszStr);
     58e:	b29b      	uxth	r3, r3
     590:	48c9      	ldr	r0, [pc, #804]	; (8b8 <main+0x8b8>)
     592:	8443      	strh	r3, [r0, #34]	; 0x22
      cbArrayT<tyCStrT>::muiSize = cbArrayExtT<tyCStrT>::muiLen;
     594:	8383      	strh	r3, [r0, #28]
      cbArrayT<tyCStrT>::mpu8Data = (uint8*)lszStr;
     596:	f8c0 201e 	str.w	r2, [r0, #30]
      return i8PutString(lpcScr, lbSizeOnly);
     59a:	6803      	ldr	r3, [r0, #0]
     59c:	681b      	ldr	r3, [r3, #0]
     59e:	2200      	movs	r2, #0
     5a0:	49c6      	ldr	r1, [pc, #792]	; (8bc <main+0x8bc>)
     5a2:	4798      	blx	r3
     5a4:	909f      	str	r0, [sp, #636]	; 0x27c
  ILI9341_Show(&mc16GBm);
     5a6:	48c6      	ldr	r0, [pc, #792]	; (8c0 <main+0x8c0>)
     5a8:	f7ff fffe 	bl	0 <ILI9341_Show>	5a8: R_ARM_THM_CALL	ILI9341_Show
  asm("nop"); // for breakpoint
     5ac:	bf00      	nop
  asm("nop"); // for breakpoint
     5ae:	bf00      	nop
     5b0:	f7ff fffe 	bl	0 <u32GetTimer>	5b0: R_ARM_THM_CALL	u32GetTimer
     5b4:	4bc3      	ldr	r3, [pc, #780]	; (8c4 <main+0x8c4>)
     5b6:	60d8      	str	r0, [r3, #12]
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
     5b8:	2100      	movs	r1, #0
     5ba:	f242 730f 	movw	r3, #9999	; 0x270f
     5be:	4299      	cmp	r1, r3
     5c0:	d853      	bhi.n	66a <main+0x66a>
    MyTest; MyTest; MyTest; MyTest; MyTest;
     5c2:	4bc1      	ldr	r3, [pc, #772]	; (8c8 <main+0x8c8>)
     5c4:	edd3 7a00 	vldr	s15, [r3]
     5c8:	4ac0      	ldr	r2, [pc, #768]	; (8cc <main+0x8cc>)
     5ca:	ed92 7a00 	vldr	s14, [r2]
     5ce:	ee67 7a87 	vmul.f32	s15, s15, s14
     5d2:	edc3 7a00 	vstr	s15, [r3]
     5d6:	edd3 7a00 	vldr	s15, [r3]
     5da:	ed92 7a00 	vldr	s14, [r2]
     5de:	ee67 7a87 	vmul.f32	s15, s15, s14
     5e2:	edc3 7a00 	vstr	s15, [r3]
     5e6:	edd3 7a00 	vldr	s15, [r3]
     5ea:	ed92 7a00 	vldr	s14, [r2]
     5ee:	ee67 7a87 	vmul.f32	s15, s15, s14
     5f2:	edc3 7a00 	vstr	s15, [r3]
     5f6:	edd3 7a00 	vldr	s15, [r3]
     5fa:	ed92 7a00 	vldr	s14, [r2]
     5fe:	ee67 7a87 	vmul.f32	s15, s15, s14
     602:	edc3 7a00 	vstr	s15, [r3]
     606:	edd3 7a00 	vldr	s15, [r3]
     60a:	ed92 7a00 	vldr	s14, [r2]
     60e:	ee67 7a87 	vmul.f32	s15, s15, s14
     612:	edc3 7a00 	vstr	s15, [r3]
    MyTest; MyTest; MyTest; MyTest; MyTest;
     616:	edd3 7a00 	vldr	s15, [r3]
     61a:	ed92 7a00 	vldr	s14, [r2]
     61e:	ee67 7a87 	vmul.f32	s15, s15, s14
     622:	edc3 7a00 	vstr	s15, [r3]
     626:	edd3 7a00 	vldr	s15, [r3]
     62a:	ed92 7a00 	vldr	s14, [r2]
     62e:	ee67 7a87 	vmul.f32	s15, s15, s14
     632:	edc3 7a00 	vstr	s15, [r3]
     636:	edd3 7a00 	vldr	s15, [r3]
     63a:	ed92 7a00 	vldr	s14, [r2]
     63e:	ee67 7a87 	vmul.f32	s15, s15, s14
     642:	edc3 7a00 	vstr	s15, [r3]
     646:	edd3 7a00 	vldr	s15, [r3]
     64a:	ed92 7a00 	vldr	s14, [r2]
     64e:	ee67 7a87 	vmul.f32	s15, s15, s14
     652:	edc3 7a00 	vstr	s15, [r3]
     656:	edd3 7a00 	vldr	s15, [r3]
     65a:	ed92 7a00 	vldr	s14, [r2]
     65e:	ee67 7a87 	vmul.f32	s15, s15, s14
     662:	edc3 7a00 	vstr	s15, [r3]
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
     666:	3101      	adds	r1, #1
     668:	e7a7      	b.n	5ba <main+0x5ba>
  lcStrOutput.Setf("Float mul: %s us", mcDiffTimer.toString());
     66a:	4896      	ldr	r0, [pc, #600]	; (8c4 <main+0x8c4>)
     66c:	f7ff fffe 	bl	0 <main>	66c: R_ARM_THM_CALL	cDiffTimer::toString()
     670:	4602      	mov	r2, r0
     672:	4997      	ldr	r1, [pc, #604]	; (8d0 <main+0x8d0>)
     674:	a816      	add	r0, sp, #88	; 0x58
     676:	f7ff fffe 	bl	0 <main>	676: R_ARM_THM_CALL	cStrBaseT<unsigned short>::Setf(char const*, ...)
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
     67a:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
     67e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
      if (luiFreeByteCnt)
     682:	429a      	cmp	r2, r3
     684:	d008      	beq.n	698 <main+0x698>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
     686:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
     68a:	2100      	movs	r1, #0
     68c:	54d1      	strb	r1, [r2, r3]
        muiLen++;
     68e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
     692:	3301      	adds	r3, #1
     694:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
      return (char8*)cbArrayT<tyCStrT>::mpu8Data;
     698:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
      mstStartPos.x = lixDestX;
     69c:	4b86      	ldr	r3, [pc, #536]	; (8b8 <main+0x8b8>)
     69e:	2100      	movs	r1, #0
     6a0:	8499      	strh	r1, [r3, #36]	; 0x24
      mstStartPos.y = lixDestY;
     6a2:	2150      	movs	r1, #80	; 0x50
     6a4:	84d9      	strh	r1, [r3, #38]	; 0x26
    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
     6a6:	4613      	mov	r3, r2
     6a8:	f993 1000 	ldrsb.w	r1, [r3]
     6ac:	b109      	cbz	r1, 6b2 <main+0x6b2>
     6ae:	3301      	adds	r3, #1
     6b0:	e7fa      	b.n	6a8 <main+0x6a8>
    return (lpszTemp - lpszSrc);
     6b2:	1a9b      	subs	r3, r3, r2
      cbArrayExtT<tyCStrT>::muiLen = (CSTRT_UINT)cStrT_strlen(lszStr);
     6b4:	b29b      	uxth	r3, r3
     6b6:	4880      	ldr	r0, [pc, #512]	; (8b8 <main+0x8b8>)
     6b8:	8443      	strh	r3, [r0, #34]	; 0x22
      cbArrayT<tyCStrT>::muiSize = cbArrayExtT<tyCStrT>::muiLen;
     6ba:	8383      	strh	r3, [r0, #28]
      cbArrayT<tyCStrT>::mpu8Data = (uint8*)lszStr;
     6bc:	f8c0 201e 	str.w	r2, [r0, #30]
      return i8PutString(lpcScr, lbSizeOnly);
     6c0:	6803      	ldr	r3, [r0, #0]
     6c2:	681b      	ldr	r3, [r3, #0]
     6c4:	2200      	movs	r2, #0
     6c6:	497d      	ldr	r1, [pc, #500]	; (8bc <main+0x8bc>)
     6c8:	4798      	blx	r3
     6ca:	90a0      	str	r0, [sp, #640]	; 0x280
  ILI9341_Show(&mc16GBm);
     6cc:	487c      	ldr	r0, [pc, #496]	; (8c0 <main+0x8c0>)
     6ce:	f7ff fffe 	bl	0 <ILI9341_Show>	6ce: R_ARM_THM_CALL	ILI9341_Show
  asm("nop"); // for breakpoint
     6d2:	bf00      	nop
  asm("nop"); // for breakpoint
     6d4:	bf00      	nop
     6d6:	f7ff fffe 	bl	0 <u32GetTimer>	6d6: R_ARM_THM_CALL	u32GetTimer
     6da:	4b7a      	ldr	r3, [pc, #488]	; (8c4 <main+0x8c4>)
     6dc:	60d8      	str	r0, [r3, #12]
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
     6de:	2100      	movs	r1, #0
     6e0:	f242 730f 	movw	r3, #9999	; 0x270f
     6e4:	4299      	cmp	r1, r3
     6e6:	d853      	bhi.n	790 <main+0x790>
    MyTest; MyTest; MyTest; MyTest; MyTest;
     6e8:	4b77      	ldr	r3, [pc, #476]	; (8c8 <main+0x8c8>)
     6ea:	edd3 6a00 	vldr	s13, [r3]
     6ee:	4a77      	ldr	r2, [pc, #476]	; (8cc <main+0x8cc>)
     6f0:	ed92 7a00 	vldr	s14, [r2]
     6f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
     6f8:	edc3 7a00 	vstr	s15, [r3]
     6fc:	edd3 6a00 	vldr	s13, [r3]
     700:	ed92 7a00 	vldr	s14, [r2]
     704:	eec6 7a87 	vdiv.f32	s15, s13, s14
     708:	edc3 7a00 	vstr	s15, [r3]
     70c:	edd3 6a00 	vldr	s13, [r3]
     710:	ed92 7a00 	vldr	s14, [r2]
     714:	eec6 7a87 	vdiv.f32	s15, s13, s14
     718:	edc3 7a00 	vstr	s15, [r3]
     71c:	edd3 6a00 	vldr	s13, [r3]
     720:	ed92 7a00 	vldr	s14, [r2]
     724:	eec6 7a87 	vdiv.f32	s15, s13, s14
     728:	edc3 7a00 	vstr	s15, [r3]
     72c:	edd3 6a00 	vldr	s13, [r3]
     730:	ed92 7a00 	vldr	s14, [r2]
     734:	eec6 7a87 	vdiv.f32	s15, s13, s14
     738:	edc3 7a00 	vstr	s15, [r3]
    MyTest; MyTest; MyTest; MyTest; MyTest;
     73c:	edd3 6a00 	vldr	s13, [r3]
     740:	ed92 7a00 	vldr	s14, [r2]
     744:	eec6 7a87 	vdiv.f32	s15, s13, s14
     748:	edc3 7a00 	vstr	s15, [r3]
     74c:	edd3 6a00 	vldr	s13, [r3]
     750:	ed92 7a00 	vldr	s14, [r2]
     754:	eec6 7a87 	vdiv.f32	s15, s13, s14
     758:	edc3 7a00 	vstr	s15, [r3]
     75c:	edd3 6a00 	vldr	s13, [r3]
     760:	ed92 7a00 	vldr	s14, [r2]
     764:	eec6 7a87 	vdiv.f32	s15, s13, s14
     768:	edc3 7a00 	vstr	s15, [r3]
     76c:	edd3 6a00 	vldr	s13, [r3]
     770:	ed92 7a00 	vldr	s14, [r2]
     774:	eec6 7a87 	vdiv.f32	s15, s13, s14
     778:	edc3 7a00 	vstr	s15, [r3]
     77c:	edd3 6a00 	vldr	s13, [r3]
     780:	ed92 7a00 	vldr	s14, [r2]
     784:	eec6 7a87 	vdiv.f32	s15, s13, s14
     788:	edc3 7a00 	vstr	s15, [r3]
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
     78c:	3101      	adds	r1, #1
     78e:	e7a7      	b.n	6e0 <main+0x6e0>
  lcStrOutput.Setf("Float div: %s us", mcDiffTimer.toString());
     790:	484c      	ldr	r0, [pc, #304]	; (8c4 <main+0x8c4>)
     792:	f7ff fffe 	bl	0 <main>	792: R_ARM_THM_CALL	cDiffTimer::toString()
     796:	4602      	mov	r2, r0
     798:	494e      	ldr	r1, [pc, #312]	; (8d4 <main+0x8d4>)
     79a:	a816      	add	r0, sp, #88	; 0x58
     79c:	f7ff fffe 	bl	0 <main>	79c: R_ARM_THM_CALL	cStrBaseT<unsigned short>::Setf(char const*, ...)
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
     7a0:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
     7a4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
      if (luiFreeByteCnt)
     7a8:	429a      	cmp	r2, r3
     7aa:	d008      	beq.n	7be <main+0x7be>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
     7ac:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
     7b0:	2100      	movs	r1, #0
     7b2:	54d1      	strb	r1, [r2, r3]
        muiLen++;
     7b4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
     7b8:	3301      	adds	r3, #1
     7ba:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
      return (char8*)cbArrayT<tyCStrT>::mpu8Data;
     7be:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
      mstStartPos.x = lixDestX;
     7c2:	4b3d      	ldr	r3, [pc, #244]	; (8b8 <main+0x8b8>)
     7c4:	2100      	movs	r1, #0
     7c6:	8499      	strh	r1, [r3, #36]	; 0x24
      mstStartPos.y = lixDestY;
     7c8:	215a      	movs	r1, #90	; 0x5a
     7ca:	84d9      	strh	r1, [r3, #38]	; 0x26
    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
     7cc:	4613      	mov	r3, r2
     7ce:	f993 1000 	ldrsb.w	r1, [r3]
     7d2:	b109      	cbz	r1, 7d8 <main+0x7d8>
     7d4:	3301      	adds	r3, #1
     7d6:	e7fa      	b.n	7ce <main+0x7ce>
    return (lpszTemp - lpszSrc);
     7d8:	1a9b      	subs	r3, r3, r2
      cbArrayExtT<tyCStrT>::muiLen = (CSTRT_UINT)cStrT_strlen(lszStr);
     7da:	b29b      	uxth	r3, r3
     7dc:	4836      	ldr	r0, [pc, #216]	; (8b8 <main+0x8b8>)
     7de:	8443      	strh	r3, [r0, #34]	; 0x22
      cbArrayT<tyCStrT>::muiSize = cbArrayExtT<tyCStrT>::muiLen;
     7e0:	8383      	strh	r3, [r0, #28]
      cbArrayT<tyCStrT>::mpu8Data = (uint8*)lszStr;
     7e2:	f8c0 201e 	str.w	r2, [r0, #30]
      return i8PutString(lpcScr, lbSizeOnly);
     7e6:	6803      	ldr	r3, [r0, #0]
     7e8:	681b      	ldr	r3, [r3, #0]
     7ea:	2200      	movs	r2, #0
     7ec:	4933      	ldr	r1, [pc, #204]	; (8bc <main+0x8bc>)
     7ee:	4798      	blx	r3
     7f0:	90a1      	str	r0, [sp, #644]	; 0x284
  ILI9341_Show(&mc16GBm);
     7f2:	4833      	ldr	r0, [pc, #204]	; (8c0 <main+0x8c0>)
     7f4:	f7ff fffe 	bl	0 <ILI9341_Show>	7f4: R_ARM_THM_CALL	ILI9341_Show
  asm("nop"); // for breakpoint
     7f8:	bf00      	nop
  asm("nop"); // for breakpoint
     7fa:	bf00      	nop
     7fc:	f7ff fffe 	bl	0 <u32GetTimer>	7fc: R_ARM_THM_CALL	u32GetTimer
     800:	4b30      	ldr	r3, [pc, #192]	; (8c4 <main+0x8c4>)
     802:	60d8      	str	r0, [r3, #12]
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
     804:	2400      	movs	r4, #0
     806:	e36c      	b.n	ee2 <main+0xee2>
    for (c = 0; c < 4; c++)
     808:	3101      	adds	r1, #1
     80a:	b2c9      	uxtb	r1, r1
     80c:	2903      	cmp	r1, #3
     80e:	d83a      	bhi.n	886 <main+0x886>
      for (r = 0; r < 4; r++)
     810:	2300      	movs	r3, #0
     812:	2b03      	cmp	r3, #3
     814:	d8f8      	bhi.n	808 <main+0x808>
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     816:	aa64      	add	r2, sp, #400	; 0x190
     818:	eb02 1203 	add.w	r2, r2, r3, lsl #4
     81c:	edd2 7a00 	vldr	s15, [r2]
     820:	0088      	lsls	r0, r1, #2
     822:	ad4e      	add	r5, sp, #312	; 0x138
     824:	4405      	add	r5, r0
     826:	ed95 7a00 	vldr	s14, [r5]
     82a:	ee67 7a87 	vmul.f32	s15, s15, s14
                        mat1.m[r][1] * mat2.m[1][c] +
     82e:	ed92 7a01 	vldr	s14, [r2, #4]
     832:	1d0d      	adds	r5, r1, #4
     834:	ae4e      	add	r6, sp, #312	; 0x138
     836:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     83a:	edd5 6a00 	vldr	s13, [r5]
     83e:	ee27 7a26 	vmul.f32	s14, s14, s13
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     842:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][2] * mat2.m[2][c] +
     846:	ed92 7a02 	vldr	s14, [r2, #8]
     84a:	f101 0508 	add.w	r5, r1, #8
     84e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     852:	edd5 6a00 	vldr	s13, [r5]
     856:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][1] * mat2.m[1][c] +
     85a:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][3] * mat2.m[3][c];
     85e:	ed92 7a03 	vldr	s14, [r2, #12]
     862:	f101 020c 	add.w	r2, r1, #12
     866:	eb06 0282 	add.w	r2, r6, r2, lsl #2
     86a:	edd2 6a00 	vldr	s13, [r2]
     86e:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][2] * mat2.m[2][c] +
     872:	ee77 7a87 	vadd.f32	s15, s15, s14
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     876:	4418      	add	r0, r3
     878:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
     87c:	edc0 7a00 	vstr	s15, [r0]
      for (r = 0; r < 4; r++)
     880:	3301      	adds	r3, #1
     882:	b2db      	uxtb	r3, r3
     884:	e7c5      	b.n	812 <main+0x812>
    *this = lcRet;
     886:	2258      	movs	r2, #88	; 0x58
     888:	4669      	mov	r1, sp
     88a:	a838      	add	r0, sp, #224	; 0xe0
     88c:	f7ff fffe 	bl	0 <memcpy>	88c: R_ARM_THM_CALL	memcpy
    arm_mat_init_f32(&mstMat1, 4, 4, null);
     890:	2300      	movs	r3, #0
     892:	2204      	movs	r2, #4
     894:	4611      	mov	r1, r2
     896:	a810      	add	r0, sp, #64	; 0x40
     898:	f7ff fffe 	bl	0 <arm_mat_init_f32>	898: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstMat2, 4, 4, null);
     89c:	2300      	movs	r3, #0
     89e:	2204      	movs	r2, #4
     8a0:	4611      	mov	r1, r2
     8a2:	a812      	add	r0, sp, #72	; 0x48
     8a4:	f7ff fffe 	bl	0 <arm_mat_init_f32>	8a4: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstRet, 4, 4, (float*)m);
     8a8:	466b      	mov	r3, sp
     8aa:	2204      	movs	r2, #4
     8ac:	4611      	mov	r1, r2
     8ae:	a814      	add	r0, sp, #80	; 0x50
     8b0:	f7ff fffe 	bl	0 <arm_mat_init_f32>	8b0: R_ARM_THM_CALL	arm_mat_init_f32
    for (c = 0; c < 4; c++)
     8b4:	2100      	movs	r1, #0
     8b6:	e011      	b.n	8dc <main+0x8dc>
	...
	8b8: R_ARM_ABS32	.bss.cRFont_Res8b_Bpp1_1G_Full
	8bc: R_ARM_ABS32	.bss.mc16GScreen1
	8c0: R_ARM_ABS32	.bss.mc16GBm
	8c4: R_ARM_ABS32	.bss.mcDiffTimer
	8c8: R_ARM_ABS32	.data._ZZ4mainE8lfValue3
	8cc: R_ARM_ABS32	.data._ZZ4mainE8lfValue2
     8d0:	00000068 	.word	0x00000068	8d0: R_ARM_ABS32	.rodata.main.str1.4
     8d4:	0000007c 	.word	0x0000007c	8d4: R_ARM_ABS32	.rodata.main.str1.4
     8d8:	3101      	adds	r1, #1
     8da:	b2c9      	uxtb	r1, r1
     8dc:	2903      	cmp	r1, #3
     8de:	d83a      	bhi.n	956 <main+0x956>
      for (r = 0; r < 4; r++)
     8e0:	2300      	movs	r3, #0
     8e2:	2b03      	cmp	r3, #3
     8e4:	d8f8      	bhi.n	8d8 <main+0x8d8>
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     8e6:	aa64      	add	r2, sp, #400	; 0x190
     8e8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
     8ec:	edd2 7a00 	vldr	s15, [r2]
     8f0:	0088      	lsls	r0, r1, #2
     8f2:	ad4e      	add	r5, sp, #312	; 0x138
     8f4:	4405      	add	r5, r0
     8f6:	ed95 7a00 	vldr	s14, [r5]
     8fa:	ee67 7a87 	vmul.f32	s15, s15, s14
                        mat1.m[r][1] * mat2.m[1][c] +
     8fe:	ed92 7a01 	vldr	s14, [r2, #4]
     902:	1d0d      	adds	r5, r1, #4
     904:	ae4e      	add	r6, sp, #312	; 0x138
     906:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     90a:	edd5 6a00 	vldr	s13, [r5]
     90e:	ee27 7a26 	vmul.f32	s14, s14, s13
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     912:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][2] * mat2.m[2][c] +
     916:	ed92 7a02 	vldr	s14, [r2, #8]
     91a:	f101 0508 	add.w	r5, r1, #8
     91e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     922:	edd5 6a00 	vldr	s13, [r5]
     926:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][1] * mat2.m[1][c] +
     92a:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][3] * mat2.m[3][c];
     92e:	ed92 7a03 	vldr	s14, [r2, #12]
     932:	f101 020c 	add.w	r2, r1, #12
     936:	eb06 0282 	add.w	r2, r6, r2, lsl #2
     93a:	edd2 6a00 	vldr	s13, [r2]
     93e:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][2] * mat2.m[2][c] +
     942:	ee77 7a87 	vadd.f32	s15, s15, s14
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     946:	4418      	add	r0, r3
     948:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
     94c:	edc0 7a00 	vstr	s15, [r0]
      for (r = 0; r < 4; r++)
     950:	3301      	adds	r3, #1
     952:	b2db      	uxtb	r3, r3
     954:	e7c5      	b.n	8e2 <main+0x8e2>
    *this = lcRet;
     956:	2258      	movs	r2, #88	; 0x58
     958:	4669      	mov	r1, sp
     95a:	a838      	add	r0, sp, #224	; 0xe0
     95c:	f7ff fffe 	bl	0 <memcpy>	95c: R_ARM_THM_CALL	memcpy
    arm_mat_init_f32(&mstMat1, 4, 4, null);
     960:	2300      	movs	r3, #0
     962:	2204      	movs	r2, #4
     964:	4611      	mov	r1, r2
     966:	a810      	add	r0, sp, #64	; 0x40
     968:	f7ff fffe 	bl	0 <arm_mat_init_f32>	968: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstMat2, 4, 4, null);
     96c:	2300      	movs	r3, #0
     96e:	2204      	movs	r2, #4
     970:	4611      	mov	r1, r2
     972:	a812      	add	r0, sp, #72	; 0x48
     974:	f7ff fffe 	bl	0 <arm_mat_init_f32>	974: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstRet, 4, 4, (float*)m);
     978:	466b      	mov	r3, sp
     97a:	2204      	movs	r2, #4
     97c:	4611      	mov	r1, r2
     97e:	a814      	add	r0, sp, #80	; 0x50
     980:	f7ff fffe 	bl	0 <arm_mat_init_f32>	980: R_ARM_THM_CALL	arm_mat_init_f32
    for (c = 0; c < 4; c++)
     984:	2100      	movs	r1, #0
     986:	e001      	b.n	98c <main+0x98c>
     988:	3101      	adds	r1, #1
     98a:	b2c9      	uxtb	r1, r1
     98c:	2903      	cmp	r1, #3
     98e:	d83a      	bhi.n	a06 <main+0xa06>
      for (r = 0; r < 4; r++)
     990:	2300      	movs	r3, #0
     992:	2b03      	cmp	r3, #3
     994:	d8f8      	bhi.n	988 <main+0x988>
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     996:	aa64      	add	r2, sp, #400	; 0x190
     998:	eb02 1203 	add.w	r2, r2, r3, lsl #4
     99c:	edd2 7a00 	vldr	s15, [r2]
     9a0:	0088      	lsls	r0, r1, #2
     9a2:	ad4e      	add	r5, sp, #312	; 0x138
     9a4:	4405      	add	r5, r0
     9a6:	ed95 7a00 	vldr	s14, [r5]
     9aa:	ee67 7a87 	vmul.f32	s15, s15, s14
                        mat1.m[r][1] * mat2.m[1][c] +
     9ae:	ed92 7a01 	vldr	s14, [r2, #4]
     9b2:	1d0d      	adds	r5, r1, #4
     9b4:	ae4e      	add	r6, sp, #312	; 0x138
     9b6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     9ba:	edd5 6a00 	vldr	s13, [r5]
     9be:	ee27 7a26 	vmul.f32	s14, s14, s13
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     9c2:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][2] * mat2.m[2][c] +
     9c6:	ed92 7a02 	vldr	s14, [r2, #8]
     9ca:	f101 0508 	add.w	r5, r1, #8
     9ce:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     9d2:	edd5 6a00 	vldr	s13, [r5]
     9d6:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][1] * mat2.m[1][c] +
     9da:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][3] * mat2.m[3][c];
     9de:	ed92 7a03 	vldr	s14, [r2, #12]
     9e2:	f101 020c 	add.w	r2, r1, #12
     9e6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
     9ea:	edd2 6a00 	vldr	s13, [r2]
     9ee:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][2] * mat2.m[2][c] +
     9f2:	ee77 7a87 	vadd.f32	s15, s15, s14
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     9f6:	4418      	add	r0, r3
     9f8:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
     9fc:	edc0 7a00 	vstr	s15, [r0]
      for (r = 0; r < 4; r++)
     a00:	3301      	adds	r3, #1
     a02:	b2db      	uxtb	r3, r3
     a04:	e7c5      	b.n	992 <main+0x992>
    *this = lcRet;
     a06:	2258      	movs	r2, #88	; 0x58
     a08:	4669      	mov	r1, sp
     a0a:	a838      	add	r0, sp, #224	; 0xe0
     a0c:	f7ff fffe 	bl	0 <memcpy>	a0c: R_ARM_THM_CALL	memcpy
    arm_mat_init_f32(&mstMat1, 4, 4, null);
     a10:	2300      	movs	r3, #0
     a12:	2204      	movs	r2, #4
     a14:	4611      	mov	r1, r2
     a16:	a810      	add	r0, sp, #64	; 0x40
     a18:	f7ff fffe 	bl	0 <arm_mat_init_f32>	a18: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstMat2, 4, 4, null);
     a1c:	2300      	movs	r3, #0
     a1e:	2204      	movs	r2, #4
     a20:	4611      	mov	r1, r2
     a22:	a812      	add	r0, sp, #72	; 0x48
     a24:	f7ff fffe 	bl	0 <arm_mat_init_f32>	a24: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstRet, 4, 4, (float*)m);
     a28:	466b      	mov	r3, sp
     a2a:	2204      	movs	r2, #4
     a2c:	4611      	mov	r1, r2
     a2e:	a814      	add	r0, sp, #80	; 0x50
     a30:	f7ff fffe 	bl	0 <arm_mat_init_f32>	a30: R_ARM_THM_CALL	arm_mat_init_f32
    for (c = 0; c < 4; c++)
     a34:	2100      	movs	r1, #0
     a36:	e001      	b.n	a3c <main+0xa3c>
     a38:	3101      	adds	r1, #1
     a3a:	b2c9      	uxtb	r1, r1
     a3c:	2903      	cmp	r1, #3
     a3e:	d83a      	bhi.n	ab6 <main+0xab6>
      for (r = 0; r < 4; r++)
     a40:	2300      	movs	r3, #0
     a42:	2b03      	cmp	r3, #3
     a44:	d8f8      	bhi.n	a38 <main+0xa38>
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     a46:	aa64      	add	r2, sp, #400	; 0x190
     a48:	eb02 1203 	add.w	r2, r2, r3, lsl #4
     a4c:	edd2 7a00 	vldr	s15, [r2]
     a50:	0088      	lsls	r0, r1, #2
     a52:	ad4e      	add	r5, sp, #312	; 0x138
     a54:	4405      	add	r5, r0
     a56:	ed95 7a00 	vldr	s14, [r5]
     a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
                        mat1.m[r][1] * mat2.m[1][c] +
     a5e:	ed92 7a01 	vldr	s14, [r2, #4]
     a62:	1d0d      	adds	r5, r1, #4
     a64:	ae4e      	add	r6, sp, #312	; 0x138
     a66:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     a6a:	edd5 6a00 	vldr	s13, [r5]
     a6e:	ee27 7a26 	vmul.f32	s14, s14, s13
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     a72:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][2] * mat2.m[2][c] +
     a76:	ed92 7a02 	vldr	s14, [r2, #8]
     a7a:	f101 0508 	add.w	r5, r1, #8
     a7e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     a82:	edd5 6a00 	vldr	s13, [r5]
     a86:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][1] * mat2.m[1][c] +
     a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][3] * mat2.m[3][c];
     a8e:	ed92 7a03 	vldr	s14, [r2, #12]
     a92:	f101 020c 	add.w	r2, r1, #12
     a96:	eb06 0282 	add.w	r2, r6, r2, lsl #2
     a9a:	edd2 6a00 	vldr	s13, [r2]
     a9e:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][2] * mat2.m[2][c] +
     aa2:	ee77 7a87 	vadd.f32	s15, s15, s14
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     aa6:	4418      	add	r0, r3
     aa8:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
     aac:	edc0 7a00 	vstr	s15, [r0]
      for (r = 0; r < 4; r++)
     ab0:	3301      	adds	r3, #1
     ab2:	b2db      	uxtb	r3, r3
     ab4:	e7c5      	b.n	a42 <main+0xa42>
    *this = lcRet;
     ab6:	2258      	movs	r2, #88	; 0x58
     ab8:	4669      	mov	r1, sp
     aba:	a838      	add	r0, sp, #224	; 0xe0
     abc:	f7ff fffe 	bl	0 <memcpy>	abc: R_ARM_THM_CALL	memcpy
    arm_mat_init_f32(&mstMat1, 4, 4, null);
     ac0:	2300      	movs	r3, #0
     ac2:	2204      	movs	r2, #4
     ac4:	4611      	mov	r1, r2
     ac6:	a810      	add	r0, sp, #64	; 0x40
     ac8:	f7ff fffe 	bl	0 <arm_mat_init_f32>	ac8: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstMat2, 4, 4, null);
     acc:	2300      	movs	r3, #0
     ace:	2204      	movs	r2, #4
     ad0:	4611      	mov	r1, r2
     ad2:	a812      	add	r0, sp, #72	; 0x48
     ad4:	f7ff fffe 	bl	0 <arm_mat_init_f32>	ad4: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstRet, 4, 4, (float*)m);
     ad8:	466b      	mov	r3, sp
     ada:	2204      	movs	r2, #4
     adc:	4611      	mov	r1, r2
     ade:	a814      	add	r0, sp, #80	; 0x50
     ae0:	f7ff fffe 	bl	0 <arm_mat_init_f32>	ae0: R_ARM_THM_CALL	arm_mat_init_f32
    for (c = 0; c < 4; c++)
     ae4:	2100      	movs	r1, #0
     ae6:	e001      	b.n	aec <main+0xaec>
     ae8:	3101      	adds	r1, #1
     aea:	b2c9      	uxtb	r1, r1
     aec:	2903      	cmp	r1, #3
     aee:	d83a      	bhi.n	b66 <main+0xb66>
      for (r = 0; r < 4; r++)
     af0:	2300      	movs	r3, #0
     af2:	2b03      	cmp	r3, #3
     af4:	d8f8      	bhi.n	ae8 <main+0xae8>
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     af6:	aa64      	add	r2, sp, #400	; 0x190
     af8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
     afc:	edd2 7a00 	vldr	s15, [r2]
     b00:	0088      	lsls	r0, r1, #2
     b02:	ad4e      	add	r5, sp, #312	; 0x138
     b04:	4405      	add	r5, r0
     b06:	ed95 7a00 	vldr	s14, [r5]
     b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
                        mat1.m[r][1] * mat2.m[1][c] +
     b0e:	ed92 7a01 	vldr	s14, [r2, #4]
     b12:	1d0d      	adds	r5, r1, #4
     b14:	ae4e      	add	r6, sp, #312	; 0x138
     b16:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     b1a:	edd5 6a00 	vldr	s13, [r5]
     b1e:	ee27 7a26 	vmul.f32	s14, s14, s13
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     b22:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][2] * mat2.m[2][c] +
     b26:	ed92 7a02 	vldr	s14, [r2, #8]
     b2a:	f101 0508 	add.w	r5, r1, #8
     b2e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     b32:	edd5 6a00 	vldr	s13, [r5]
     b36:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][1] * mat2.m[1][c] +
     b3a:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][3] * mat2.m[3][c];
     b3e:	ed92 7a03 	vldr	s14, [r2, #12]
     b42:	f101 020c 	add.w	r2, r1, #12
     b46:	eb06 0282 	add.w	r2, r6, r2, lsl #2
     b4a:	edd2 6a00 	vldr	s13, [r2]
     b4e:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][2] * mat2.m[2][c] +
     b52:	ee77 7a87 	vadd.f32	s15, s15, s14
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     b56:	4418      	add	r0, r3
     b58:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
     b5c:	edc0 7a00 	vstr	s15, [r0]
      for (r = 0; r < 4; r++)
     b60:	3301      	adds	r3, #1
     b62:	b2db      	uxtb	r3, r3
     b64:	e7c5      	b.n	af2 <main+0xaf2>
    *this = lcRet;
     b66:	2258      	movs	r2, #88	; 0x58
     b68:	4669      	mov	r1, sp
     b6a:	a838      	add	r0, sp, #224	; 0xe0
     b6c:	f7ff fffe 	bl	0 <memcpy>	b6c: R_ARM_THM_CALL	memcpy
    arm_mat_init_f32(&mstMat1, 4, 4, null);
     b70:	2300      	movs	r3, #0
     b72:	2204      	movs	r2, #4
     b74:	4611      	mov	r1, r2
     b76:	a810      	add	r0, sp, #64	; 0x40
     b78:	f7ff fffe 	bl	0 <arm_mat_init_f32>	b78: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstMat2, 4, 4, null);
     b7c:	2300      	movs	r3, #0
     b7e:	2204      	movs	r2, #4
     b80:	4611      	mov	r1, r2
     b82:	a812      	add	r0, sp, #72	; 0x48
     b84:	f7ff fffe 	bl	0 <arm_mat_init_f32>	b84: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstRet, 4, 4, (float*)m);
     b88:	466b      	mov	r3, sp
     b8a:	2204      	movs	r2, #4
     b8c:	4611      	mov	r1, r2
     b8e:	a814      	add	r0, sp, #80	; 0x50
     b90:	f7ff fffe 	bl	0 <arm_mat_init_f32>	b90: R_ARM_THM_CALL	arm_mat_init_f32
    for (c = 0; c < 4; c++)
     b94:	2100      	movs	r1, #0
     b96:	e001      	b.n	b9c <main+0xb9c>
     b98:	3101      	adds	r1, #1
     b9a:	b2c9      	uxtb	r1, r1
     b9c:	2903      	cmp	r1, #3
     b9e:	d83a      	bhi.n	c16 <main+0xc16>
      for (r = 0; r < 4; r++)
     ba0:	2300      	movs	r3, #0
     ba2:	2b03      	cmp	r3, #3
     ba4:	d8f8      	bhi.n	b98 <main+0xb98>
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     ba6:	aa64      	add	r2, sp, #400	; 0x190
     ba8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
     bac:	edd2 7a00 	vldr	s15, [r2]
     bb0:	0088      	lsls	r0, r1, #2
     bb2:	ad4e      	add	r5, sp, #312	; 0x138
     bb4:	4405      	add	r5, r0
     bb6:	ed95 7a00 	vldr	s14, [r5]
     bba:	ee67 7a87 	vmul.f32	s15, s15, s14
                        mat1.m[r][1] * mat2.m[1][c] +
     bbe:	ed92 7a01 	vldr	s14, [r2, #4]
     bc2:	1d0d      	adds	r5, r1, #4
     bc4:	ae4e      	add	r6, sp, #312	; 0x138
     bc6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     bca:	edd5 6a00 	vldr	s13, [r5]
     bce:	ee27 7a26 	vmul.f32	s14, s14, s13
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     bd2:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][2] * mat2.m[2][c] +
     bd6:	ed92 7a02 	vldr	s14, [r2, #8]
     bda:	f101 0508 	add.w	r5, r1, #8
     bde:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     be2:	edd5 6a00 	vldr	s13, [r5]
     be6:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][1] * mat2.m[1][c] +
     bea:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][3] * mat2.m[3][c];
     bee:	ed92 7a03 	vldr	s14, [r2, #12]
     bf2:	f101 020c 	add.w	r2, r1, #12
     bf6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
     bfa:	edd2 6a00 	vldr	s13, [r2]
     bfe:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][2] * mat2.m[2][c] +
     c02:	ee77 7a87 	vadd.f32	s15, s15, s14
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     c06:	4418      	add	r0, r3
     c08:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
     c0c:	edc0 7a00 	vstr	s15, [r0]
      for (r = 0; r < 4; r++)
     c10:	3301      	adds	r3, #1
     c12:	b2db      	uxtb	r3, r3
     c14:	e7c5      	b.n	ba2 <main+0xba2>
    *this = lcRet;
     c16:	2258      	movs	r2, #88	; 0x58
     c18:	4669      	mov	r1, sp
     c1a:	a838      	add	r0, sp, #224	; 0xe0
     c1c:	f7ff fffe 	bl	0 <memcpy>	c1c: R_ARM_THM_CALL	memcpy
    arm_mat_init_f32(&mstMat1, 4, 4, null);
     c20:	2300      	movs	r3, #0
     c22:	2204      	movs	r2, #4
     c24:	4611      	mov	r1, r2
     c26:	a810      	add	r0, sp, #64	; 0x40
     c28:	f7ff fffe 	bl	0 <arm_mat_init_f32>	c28: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstMat2, 4, 4, null);
     c2c:	2300      	movs	r3, #0
     c2e:	2204      	movs	r2, #4
     c30:	4611      	mov	r1, r2
     c32:	a812      	add	r0, sp, #72	; 0x48
     c34:	f7ff fffe 	bl	0 <arm_mat_init_f32>	c34: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstRet, 4, 4, (float*)m);
     c38:	466b      	mov	r3, sp
     c3a:	2204      	movs	r2, #4
     c3c:	4611      	mov	r1, r2
     c3e:	a814      	add	r0, sp, #80	; 0x50
     c40:	f7ff fffe 	bl	0 <arm_mat_init_f32>	c40: R_ARM_THM_CALL	arm_mat_init_f32
    for (c = 0; c < 4; c++)
     c44:	2100      	movs	r1, #0
     c46:	e001      	b.n	c4c <main+0xc4c>
     c48:	3101      	adds	r1, #1
     c4a:	b2c9      	uxtb	r1, r1
     c4c:	2903      	cmp	r1, #3
     c4e:	d83a      	bhi.n	cc6 <main+0xcc6>
      for (r = 0; r < 4; r++)
     c50:	2300      	movs	r3, #0
     c52:	2b03      	cmp	r3, #3
     c54:	d8f8      	bhi.n	c48 <main+0xc48>
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     c56:	aa64      	add	r2, sp, #400	; 0x190
     c58:	eb02 1203 	add.w	r2, r2, r3, lsl #4
     c5c:	edd2 7a00 	vldr	s15, [r2]
     c60:	0088      	lsls	r0, r1, #2
     c62:	ad4e      	add	r5, sp, #312	; 0x138
     c64:	4405      	add	r5, r0
     c66:	ed95 7a00 	vldr	s14, [r5]
     c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
                        mat1.m[r][1] * mat2.m[1][c] +
     c6e:	ed92 7a01 	vldr	s14, [r2, #4]
     c72:	1d0d      	adds	r5, r1, #4
     c74:	ae4e      	add	r6, sp, #312	; 0x138
     c76:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     c7a:	edd5 6a00 	vldr	s13, [r5]
     c7e:	ee27 7a26 	vmul.f32	s14, s14, s13
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     c82:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][2] * mat2.m[2][c] +
     c86:	ed92 7a02 	vldr	s14, [r2, #8]
     c8a:	f101 0508 	add.w	r5, r1, #8
     c8e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     c92:	edd5 6a00 	vldr	s13, [r5]
     c96:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][1] * mat2.m[1][c] +
     c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][3] * mat2.m[3][c];
     c9e:	ed92 7a03 	vldr	s14, [r2, #12]
     ca2:	f101 020c 	add.w	r2, r1, #12
     ca6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
     caa:	edd2 6a00 	vldr	s13, [r2]
     cae:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][2] * mat2.m[2][c] +
     cb2:	ee77 7a87 	vadd.f32	s15, s15, s14
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     cb6:	4418      	add	r0, r3
     cb8:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
     cbc:	edc0 7a00 	vstr	s15, [r0]
      for (r = 0; r < 4; r++)
     cc0:	3301      	adds	r3, #1
     cc2:	b2db      	uxtb	r3, r3
     cc4:	e7c5      	b.n	c52 <main+0xc52>
    *this = lcRet;
     cc6:	2258      	movs	r2, #88	; 0x58
     cc8:	4669      	mov	r1, sp
     cca:	a838      	add	r0, sp, #224	; 0xe0
     ccc:	f7ff fffe 	bl	0 <memcpy>	ccc: R_ARM_THM_CALL	memcpy
    arm_mat_init_f32(&mstMat1, 4, 4, null);
     cd0:	2300      	movs	r3, #0
     cd2:	2204      	movs	r2, #4
     cd4:	4611      	mov	r1, r2
     cd6:	a810      	add	r0, sp, #64	; 0x40
     cd8:	f7ff fffe 	bl	0 <arm_mat_init_f32>	cd8: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstMat2, 4, 4, null);
     cdc:	2300      	movs	r3, #0
     cde:	2204      	movs	r2, #4
     ce0:	4611      	mov	r1, r2
     ce2:	a812      	add	r0, sp, #72	; 0x48
     ce4:	f7ff fffe 	bl	0 <arm_mat_init_f32>	ce4: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstRet, 4, 4, (float*)m);
     ce8:	466b      	mov	r3, sp
     cea:	2204      	movs	r2, #4
     cec:	4611      	mov	r1, r2
     cee:	a814      	add	r0, sp, #80	; 0x50
     cf0:	f7ff fffe 	bl	0 <arm_mat_init_f32>	cf0: R_ARM_THM_CALL	arm_mat_init_f32
    for (c = 0; c < 4; c++)
     cf4:	2100      	movs	r1, #0
     cf6:	e001      	b.n	cfc <main+0xcfc>
     cf8:	3101      	adds	r1, #1
     cfa:	b2c9      	uxtb	r1, r1
     cfc:	2903      	cmp	r1, #3
     cfe:	d83a      	bhi.n	d76 <main+0xd76>
      for (r = 0; r < 4; r++)
     d00:	2300      	movs	r3, #0
     d02:	2b03      	cmp	r3, #3
     d04:	d8f8      	bhi.n	cf8 <main+0xcf8>
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     d06:	aa64      	add	r2, sp, #400	; 0x190
     d08:	eb02 1203 	add.w	r2, r2, r3, lsl #4
     d0c:	edd2 7a00 	vldr	s15, [r2]
     d10:	0088      	lsls	r0, r1, #2
     d12:	ad4e      	add	r5, sp, #312	; 0x138
     d14:	4405      	add	r5, r0
     d16:	ed95 7a00 	vldr	s14, [r5]
     d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
                        mat1.m[r][1] * mat2.m[1][c] +
     d1e:	ed92 7a01 	vldr	s14, [r2, #4]
     d22:	1d0d      	adds	r5, r1, #4
     d24:	ae4e      	add	r6, sp, #312	; 0x138
     d26:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     d2a:	edd5 6a00 	vldr	s13, [r5]
     d2e:	ee27 7a26 	vmul.f32	s14, s14, s13
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     d32:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][2] * mat2.m[2][c] +
     d36:	ed92 7a02 	vldr	s14, [r2, #8]
     d3a:	f101 0508 	add.w	r5, r1, #8
     d3e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     d42:	edd5 6a00 	vldr	s13, [r5]
     d46:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][1] * mat2.m[1][c] +
     d4a:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][3] * mat2.m[3][c];
     d4e:	ed92 7a03 	vldr	s14, [r2, #12]
     d52:	f101 020c 	add.w	r2, r1, #12
     d56:	eb06 0282 	add.w	r2, r6, r2, lsl #2
     d5a:	edd2 6a00 	vldr	s13, [r2]
     d5e:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][2] * mat2.m[2][c] +
     d62:	ee77 7a87 	vadd.f32	s15, s15, s14
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     d66:	4418      	add	r0, r3
     d68:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
     d6c:	edc0 7a00 	vstr	s15, [r0]
      for (r = 0; r < 4; r++)
     d70:	3301      	adds	r3, #1
     d72:	b2db      	uxtb	r3, r3
     d74:	e7c5      	b.n	d02 <main+0xd02>
    *this = lcRet;
     d76:	2258      	movs	r2, #88	; 0x58
     d78:	4669      	mov	r1, sp
     d7a:	a838      	add	r0, sp, #224	; 0xe0
     d7c:	f7ff fffe 	bl	0 <memcpy>	d7c: R_ARM_THM_CALL	memcpy
    arm_mat_init_f32(&mstMat1, 4, 4, null);
     d80:	2300      	movs	r3, #0
     d82:	2204      	movs	r2, #4
     d84:	4611      	mov	r1, r2
     d86:	a810      	add	r0, sp, #64	; 0x40
     d88:	f7ff fffe 	bl	0 <arm_mat_init_f32>	d88: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstMat2, 4, 4, null);
     d8c:	2300      	movs	r3, #0
     d8e:	2204      	movs	r2, #4
     d90:	4611      	mov	r1, r2
     d92:	a812      	add	r0, sp, #72	; 0x48
     d94:	f7ff fffe 	bl	0 <arm_mat_init_f32>	d94: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstRet, 4, 4, (float*)m);
     d98:	466b      	mov	r3, sp
     d9a:	2204      	movs	r2, #4
     d9c:	4611      	mov	r1, r2
     d9e:	a814      	add	r0, sp, #80	; 0x50
     da0:	f7ff fffe 	bl	0 <arm_mat_init_f32>	da0: R_ARM_THM_CALL	arm_mat_init_f32
    for (c = 0; c < 4; c++)
     da4:	2100      	movs	r1, #0
     da6:	e001      	b.n	dac <main+0xdac>
     da8:	3101      	adds	r1, #1
     daa:	b2c9      	uxtb	r1, r1
     dac:	2903      	cmp	r1, #3
     dae:	d83a      	bhi.n	e26 <main+0xe26>
      for (r = 0; r < 4; r++)
     db0:	2300      	movs	r3, #0
     db2:	2b03      	cmp	r3, #3
     db4:	d8f8      	bhi.n	da8 <main+0xda8>
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     db6:	aa64      	add	r2, sp, #400	; 0x190
     db8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
     dbc:	edd2 7a00 	vldr	s15, [r2]
     dc0:	0088      	lsls	r0, r1, #2
     dc2:	ad4e      	add	r5, sp, #312	; 0x138
     dc4:	4405      	add	r5, r0
     dc6:	ed95 7a00 	vldr	s14, [r5]
     dca:	ee67 7a87 	vmul.f32	s15, s15, s14
                        mat1.m[r][1] * mat2.m[1][c] +
     dce:	ed92 7a01 	vldr	s14, [r2, #4]
     dd2:	1d0d      	adds	r5, r1, #4
     dd4:	ae4e      	add	r6, sp, #312	; 0x138
     dd6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     dda:	edd5 6a00 	vldr	s13, [r5]
     dde:	ee27 7a26 	vmul.f32	s14, s14, s13
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     de2:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][2] * mat2.m[2][c] +
     de6:	ed92 7a02 	vldr	s14, [r2, #8]
     dea:	f101 0508 	add.w	r5, r1, #8
     dee:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     df2:	edd5 6a00 	vldr	s13, [r5]
     df6:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][1] * mat2.m[1][c] +
     dfa:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][3] * mat2.m[3][c];
     dfe:	ed92 7a03 	vldr	s14, [r2, #12]
     e02:	f101 020c 	add.w	r2, r1, #12
     e06:	eb06 0282 	add.w	r2, r6, r2, lsl #2
     e0a:	edd2 6a00 	vldr	s13, [r2]
     e0e:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][2] * mat2.m[2][c] +
     e12:	ee77 7a87 	vadd.f32	s15, s15, s14
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     e16:	4418      	add	r0, r3
     e18:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
     e1c:	edc0 7a00 	vstr	s15, [r0]
      for (r = 0; r < 4; r++)
     e20:	3301      	adds	r3, #1
     e22:	b2db      	uxtb	r3, r3
     e24:	e7c5      	b.n	db2 <main+0xdb2>
    *this = lcRet;
     e26:	2258      	movs	r2, #88	; 0x58
     e28:	4669      	mov	r1, sp
     e2a:	a838      	add	r0, sp, #224	; 0xe0
     e2c:	f7ff fffe 	bl	0 <memcpy>	e2c: R_ARM_THM_CALL	memcpy
    arm_mat_init_f32(&mstMat1, 4, 4, null);
     e30:	2300      	movs	r3, #0
     e32:	2204      	movs	r2, #4
     e34:	4611      	mov	r1, r2
     e36:	a810      	add	r0, sp, #64	; 0x40
     e38:	f7ff fffe 	bl	0 <arm_mat_init_f32>	e38: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstMat2, 4, 4, null);
     e3c:	2300      	movs	r3, #0
     e3e:	2204      	movs	r2, #4
     e40:	4611      	mov	r1, r2
     e42:	a812      	add	r0, sp, #72	; 0x48
     e44:	f7ff fffe 	bl	0 <arm_mat_init_f32>	e44: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstRet, 4, 4, (float*)m);
     e48:	466b      	mov	r3, sp
     e4a:	2204      	movs	r2, #4
     e4c:	4611      	mov	r1, r2
     e4e:	a814      	add	r0, sp, #80	; 0x50
     e50:	f7ff fffe 	bl	0 <arm_mat_init_f32>	e50: R_ARM_THM_CALL	arm_mat_init_f32
    for (c = 0; c < 4; c++)
     e54:	2100      	movs	r1, #0
     e56:	e001      	b.n	e5c <main+0xe5c>
     e58:	3101      	adds	r1, #1
     e5a:	b2c9      	uxtb	r1, r1
     e5c:	2903      	cmp	r1, #3
     e5e:	d83a      	bhi.n	ed6 <main+0xed6>
      for (r = 0; r < 4; r++)
     e60:	2300      	movs	r3, #0
     e62:	2b03      	cmp	r3, #3
     e64:	d8f8      	bhi.n	e58 <main+0xe58>
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     e66:	aa64      	add	r2, sp, #400	; 0x190
     e68:	eb02 1203 	add.w	r2, r2, r3, lsl #4
     e6c:	edd2 7a00 	vldr	s15, [r2]
     e70:	0088      	lsls	r0, r1, #2
     e72:	ad4e      	add	r5, sp, #312	; 0x138
     e74:	4405      	add	r5, r0
     e76:	ed95 7a00 	vldr	s14, [r5]
     e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
                        mat1.m[r][1] * mat2.m[1][c] +
     e7e:	ed92 7a01 	vldr	s14, [r2, #4]
     e82:	1d0d      	adds	r5, r1, #4
     e84:	ae4e      	add	r6, sp, #312	; 0x138
     e86:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     e8a:	edd5 6a00 	vldr	s13, [r5]
     e8e:	ee27 7a26 	vmul.f32	s14, s14, s13
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     e92:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][2] * mat2.m[2][c] +
     e96:	ed92 7a02 	vldr	s14, [r2, #8]
     e9a:	f101 0508 	add.w	r5, r1, #8
     e9e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     ea2:	edd5 6a00 	vldr	s13, [r5]
     ea6:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][1] * mat2.m[1][c] +
     eaa:	ee77 7a87 	vadd.f32	s15, s15, s14
                        mat1.m[r][3] * mat2.m[3][c];
     eae:	ed92 7a03 	vldr	s14, [r2, #12]
     eb2:	f101 020c 	add.w	r2, r1, #12
     eb6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
     eba:	edd2 6a00 	vldr	s13, [r2]
     ebe:	ee27 7a26 	vmul.f32	s14, s14, s13
                        mat1.m[r][2] * mat2.m[2][c] +
     ec2:	ee77 7a87 	vadd.f32	s15, s15, s14
        lcRet.m[c][r] = mat1.m[r][0] * mat2.m[0][c] +
     ec6:	4418      	add	r0, r3
     ec8:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
     ecc:	edc0 7a00 	vstr	s15, [r0]
      for (r = 0; r < 4; r++)
     ed0:	3301      	adds	r3, #1
     ed2:	b2db      	uxtb	r3, r3
     ed4:	e7c5      	b.n	e62 <main+0xe62>
    *this = lcRet;
     ed6:	2258      	movs	r2, #88	; 0x58
     ed8:	4669      	mov	r1, sp
     eda:	a838      	add	r0, sp, #224	; 0xe0
     edc:	f7ff fffe 	bl	0 <memcpy>	edc: R_ARM_THM_CALL	memcpy
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
     ee0:	3401      	adds	r4, #1
     ee2:	f242 730f 	movw	r3, #9999	; 0x270f
     ee6:	429c      	cmp	r4, r3
     ee8:	d813      	bhi.n	f12 <main+0xf12>
    arm_mat_init_f32(&mstMat1, 4, 4, null);
     eea:	2300      	movs	r3, #0
     eec:	2204      	movs	r2, #4
     eee:	4611      	mov	r1, r2
     ef0:	a810      	add	r0, sp, #64	; 0x40
     ef2:	f7ff fffe 	bl	0 <arm_mat_init_f32>	ef2: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstMat2, 4, 4, null);
     ef6:	2300      	movs	r3, #0
     ef8:	2204      	movs	r2, #4
     efa:	4611      	mov	r1, r2
     efc:	a812      	add	r0, sp, #72	; 0x48
     efe:	f7ff fffe 	bl	0 <arm_mat_init_f32>	efe: R_ARM_THM_CALL	arm_mat_init_f32
    arm_mat_init_f32(&mstRet, 4, 4, (float*)m);
     f02:	466b      	mov	r3, sp
     f04:	2204      	movs	r2, #4
     f06:	4611      	mov	r1, r2
     f08:	a814      	add	r0, sp, #80	; 0x50
     f0a:	f7ff fffe 	bl	0 <arm_mat_init_f32>	f0a: R_ARM_THM_CALL	arm_mat_init_f32
    for (c = 0; c < 4; c++)
     f0e:	2100      	movs	r1, #0
     f10:	e47c      	b.n	80c <main+0x80c>
  lcStrOutput.Setf("4x4 Matrix Mul Raw Test: %s us", mcDiffTimer.toString());
     f12:	485c      	ldr	r0, [pc, #368]	; (1084 <main+0x1084>)
     f14:	f7ff fffe 	bl	0 <main>	f14: R_ARM_THM_CALL	cDiffTimer::toString()
     f18:	4602      	mov	r2, r0
     f1a:	495b      	ldr	r1, [pc, #364]	; (1088 <main+0x1088>)
     f1c:	a816      	add	r0, sp, #88	; 0x58
     f1e:	f7ff fffe 	bl	0 <main>	f1e: R_ARM_THM_CALL	cStrBaseT<unsigned short>::Setf(char const*, ...)
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
     f22:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
     f26:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
      if (luiFreeByteCnt)
     f2a:	429a      	cmp	r2, r3
     f2c:	d008      	beq.n	f40 <main+0xf40>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
     f2e:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
     f32:	2100      	movs	r1, #0
     f34:	54d1      	strb	r1, [r2, r3]
        muiLen++;
     f36:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
     f3a:	3301      	adds	r3, #1
     f3c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
      return (char8*)cbArrayT<tyCStrT>::mpu8Data;
     f40:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
      mstStartPos.x = lixDestX;
     f44:	4b51      	ldr	r3, [pc, #324]	; (108c <main+0x108c>)
     f46:	2100      	movs	r1, #0
     f48:	8499      	strh	r1, [r3, #36]	; 0x24
      mstStartPos.y = lixDestY;
     f4a:	2164      	movs	r1, #100	; 0x64
     f4c:	84d9      	strh	r1, [r3, #38]	; 0x26
    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
     f4e:	4613      	mov	r3, r2
     f50:	f993 1000 	ldrsb.w	r1, [r3]
     f54:	b109      	cbz	r1, f5a <main+0xf5a>
     f56:	3301      	adds	r3, #1
     f58:	e7fa      	b.n	f50 <main+0xf50>
    return (lpszTemp - lpszSrc);
     f5a:	1a9b      	subs	r3, r3, r2
      cbArrayExtT<tyCStrT>::muiLen = (CSTRT_UINT)cStrT_strlen(lszStr);
     f5c:	b29b      	uxth	r3, r3
     f5e:	484b      	ldr	r0, [pc, #300]	; (108c <main+0x108c>)
     f60:	8443      	strh	r3, [r0, #34]	; 0x22
      cbArrayT<tyCStrT>::muiSize = cbArrayExtT<tyCStrT>::muiLen;
     f62:	8383      	strh	r3, [r0, #28]
      cbArrayT<tyCStrT>::mpu8Data = (uint8*)lszStr;
     f64:	f8c0 201e 	str.w	r2, [r0, #30]
      return i8PutString(lpcScr, lbSizeOnly);
     f68:	6803      	ldr	r3, [r0, #0]
     f6a:	681b      	ldr	r3, [r3, #0]
     f6c:	2200      	movs	r2, #0
     f6e:	4948      	ldr	r1, [pc, #288]	; (1090 <main+0x1090>)
     f70:	4798      	blx	r3
     f72:	90a2      	str	r0, [sp, #648]	; 0x288
  ILI9341_Show(&mc16GBm);
     f74:	4847      	ldr	r0, [pc, #284]	; (1094 <main+0x1094>)
     f76:	f7ff fffe 	bl	0 <ILI9341_Show>	f76: R_ARM_THM_CALL	ILI9341_Show
  asm("nop"); // for breakpoint
     f7a:	bf00      	nop
  asm("nop"); // for breakpoint
     f7c:	bf00      	nop
     f7e:	f7ff fffe 	bl	0 <u32GetTimer>	f7e: R_ARM_THM_CALL	u32GetTimer
     f82:	4b40      	ldr	r3, [pc, #256]	; (1084 <main+0x1084>)
     f84:	60d8      	str	r0, [r3, #12]
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
     f86:	2700      	movs	r7, #0
     f88:	f242 730f 	movw	r3, #9999	; 0x270f
     f8c:	429f      	cmp	r7, r3
     f8e:	d854      	bhi.n	103a <main+0x103a>
    mstMat1.pData = (float*)mat1.m;
     f90:	ac38      	add	r4, sp, #224	; 0xe0
     f92:	ae64      	add	r6, sp, #400	; 0x190
     f94:	6466      	str	r6, [r4, #68]	; 0x44
    mstMat2.pData = (float*)mat2.m;
     f96:	ad4e      	add	r5, sp, #312	; 0x138
     f98:	64e5      	str	r5, [r4, #76]	; 0x4c
    mstRet.pData = (float*)m;
     f9a:	6564      	str	r4, [r4, #84]	; 0x54
    arm_mat_mult_f32(&mstMat1, &mstMat2, &mstRet);
     f9c:	aa4c      	add	r2, sp, #304	; 0x130
     f9e:	a94a      	add	r1, sp, #296	; 0x128
     fa0:	a848      	add	r0, sp, #288	; 0x120
     fa2:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	fa2: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat1.pData = (float*)mat1.m;
     fa6:	6466      	str	r6, [r4, #68]	; 0x44
    mstMat2.pData = (float*)mat2.m;
     fa8:	64e5      	str	r5, [r4, #76]	; 0x4c
    mstRet.pData = (float*)m;
     faa:	6564      	str	r4, [r4, #84]	; 0x54
    arm_mat_mult_f32(&mstMat1, &mstMat2, &mstRet);
     fac:	aa4c      	add	r2, sp, #304	; 0x130
     fae:	a94a      	add	r1, sp, #296	; 0x128
     fb0:	a848      	add	r0, sp, #288	; 0x120
     fb2:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	fb2: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat1.pData = (float*)mat1.m;
     fb6:	6466      	str	r6, [r4, #68]	; 0x44
    mstMat2.pData = (float*)mat2.m;
     fb8:	64e5      	str	r5, [r4, #76]	; 0x4c
    mstRet.pData = (float*)m;
     fba:	6564      	str	r4, [r4, #84]	; 0x54
    arm_mat_mult_f32(&mstMat1, &mstMat2, &mstRet);
     fbc:	aa4c      	add	r2, sp, #304	; 0x130
     fbe:	a94a      	add	r1, sp, #296	; 0x128
     fc0:	a848      	add	r0, sp, #288	; 0x120
     fc2:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	fc2: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat1.pData = (float*)mat1.m;
     fc6:	6466      	str	r6, [r4, #68]	; 0x44
    mstMat2.pData = (float*)mat2.m;
     fc8:	64e5      	str	r5, [r4, #76]	; 0x4c
    mstRet.pData = (float*)m;
     fca:	6564      	str	r4, [r4, #84]	; 0x54
    arm_mat_mult_f32(&mstMat1, &mstMat2, &mstRet);
     fcc:	aa4c      	add	r2, sp, #304	; 0x130
     fce:	a94a      	add	r1, sp, #296	; 0x128
     fd0:	a848      	add	r0, sp, #288	; 0x120
     fd2:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	fd2: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat1.pData = (float*)mat1.m;
     fd6:	6466      	str	r6, [r4, #68]	; 0x44
    mstMat2.pData = (float*)mat2.m;
     fd8:	64e5      	str	r5, [r4, #76]	; 0x4c
    mstRet.pData = (float*)m;
     fda:	6564      	str	r4, [r4, #84]	; 0x54
    arm_mat_mult_f32(&mstMat1, &mstMat2, &mstRet);
     fdc:	aa4c      	add	r2, sp, #304	; 0x130
     fde:	a94a      	add	r1, sp, #296	; 0x128
     fe0:	a848      	add	r0, sp, #288	; 0x120
     fe2:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	fe2: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat1.pData = (float*)mat1.m;
     fe6:	6466      	str	r6, [r4, #68]	; 0x44
    mstMat2.pData = (float*)mat2.m;
     fe8:	64e5      	str	r5, [r4, #76]	; 0x4c
    mstRet.pData = (float*)m;
     fea:	6564      	str	r4, [r4, #84]	; 0x54
    arm_mat_mult_f32(&mstMat1, &mstMat2, &mstRet);
     fec:	aa4c      	add	r2, sp, #304	; 0x130
     fee:	a94a      	add	r1, sp, #296	; 0x128
     ff0:	a848      	add	r0, sp, #288	; 0x120
     ff2:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	ff2: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat1.pData = (float*)mat1.m;
     ff6:	6466      	str	r6, [r4, #68]	; 0x44
    mstMat2.pData = (float*)mat2.m;
     ff8:	64e5      	str	r5, [r4, #76]	; 0x4c
    mstRet.pData = (float*)m;
     ffa:	6564      	str	r4, [r4, #84]	; 0x54
    arm_mat_mult_f32(&mstMat1, &mstMat2, &mstRet);
     ffc:	aa4c      	add	r2, sp, #304	; 0x130
     ffe:	a94a      	add	r1, sp, #296	; 0x128
    1000:	a848      	add	r0, sp, #288	; 0x120
    1002:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	1002: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat1.pData = (float*)mat1.m;
    1006:	6466      	str	r6, [r4, #68]	; 0x44
    mstMat2.pData = (float*)mat2.m;
    1008:	64e5      	str	r5, [r4, #76]	; 0x4c
    mstRet.pData = (float*)m;
    100a:	6564      	str	r4, [r4, #84]	; 0x54
    arm_mat_mult_f32(&mstMat1, &mstMat2, &mstRet);
    100c:	aa4c      	add	r2, sp, #304	; 0x130
    100e:	a94a      	add	r1, sp, #296	; 0x128
    1010:	a848      	add	r0, sp, #288	; 0x120
    1012:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	1012: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat1.pData = (float*)mat1.m;
    1016:	6466      	str	r6, [r4, #68]	; 0x44
    mstMat2.pData = (float*)mat2.m;
    1018:	64e5      	str	r5, [r4, #76]	; 0x4c
    mstRet.pData = (float*)m;
    101a:	6564      	str	r4, [r4, #84]	; 0x54
    arm_mat_mult_f32(&mstMat1, &mstMat2, &mstRet);
    101c:	aa4c      	add	r2, sp, #304	; 0x130
    101e:	a94a      	add	r1, sp, #296	; 0x128
    1020:	a848      	add	r0, sp, #288	; 0x120
    1022:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	1022: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat1.pData = (float*)mat1.m;
    1026:	6466      	str	r6, [r4, #68]	; 0x44
    mstMat2.pData = (float*)mat2.m;
    1028:	64e5      	str	r5, [r4, #76]	; 0x4c
    mstRet.pData = (float*)m;
    102a:	6564      	str	r4, [r4, #84]	; 0x54
    arm_mat_mult_f32(&mstMat1, &mstMat2, &mstRet);
    102c:	aa4c      	add	r2, sp, #304	; 0x130
    102e:	a94a      	add	r1, sp, #296	; 0x128
    1030:	a848      	add	r0, sp, #288	; 0x120
    1032:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	1032: R_ARM_THM_CALL	arm_mat_mult_f32
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
    1036:	3701      	adds	r7, #1
    1038:	e7a6      	b.n	f88 <main+0xf88>
  lcStrOutput.Setf("4x4 Matrix Mul DspLib Test: %s us", mcDiffTimer.toString());
    103a:	4812      	ldr	r0, [pc, #72]	; (1084 <main+0x1084>)
    103c:	f7ff fffe 	bl	0 <main>	103c: R_ARM_THM_CALL	cDiffTimer::toString()
    1040:	4602      	mov	r2, r0
    1042:	4915      	ldr	r1, [pc, #84]	; (1098 <main+0x1098>)
    1044:	a816      	add	r0, sp, #88	; 0x58
    1046:	f7ff fffe 	bl	0 <main>	1046: R_ARM_THM_CALL	cStrBaseT<unsigned short>::Setf(char const*, ...)
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
    104a:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    104e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
      if (luiFreeByteCnt)
    1052:	429a      	cmp	r2, r3
    1054:	d008      	beq.n	1068 <main+0x1068>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
    1056:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
    105a:	2100      	movs	r1, #0
    105c:	54d1      	strb	r1, [r2, r3]
        muiLen++;
    105e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    1062:	3301      	adds	r3, #1
    1064:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
      return (char8*)cbArrayT<tyCStrT>::mpu8Data;
    1068:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
      mstStartPos.x = lixDestX;
    106c:	4b07      	ldr	r3, [pc, #28]	; (108c <main+0x108c>)
    106e:	2100      	movs	r1, #0
    1070:	8499      	strh	r1, [r3, #36]	; 0x24
      mstStartPos.y = lixDestY;
    1072:	216e      	movs	r1, #110	; 0x6e
    1074:	84d9      	strh	r1, [r3, #38]	; 0x26
    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
    1076:	4613      	mov	r3, r2
    1078:	f993 1000 	ldrsb.w	r1, [r3]
    107c:	b171      	cbz	r1, 109c <main+0x109c>
    107e:	3301      	adds	r3, #1
    1080:	e7fa      	b.n	1078 <main+0x1078>
    1082:	bf00      	nop
    1084:	00000000 	.word	0x00000000	1084: R_ARM_ABS32	.bss.mcDiffTimer
    1088:	00000090 	.word	0x00000090	1088: R_ARM_ABS32	.rodata.main.str1.4
	...
	108c: R_ARM_ABS32	.bss.cRFont_Res8b_Bpp1_1G_Full
	1090: R_ARM_ABS32	.bss.mc16GScreen1
	1094: R_ARM_ABS32	.bss.mc16GBm
    1098:	000000b0 	.word	0x000000b0	1098: R_ARM_ABS32	.rodata.main.str1.4
    return (lpszTemp - lpszSrc);
    109c:	1a9b      	subs	r3, r3, r2
      cbArrayExtT<tyCStrT>::muiLen = (CSTRT_UINT)cStrT_strlen(lszStr);
    109e:	b29b      	uxth	r3, r3
    10a0:	4810      	ldr	r0, [pc, #64]	; (10e4 <main+0x10e4>)
    10a2:	8443      	strh	r3, [r0, #34]	; 0x22
      cbArrayT<tyCStrT>::muiSize = cbArrayExtT<tyCStrT>::muiLen;
    10a4:	8383      	strh	r3, [r0, #28]
      cbArrayT<tyCStrT>::mpu8Data = (uint8*)lszStr;
    10a6:	f8c0 201e 	str.w	r2, [r0, #30]
      return i8PutString(lpcScr, lbSizeOnly);
    10aa:	6803      	ldr	r3, [r0, #0]
    10ac:	681b      	ldr	r3, [r3, #0]
    10ae:	2200      	movs	r2, #0
    10b0:	490d      	ldr	r1, [pc, #52]	; (10e8 <main+0x10e8>)
    10b2:	4798      	blx	r3
    10b4:	90a3      	str	r0, [sp, #652]	; 0x28c
  ILI9341_Show(&mc16GBm);
    10b6:	480d      	ldr	r0, [pc, #52]	; (10ec <main+0x10ec>)
    10b8:	f7ff fffe 	bl	0 <ILI9341_Show>	10b8: R_ARM_THM_CALL	ILI9341_Show
  asm("nop"); // for breakpoint
    10bc:	bf00      	nop
  asm("nop"); // for breakpoint
    10be:	bf00      	nop
  lcVec2 = lcVec1;
    10c0:	ac18      	add	r4, sp, #96	; 0x60
    10c2:	ad26      	add	r5, sp, #152	; 0x98
    10c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    10c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    10c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    10ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    10cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    10ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    10d0:	e895 0003 	ldmia.w	r5, {r0, r1}
    10d4:	e884 0003 	stmia.w	r4, {r0, r1}
    10d8:	f7ff fffe 	bl	0 <u32GetTimer>	10d8: R_ARM_THM_CALL	u32GetTimer
    10dc:	4b04      	ldr	r3, [pc, #16]	; (10f0 <main+0x10f0>)
    10de:	60d8      	str	r0, [r3, #12]
    for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
    10e0:	2300      	movs	r3, #0
    10e2:	e007      	b.n	10f4 <main+0x10f4>
	...
	10e4: R_ARM_ABS32	.bss.cRFont_Res8b_Bpp1_1G_Full
	10e8: R_ARM_ABS32	.bss.mc16GScreen1
	10ec: R_ARM_ABS32	.bss.mc16GBm
	10f0: R_ARM_ABS32	.bss.mcDiffTimer
    10f4:	f242 720f 	movw	r2, #9999	; 0x270f
    10f8:	4293      	cmp	r3, r2
    10fa:	f200 827c 	bhi.w	15f6 <main+0x15f6>
    nret[0] = v.n[0] * m.m[0][0] + v.n[1] * m.m[0][1] + v.n[2] * m.m[0][2] + v.n[3] * m.m[0][3];
    10fe:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
    1102:	ed9d 4a4e 	vldr	s8, [sp, #312]	; 0x138
    1106:	ee27 6a84 	vmul.f32	s12, s15, s8
    110a:	ed9d 1a19 	vldr	s2, [sp, #100]	; 0x64
    110e:	eddd 2a4f 	vldr	s5, [sp, #316]	; 0x13c
    1112:	ee21 7a22 	vmul.f32	s14, s2, s5
    1116:	ee36 6a07 	vadd.f32	s12, s12, s14
    111a:	ed9d 5a1a 	vldr	s10, [sp, #104]	; 0x68
    111e:	ed9d 3a50 	vldr	s6, [sp, #320]	; 0x140
    1122:	ee25 7a03 	vmul.f32	s14, s10, s6
    1126:	ee36 6a07 	vadd.f32	s12, s12, s14
    112a:	eddd 6a1b 	vldr	s13, [sp, #108]	; 0x6c
    112e:	eddd 3a51 	vldr	s7, [sp, #324]	; 0x144
    1132:	ee26 7aa3 	vmul.f32	s14, s13, s7
    1136:	ee36 6a07 	vadd.f32	s12, s12, s14
    nret[1] = v.n[0] * m.m[1][0] + v.n[1] * m.m[1][1] + v.n[2] * m.m[1][2] + v.n[3] * m.m[1][3];
    113a:	eddd 4a52 	vldr	s9, [sp, #328]	; 0x148
    113e:	ee27 baa4 	vmul.f32	s22, s15, s9
    1142:	ed9d aa53 	vldr	s20, [sp, #332]	; 0x14c
    1146:	ee21 7a0a 	vmul.f32	s14, s2, s20
    114a:	ee3b ba07 	vadd.f32	s22, s22, s14
    114e:	eddd 9a54 	vldr	s19, [sp, #336]	; 0x150
    1152:	ee25 7a29 	vmul.f32	s14, s10, s19
    1156:	ee3b ba07 	vadd.f32	s22, s22, s14
    115a:	ed9d 9a55 	vldr	s18, [sp, #340]	; 0x154
    115e:	ee26 7a89 	vmul.f32	s14, s13, s18
    1162:	ee3b ba07 	vadd.f32	s22, s22, s14
    nret[2] = v.n[0] * m.m[2][0] + v.n[1] * m.m[2][1] + v.n[2] * m.m[2][2] + v.n[3] * m.m[2][3];
    1166:	ed9d 7a56 	vldr	s14, [sp, #344]	; 0x158
    116a:	ee67 aa87 	vmul.f32	s21, s15, s14
    116e:	eddd 8a57 	vldr	s17, [sp, #348]	; 0x15c
    1172:	ee61 5a28 	vmul.f32	s11, s2, s17
    1176:	ee7a aaa5 	vadd.f32	s21, s21, s11
    117a:	eddd 1a58 	vldr	s3, [sp, #352]	; 0x160
    117e:	ee65 5a21 	vmul.f32	s11, s10, s3
    1182:	ee7a aaa5 	vadd.f32	s21, s21, s11
    1186:	ed9d 2a59 	vldr	s4, [sp, #356]	; 0x164
    118a:	ee66 5a82 	vmul.f32	s11, s13, s4
    118e:	ee7a aaa5 	vadd.f32	s21, s21, s11
    nret[3] = v.n[0] * m.m[3][0] + v.n[1] * m.m[3][1] + v.n[2] * m.m[3][2] + v.n[3] * m.m[3][3];
    1192:	ed9d 8a5a 	vldr	s16, [sp, #360]	; 0x168
    1196:	ee67 5a88 	vmul.f32	s11, s15, s16
    119a:	ed9d 0a5b 	vldr	s0, [sp, #364]	; 0x16c
    119e:	ee21 1a00 	vmul.f32	s2, s2, s0
    11a2:	ee75 5a81 	vadd.f32	s11, s11, s2
    11a6:	eddd 0a5c 	vldr	s1, [sp, #368]	; 0x170
    11aa:	ee25 5a20 	vmul.f32	s10, s10, s1
    11ae:	ee75 5a85 	vadd.f32	s11, s11, s10
    11b2:	ed9d 1a5d 	vldr	s2, [sp, #372]	; 0x174
    11b6:	ee66 6a81 	vmul.f32	s13, s13, s2
    11ba:	ee75 5aa6 	vadd.f32	s11, s11, s13
    nret[0] = v.n[0] * m.m[0][0] + v.n[1] * m.m[0][1] + v.n[2] * m.m[0][2] + v.n[3] * m.m[0][3];
    11be:	ee66 6a04 	vmul.f32	s13, s12, s8
    11c2:	ee6b 7a22 	vmul.f32	s15, s22, s5
    11c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
    11ca:	ee6a 7a83 	vmul.f32	s15, s21, s6
    11ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
    11d2:	ee65 7aa3 	vmul.f32	s15, s11, s7
    11d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
    nret[1] = v.n[0] * m.m[1][0] + v.n[1] * m.m[1][1] + v.n[2] * m.m[1][2] + v.n[3] * m.m[1][3];
    11da:	ee66 ba24 	vmul.f32	s23, s12, s9
    11de:	ee6b 7a0a 	vmul.f32	s15, s22, s20
    11e2:	ee7b baa7 	vadd.f32	s23, s23, s15
    11e6:	ee6a 7aa9 	vmul.f32	s15, s21, s19
    11ea:	ee7b baa7 	vadd.f32	s23, s23, s15
    11ee:	ee65 7a89 	vmul.f32	s15, s11, s18
    11f2:	ee7b baa7 	vadd.f32	s23, s23, s15
    nret[2] = v.n[0] * m.m[2][0] + v.n[1] * m.m[2][1] + v.n[2] * m.m[2][2] + v.n[3] * m.m[2][3];
    11f6:	ee66 7a07 	vmul.f32	s15, s12, s14
    11fa:	ee2b 5a28 	vmul.f32	s10, s22, s17
    11fe:	ee77 7a85 	vadd.f32	s15, s15, s10
    1202:	ee2a 5aa1 	vmul.f32	s10, s21, s3
    1206:	ee77 7a85 	vadd.f32	s15, s15, s10
    120a:	ee25 5a82 	vmul.f32	s10, s11, s4
    120e:	ee77 7a85 	vadd.f32	s15, s15, s10
    nret[3] = v.n[0] * m.m[3][0] + v.n[1] * m.m[3][1] + v.n[2] * m.m[3][2] + v.n[3] * m.m[3][3];
    1212:	ee26 5a08 	vmul.f32	s10, s12, s16
    1216:	ee2b ba00 	vmul.f32	s22, s22, s0
    121a:	ee35 5a0b 	vadd.f32	s10, s10, s22
    121e:	ee6a aaa0 	vmul.f32	s21, s21, s1
    1222:	ee35 5a2a 	vadd.f32	s10, s10, s21
    1226:	ee25 6a81 	vmul.f32	s12, s11, s2
    122a:	ee35 5a06 	vadd.f32	s10, s10, s12
    nret[0] = v.n[0] * m.m[0][0] + v.n[1] * m.m[0][1] + v.n[2] * m.m[0][2] + v.n[3] * m.m[0][3];
    122e:	ee26 6a84 	vmul.f32	s12, s13, s8
    1232:	ee6b 5aa2 	vmul.f32	s11, s23, s5
    1236:	ee36 6a25 	vadd.f32	s12, s12, s11
    123a:	ee67 5a83 	vmul.f32	s11, s15, s6
    123e:	ee36 6a25 	vadd.f32	s12, s12, s11
    1242:	ee65 5a23 	vmul.f32	s11, s10, s7
    1246:	ee36 6a25 	vadd.f32	s12, s12, s11
    nret[1] = v.n[0] * m.m[1][0] + v.n[1] * m.m[1][1] + v.n[2] * m.m[1][2] + v.n[3] * m.m[1][3];
    124a:	ee66 aaa4 	vmul.f32	s21, s13, s9
    124e:	ee6b 5a8a 	vmul.f32	s11, s23, s20
    1252:	ee7a aaa5 	vadd.f32	s21, s21, s11
    1256:	ee67 5aa9 	vmul.f32	s11, s15, s19
    125a:	ee7a aaa5 	vadd.f32	s21, s21, s11
    125e:	ee65 5a09 	vmul.f32	s11, s10, s18
    1262:	ee7a aaa5 	vadd.f32	s21, s21, s11
    nret[2] = v.n[0] * m.m[2][0] + v.n[1] * m.m[2][1] + v.n[2] * m.m[2][2] + v.n[3] * m.m[2][3];
    1266:	ee26 ba87 	vmul.f32	s22, s13, s14
    126a:	ee6b 5aa8 	vmul.f32	s11, s23, s17
    126e:	ee3b ba25 	vadd.f32	s22, s22, s11
    1272:	ee67 5aa1 	vmul.f32	s11, s15, s3
    1276:	ee3b ba25 	vadd.f32	s22, s22, s11
    127a:	ee65 5a02 	vmul.f32	s11, s10, s4
    127e:	ee3b ba25 	vadd.f32	s22, s22, s11
    nret[3] = v.n[0] * m.m[3][0] + v.n[1] * m.m[3][1] + v.n[2] * m.m[3][2] + v.n[3] * m.m[3][3];
    1282:	ee66 5a88 	vmul.f32	s11, s13, s16
    1286:	ee6b 6a80 	vmul.f32	s13, s23, s0
    128a:	ee75 5aa6 	vadd.f32	s11, s11, s13
    128e:	ee67 7aa0 	vmul.f32	s15, s15, s1
    1292:	ee75 5aa7 	vadd.f32	s11, s11, s15
    1296:	ee65 7a01 	vmul.f32	s15, s10, s2
    129a:	ee75 5aa7 	vadd.f32	s11, s11, s15
    nret[0] = v.n[0] * m.m[0][0] + v.n[1] * m.m[0][1] + v.n[2] * m.m[0][2] + v.n[3] * m.m[0][3];
    129e:	ee66 6a04 	vmul.f32	s13, s12, s8
    12a2:	ee6a 7aa2 	vmul.f32	s15, s21, s5
    12a6:	ee76 6aa7 	vadd.f32	s13, s13, s15
    12aa:	ee6b 7a03 	vmul.f32	s15, s22, s6
    12ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
    12b2:	ee65 7aa3 	vmul.f32	s15, s11, s7
    12b6:	ee76 6aa7 	vadd.f32	s13, s13, s15
    nret[1] = v.n[0] * m.m[1][0] + v.n[1] * m.m[1][1] + v.n[2] * m.m[1][2] + v.n[3] * m.m[1][3];
    12ba:	ee26 ca24 	vmul.f32	s24, s12, s9
    12be:	ee6a 7a8a 	vmul.f32	s15, s21, s20
    12c2:	ee3c ca27 	vadd.f32	s24, s24, s15
    12c6:	ee6b 7a29 	vmul.f32	s15, s22, s19
    12ca:	ee3c ca27 	vadd.f32	s24, s24, s15
    12ce:	ee65 7a89 	vmul.f32	s15, s11, s18
    12d2:	ee3c ca27 	vadd.f32	s24, s24, s15
    nret[2] = v.n[0] * m.m[2][0] + v.n[1] * m.m[2][1] + v.n[2] * m.m[2][2] + v.n[3] * m.m[2][3];
    12d6:	ee66 7a07 	vmul.f32	s15, s12, s14
    12da:	ee2a 5aa8 	vmul.f32	s10, s21, s17
    12de:	ee77 7a85 	vadd.f32	s15, s15, s10
    12e2:	ee2b 5a21 	vmul.f32	s10, s22, s3
    12e6:	ee77 7a85 	vadd.f32	s15, s15, s10
    12ea:	ee25 5a82 	vmul.f32	s10, s11, s4
    12ee:	ee77 7a85 	vadd.f32	s15, s15, s10
    nret[3] = v.n[0] * m.m[3][0] + v.n[1] * m.m[3][1] + v.n[2] * m.m[3][2] + v.n[3] * m.m[3][3];
    12f2:	ee26 5a08 	vmul.f32	s10, s12, s16
    12f6:	ee6a aa80 	vmul.f32	s21, s21, s0
    12fa:	ee35 5a2a 	vadd.f32	s10, s10, s21
    12fe:	ee2b 6a20 	vmul.f32	s12, s22, s1
    1302:	ee35 5a06 	vadd.f32	s10, s10, s12
    1306:	ee25 6a81 	vmul.f32	s12, s11, s2
    130a:	ee35 5a06 	vadd.f32	s10, s10, s12
    nret[0] = v.n[0] * m.m[0][0] + v.n[1] * m.m[0][1] + v.n[2] * m.m[0][2] + v.n[3] * m.m[0][3];
    130e:	ee26 6a84 	vmul.f32	s12, s13, s8
    1312:	ee6c 5a22 	vmul.f32	s11, s24, s5
    1316:	ee36 6a25 	vadd.f32	s12, s12, s11
    131a:	ee67 5a83 	vmul.f32	s11, s15, s6
    131e:	ee36 6a25 	vadd.f32	s12, s12, s11
    1322:	ee65 5a23 	vmul.f32	s11, s10, s7
    1326:	ee36 6a25 	vadd.f32	s12, s12, s11
    nret[1] = v.n[0] * m.m[1][0] + v.n[1] * m.m[1][1] + v.n[2] * m.m[1][2] + v.n[3] * m.m[1][3];
    132a:	ee26 baa4 	vmul.f32	s22, s13, s9
    132e:	ee6c 5a0a 	vmul.f32	s11, s24, s20
    1332:	ee3b ba25 	vadd.f32	s22, s22, s11
    1336:	ee67 5aa9 	vmul.f32	s11, s15, s19
    133a:	ee3b ba25 	vadd.f32	s22, s22, s11
    133e:	ee65 5a09 	vmul.f32	s11, s10, s18
    1342:	ee3b ba25 	vadd.f32	s22, s22, s11
    nret[2] = v.n[0] * m.m[2][0] + v.n[1] * m.m[2][1] + v.n[2] * m.m[2][2] + v.n[3] * m.m[2][3];
    1346:	ee66 ba87 	vmul.f32	s23, s13, s14
    134a:	ee6c 5a28 	vmul.f32	s11, s24, s17
    134e:	ee7b baa5 	vadd.f32	s23, s23, s11
    1352:	ee67 5aa1 	vmul.f32	s11, s15, s3
    1356:	ee7b baa5 	vadd.f32	s23, s23, s11
    135a:	ee65 5a02 	vmul.f32	s11, s10, s4
    135e:	ee7b baa5 	vadd.f32	s23, s23, s11
    nret[3] = v.n[0] * m.m[3][0] + v.n[1] * m.m[3][1] + v.n[2] * m.m[3][2] + v.n[3] * m.m[3][3];
    1362:	ee66 5a88 	vmul.f32	s11, s13, s16
    1366:	ee6c 6a00 	vmul.f32	s13, s24, s0
    136a:	ee75 5aa6 	vadd.f32	s11, s11, s13
    136e:	ee67 7aa0 	vmul.f32	s15, s15, s1
    1372:	ee75 5aa7 	vadd.f32	s11, s11, s15
    1376:	ee65 7a01 	vmul.f32	s15, s10, s2
    137a:	ee75 5aa7 	vadd.f32	s11, s11, s15
    nret[0] = v.n[0] * m.m[0][0] + v.n[1] * m.m[0][1] + v.n[2] * m.m[0][2] + v.n[3] * m.m[0][3];
    137e:	ee66 6a04 	vmul.f32	s13, s12, s8
    1382:	ee6b 7a22 	vmul.f32	s15, s22, s5
    1386:	ee76 6aa7 	vadd.f32	s13, s13, s15
    138a:	ee6b 7a83 	vmul.f32	s15, s23, s6
    138e:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1392:	ee65 7aa3 	vmul.f32	s15, s11, s7
    1396:	ee76 6aa7 	vadd.f32	s13, s13, s15
    nret[1] = v.n[0] * m.m[1][0] + v.n[1] * m.m[1][1] + v.n[2] * m.m[1][2] + v.n[3] * m.m[1][3];
    139a:	ee66 aa24 	vmul.f32	s21, s12, s9
    139e:	ee6b 7a0a 	vmul.f32	s15, s22, s20
    13a2:	ee7a aaa7 	vadd.f32	s21, s21, s15
    13a6:	ee6b 7aa9 	vmul.f32	s15, s23, s19
    13aa:	ee7a aaa7 	vadd.f32	s21, s21, s15
    13ae:	ee65 7a89 	vmul.f32	s15, s11, s18
    13b2:	ee7a aaa7 	vadd.f32	s21, s21, s15
    nret[2] = v.n[0] * m.m[2][0] + v.n[1] * m.m[2][1] + v.n[2] * m.m[2][2] + v.n[3] * m.m[2][3];
    13b6:	ee66 7a07 	vmul.f32	s15, s12, s14
    13ba:	ee2b 5a28 	vmul.f32	s10, s22, s17
    13be:	ee77 7a85 	vadd.f32	s15, s15, s10
    13c2:	ee2b 5aa1 	vmul.f32	s10, s23, s3
    13c6:	ee77 7a85 	vadd.f32	s15, s15, s10
    13ca:	ee25 5a82 	vmul.f32	s10, s11, s4
    13ce:	ee77 7a85 	vadd.f32	s15, s15, s10
    nret[3] = v.n[0] * m.m[3][0] + v.n[1] * m.m[3][1] + v.n[2] * m.m[3][2] + v.n[3] * m.m[3][3];
    13d2:	ee26 6a08 	vmul.f32	s12, s12, s16
    13d6:	ee2b ba00 	vmul.f32	s22, s22, s0
    13da:	ee36 6a0b 	vadd.f32	s12, s12, s22
    13de:	ee2b 5aa0 	vmul.f32	s10, s23, s1
    13e2:	ee36 6a05 	vadd.f32	s12, s12, s10
    13e6:	ee65 5a81 	vmul.f32	s11, s11, s2
    13ea:	ee36 6a25 	vadd.f32	s12, s12, s11
    nret[0] = v.n[0] * m.m[0][0] + v.n[1] * m.m[0][1] + v.n[2] * m.m[0][2] + v.n[3] * m.m[0][3];
    13ee:	ee66 5a84 	vmul.f32	s11, s13, s8
    13f2:	ee2a 5aa2 	vmul.f32	s10, s21, s5
    13f6:	ee75 5a85 	vadd.f32	s11, s11, s10
    13fa:	ee27 5a83 	vmul.f32	s10, s15, s6
    13fe:	ee75 5a85 	vadd.f32	s11, s11, s10
    1402:	ee26 5a23 	vmul.f32	s10, s12, s7
    1406:	ee75 5a85 	vadd.f32	s11, s11, s10
    nret[1] = v.n[0] * m.m[1][0] + v.n[1] * m.m[1][1] + v.n[2] * m.m[1][2] + v.n[3] * m.m[1][3];
    140a:	ee26 5aa4 	vmul.f32	s10, s13, s9
    140e:	ee2a ba8a 	vmul.f32	s22, s21, s20
    1412:	ee35 5a0b 	vadd.f32	s10, s10, s22
    1416:	ee27 baa9 	vmul.f32	s22, s15, s19
    141a:	ee35 5a0b 	vadd.f32	s10, s10, s22
    141e:	ee26 ba09 	vmul.f32	s22, s12, s18
    1422:	ee35 5a0b 	vadd.f32	s10, s10, s22
    nret[2] = v.n[0] * m.m[2][0] + v.n[1] * m.m[2][1] + v.n[2] * m.m[2][2] + v.n[3] * m.m[2][3];
    1426:	ee66 ba87 	vmul.f32	s23, s13, s14
    142a:	ee2a baa8 	vmul.f32	s22, s21, s17
    142e:	ee7b ba8b 	vadd.f32	s23, s23, s22
    1432:	ee27 baa1 	vmul.f32	s22, s15, s3
    1436:	ee7b ba8b 	vadd.f32	s23, s23, s22
    143a:	ee26 ba02 	vmul.f32	s22, s12, s4
    143e:	ee7b ba8b 	vadd.f32	s23, s23, s22
    nret[3] = v.n[0] * m.m[3][0] + v.n[1] * m.m[3][1] + v.n[2] * m.m[3][2] + v.n[3] * m.m[3][3];
    1442:	ee66 6a88 	vmul.f32	s13, s13, s16
    1446:	ee6a aa80 	vmul.f32	s21, s21, s0
    144a:	ee76 6aaa 	vadd.f32	s13, s13, s21
    144e:	ee67 7aa0 	vmul.f32	s15, s15, s1
    1452:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1456:	ee66 7a01 	vmul.f32	s15, s12, s2
    145a:	ee76 6aa7 	vadd.f32	s13, s13, s15
    nret[0] = v.n[0] * m.m[0][0] + v.n[1] * m.m[0][1] + v.n[2] * m.m[0][2] + v.n[3] * m.m[0][3];
    145e:	ee65 7a84 	vmul.f32	s15, s11, s8
    1462:	ee25 6a22 	vmul.f32	s12, s10, s5
    1466:	ee77 7a86 	vadd.f32	s15, s15, s12
    146a:	ee2b 6a83 	vmul.f32	s12, s23, s6
    146e:	ee77 7a86 	vadd.f32	s15, s15, s12
    1472:	ee26 6aa3 	vmul.f32	s12, s13, s7
    1476:	ee77 7a86 	vadd.f32	s15, s15, s12
    nret[1] = v.n[0] * m.m[1][0] + v.n[1] * m.m[1][1] + v.n[2] * m.m[1][2] + v.n[3] * m.m[1][3];
    147a:	ee25 baa4 	vmul.f32	s22, s11, s9
    147e:	ee25 6a0a 	vmul.f32	s12, s10, s20
    1482:	ee3b ba06 	vadd.f32	s22, s22, s12
    1486:	ee2b 6aa9 	vmul.f32	s12, s23, s19
    148a:	ee3b ba06 	vadd.f32	s22, s22, s12
    148e:	ee26 6a89 	vmul.f32	s12, s13, s18
    1492:	ee3b ba06 	vadd.f32	s22, s22, s12
    nret[2] = v.n[0] * m.m[2][0] + v.n[1] * m.m[2][1] + v.n[2] * m.m[2][2] + v.n[3] * m.m[2][3];
    1496:	ee65 aa87 	vmul.f32	s21, s11, s14
    149a:	ee25 6a28 	vmul.f32	s12, s10, s17
    149e:	ee7a aa86 	vadd.f32	s21, s21, s12
    14a2:	ee2b 6aa1 	vmul.f32	s12, s23, s3
    14a6:	ee7a aa86 	vadd.f32	s21, s21, s12
    14aa:	ee26 6a82 	vmul.f32	s12, s13, s4
    14ae:	ee7a aa86 	vadd.f32	s21, s21, s12
    nret[3] = v.n[0] * m.m[3][0] + v.n[1] * m.m[3][1] + v.n[2] * m.m[3][2] + v.n[3] * m.m[3][3];
    14b2:	ee65 5a88 	vmul.f32	s11, s11, s16
    14b6:	ee25 5a00 	vmul.f32	s10, s10, s0
    14ba:	ee75 5a85 	vadd.f32	s11, s11, s10
    14be:	ee2b 6aa0 	vmul.f32	s12, s23, s1
    14c2:	ee75 5a86 	vadd.f32	s11, s11, s12
    14c6:	ee66 6a81 	vmul.f32	s13, s13, s2
    14ca:	ee75 5aa6 	vadd.f32	s11, s11, s13
    nret[0] = v.n[0] * m.m[0][0] + v.n[1] * m.m[0][1] + v.n[2] * m.m[0][2] + v.n[3] * m.m[0][3];
    14ce:	ee27 6a84 	vmul.f32	s12, s15, s8
    14d2:	ee6b 6a22 	vmul.f32	s13, s22, s5
    14d6:	ee36 6a26 	vadd.f32	s12, s12, s13
    14da:	ee6a 6a83 	vmul.f32	s13, s21, s6
    14de:	ee36 6a26 	vadd.f32	s12, s12, s13
    14e2:	ee65 6aa3 	vmul.f32	s13, s11, s7
    14e6:	ee36 6a26 	vadd.f32	s12, s12, s13
    nret[1] = v.n[0] * m.m[1][0] + v.n[1] * m.m[1][1] + v.n[2] * m.m[1][2] + v.n[3] * m.m[1][3];
    14ea:	ee67 6aa4 	vmul.f32	s13, s15, s9
    14ee:	ee2b aa0a 	vmul.f32	s20, s22, s20
    14f2:	ee36 aa8a 	vadd.f32	s20, s13, s20
    14f6:	ee6a 9aa9 	vmul.f32	s19, s21, s19
    14fa:	ee7a 9a29 	vadd.f32	s19, s20, s19
    14fe:	ee25 9a89 	vmul.f32	s18, s11, s18
    1502:	ee39 5a89 	vadd.f32	s10, s19, s18
    nret[2] = v.n[0] * m.m[2][0] + v.n[1] * m.m[2][1] + v.n[2] * m.m[2][2] + v.n[3] * m.m[2][3];
    1506:	ee67 6a87 	vmul.f32	s13, s15, s14
    150a:	ee6b 8a28 	vmul.f32	s17, s22, s17
    150e:	ee76 6aa8 	vadd.f32	s13, s13, s17
    1512:	ee6a 1aa1 	vmul.f32	s3, s21, s3
    1516:	ee76 6aa1 	vadd.f32	s13, s13, s3
    151a:	ee25 2a82 	vmul.f32	s4, s11, s4
    151e:	ee36 2a82 	vadd.f32	s4, s13, s4
    nret[3] = v.n[0] * m.m[3][0] + v.n[1] * m.m[3][1] + v.n[2] * m.m[3][2] + v.n[3] * m.m[3][3];
    1522:	ee67 6a88 	vmul.f32	s13, s15, s16
    1526:	ee2b 0a00 	vmul.f32	s0, s22, s0
    152a:	ee76 6a80 	vadd.f32	s13, s13, s0
    152e:	ee6a 0aa0 	vmul.f32	s1, s21, s1
    1532:	ee76 6aa0 	vadd.f32	s13, s13, s1
    1536:	ee65 5a81 	vmul.f32	s11, s11, s2
    153a:	ee76 6aa5 	vadd.f32	s13, s13, s11
    nret[0] = v.n[0] * m.m[0][0] + v.n[1] * m.m[0][1] + v.n[2] * m.m[0][2] + v.n[3] * m.m[0][3];
    153e:	ee26 7a04 	vmul.f32	s14, s12, s8
    1542:	ee65 2a22 	vmul.f32	s5, s10, s5
    1546:	ee37 7a22 	vadd.f32	s14, s14, s5
    154a:	ee22 3a03 	vmul.f32	s6, s4, s6
    154e:	ee37 7a03 	vadd.f32	s14, s14, s6
    1552:	ee66 3aa3 	vmul.f32	s7, s13, s7
    1556:	ee37 7a23 	vadd.f32	s14, s14, s7
    155a:	ed8d 7a20 	vstr	s14, [sp, #128]	; 0x80
    nret[1] = v.n[0] * m.m[1][0] + v.n[1] * m.m[1][1] + v.n[2] * m.m[1][2] + v.n[3] * m.m[1][3];
    155e:	ee66 7a24 	vmul.f32	s15, s12, s9
    1562:	eddd 5a53 	vldr	s11, [sp, #332]	; 0x14c
    1566:	ee65 5a25 	vmul.f32	s11, s10, s11
    156a:	ee77 7aa5 	vadd.f32	s15, s15, s11
    156e:	eddd 5a54 	vldr	s11, [sp, #336]	; 0x150
    1572:	ee62 5a25 	vmul.f32	s11, s4, s11
    1576:	ee77 7aa5 	vadd.f32	s15, s15, s11
    157a:	eddd 5a55 	vldr	s11, [sp, #340]	; 0x154
    157e:	ee66 5aa5 	vmul.f32	s11, s13, s11
    1582:	ee77 7aa5 	vadd.f32	s15, s15, s11
    1586:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
    nret[2] = v.n[0] * m.m[2][0] + v.n[1] * m.m[2][1] + v.n[2] * m.m[2][2] + v.n[3] * m.m[2][3];
    158a:	eddd 5a56 	vldr	s11, [sp, #344]	; 0x158
    158e:	ee66 5a25 	vmul.f32	s11, s12, s11
    1592:	eddd 4a57 	vldr	s9, [sp, #348]	; 0x15c
    1596:	ee65 4a24 	vmul.f32	s9, s10, s9
    159a:	ee75 5aa4 	vadd.f32	s11, s11, s9
    159e:	eddd 4a58 	vldr	s9, [sp, #352]	; 0x160
    15a2:	ee62 4a24 	vmul.f32	s9, s4, s9
    15a6:	ee75 5aa4 	vadd.f32	s11, s11, s9
    15aa:	eddd 4a59 	vldr	s9, [sp, #356]	; 0x164
    15ae:	ee66 4aa4 	vmul.f32	s9, s13, s9
    15b2:	ee75 5aa4 	vadd.f32	s11, s11, s9
    15b6:	edcd 5a22 	vstr	s11, [sp, #136]	; 0x88
    nret[3] = v.n[0] * m.m[3][0] + v.n[1] * m.m[3][1] + v.n[2] * m.m[3][2] + v.n[3] * m.m[3][3];
    15ba:	ee26 6a08 	vmul.f32	s12, s12, s16
    15be:	eddd 4a5b 	vldr	s9, [sp, #364]	; 0x16c
    15c2:	ee25 5a24 	vmul.f32	s10, s10, s9
    15c6:	ee36 6a05 	vadd.f32	s12, s12, s10
    15ca:	ed9d 5a5c 	vldr	s10, [sp, #368]	; 0x170
    15ce:	ee22 2a05 	vmul.f32	s4, s4, s10
    15d2:	ee36 6a02 	vadd.f32	s12, s12, s4
    15d6:	ee66 6a81 	vmul.f32	s13, s13, s2
    15da:	ee76 6a26 	vadd.f32	s13, s12, s13
    15de:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
    n[0] = nret[0];
    15e2:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
    n[1] = nret[1];
    15e6:	edcd 7a19 	vstr	s15, [sp, #100]	; 0x64
    n[2] = nret[2];
    15ea:	edcd 5a1a 	vstr	s11, [sp, #104]	; 0x68
    n[3] = nret[3];
    15ee:	edcd 6a1b 	vstr	s13, [sp, #108]	; 0x6c
    for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
    15f2:	3301      	adds	r3, #1
    15f4:	e57e      	b.n	10f4 <main+0x10f4>
  lcStrOutput.Setf("4x4 Matrix Vec Mul Raw Test: %s us", mcDiffTimer.toString());
    15f6:	486c      	ldr	r0, [pc, #432]	; (17a8 <main+0x17a8>)
    15f8:	f7ff fffe 	bl	0 <main>	15f8: R_ARM_THM_CALL	cDiffTimer::toString()
    15fc:	4602      	mov	r2, r0
    15fe:	496b      	ldr	r1, [pc, #428]	; (17ac <main+0x17ac>)
    1600:	a816      	add	r0, sp, #88	; 0x58
    1602:	f7ff fffe 	bl	0 <main>	1602: R_ARM_THM_CALL	cStrBaseT<unsigned short>::Setf(char const*, ...)
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
    1606:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    160a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
      if (luiFreeByteCnt)
    160e:	429a      	cmp	r2, r3
    1610:	d008      	beq.n	1624 <main+0x1624>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
    1612:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
    1616:	2100      	movs	r1, #0
    1618:	54d1      	strb	r1, [r2, r3]
        muiLen++;
    161a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    161e:	3301      	adds	r3, #1
    1620:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
      return (char8*)cbArrayT<tyCStrT>::mpu8Data;
    1624:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
      mstStartPos.x = lixDestX;
    1628:	4b61      	ldr	r3, [pc, #388]	; (17b0 <main+0x17b0>)
    162a:	2100      	movs	r1, #0
    162c:	8499      	strh	r1, [r3, #36]	; 0x24
      mstStartPos.y = lixDestY;
    162e:	2178      	movs	r1, #120	; 0x78
    1630:	84d9      	strh	r1, [r3, #38]	; 0x26
    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
    1632:	4613      	mov	r3, r2
    1634:	f993 1000 	ldrsb.w	r1, [r3]
    1638:	b109      	cbz	r1, 163e <main+0x163e>
    163a:	3301      	adds	r3, #1
    163c:	e7fa      	b.n	1634 <main+0x1634>
    return (lpszTemp - lpszSrc);
    163e:	1a9b      	subs	r3, r3, r2
      cbArrayExtT<tyCStrT>::muiLen = (CSTRT_UINT)cStrT_strlen(lszStr);
    1640:	b29b      	uxth	r3, r3
    1642:	485b      	ldr	r0, [pc, #364]	; (17b0 <main+0x17b0>)
    1644:	8443      	strh	r3, [r0, #34]	; 0x22
      cbArrayT<tyCStrT>::muiSize = cbArrayExtT<tyCStrT>::muiLen;
    1646:	8383      	strh	r3, [r0, #28]
      cbArrayT<tyCStrT>::mpu8Data = (uint8*)lszStr;
    1648:	f8c0 201e 	str.w	r2, [r0, #30]
      return i8PutString(lpcScr, lbSizeOnly);
    164c:	6803      	ldr	r3, [r0, #0]
    164e:	681b      	ldr	r3, [r3, #0]
    1650:	2200      	movs	r2, #0
    1652:	4958      	ldr	r1, [pc, #352]	; (17b4 <main+0x17b4>)
    1654:	4798      	blx	r3
    1656:	90a4      	str	r0, [sp, #656]	; 0x290
  ILI9341_Show(&mc16GBm);
    1658:	4857      	ldr	r0, [pc, #348]	; (17b8 <main+0x17b8>)
    165a:	f7ff fffe 	bl	0 <ILI9341_Show>	165a: R_ARM_THM_CALL	ILI9341_Show
  asm("nop"); // for breakpoint
    165e:	bf00      	nop
  asm("nop"); // for breakpoint
    1660:	bf00      	nop
  lcVec2 = lcVec1;
    1662:	ac18      	add	r4, sp, #96	; 0x60
    1664:	ad26      	add	r5, sp, #152	; 0x98
    1666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    166a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    166c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    166e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1672:	e895 0003 	ldmia.w	r5, {r0, r1}
    1676:	e884 0003 	stmia.w	r4, {r0, r1}
    167a:	f7ff fffe 	bl	0 <u32GetTimer>	167a: R_ARM_THM_CALL	u32GetTimer
    167e:	4b4a      	ldr	r3, [pc, #296]	; (17a8 <main+0x17a8>)
    1680:	60d8      	str	r0, [r3, #12]
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
    1682:	2700      	movs	r7, #0
    1684:	f242 730f 	movw	r3, #9999	; 0x270f
    1688:	429f      	cmp	r7, r3
    168a:	d854      	bhi.n	1736 <main+0x1736>
    mstMat.pData    = (float*)mat.m;
    168c:	ac18      	add	r4, sp, #96	; 0x60
    168e:	ae4e      	add	r6, sp, #312	; 0x138
    1690:	6166      	str	r6, [r4, #20]
    mstVec.pData    = (float*)v.n;
    1692:	61e4      	str	r4, [r4, #28]
    mstRetVec.pData = (float*)v.nret;
    1694:	ad20      	add	r5, sp, #128	; 0x80
    1696:	6365      	str	r5, [r4, #52]	; 0x34
    arm_mat_mult_f32(&mstMat, &mstVec, &mstRetVec);
    1698:	aa24      	add	r2, sp, #144	; 0x90
    169a:	a91e      	add	r1, sp, #120	; 0x78
    169c:	a81c      	add	r0, sp, #112	; 0x70
    169e:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	169e: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat.pData    = (float*)mat.m;
    16a2:	6166      	str	r6, [r4, #20]
    mstVec.pData    = (float*)v.n;
    16a4:	61e4      	str	r4, [r4, #28]
    mstRetVec.pData = (float*)v.nret;
    16a6:	6365      	str	r5, [r4, #52]	; 0x34
    arm_mat_mult_f32(&mstMat, &mstVec, &mstRetVec);
    16a8:	aa24      	add	r2, sp, #144	; 0x90
    16aa:	a91e      	add	r1, sp, #120	; 0x78
    16ac:	a81c      	add	r0, sp, #112	; 0x70
    16ae:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	16ae: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat.pData    = (float*)mat.m;
    16b2:	6166      	str	r6, [r4, #20]
    mstVec.pData    = (float*)v.n;
    16b4:	61e4      	str	r4, [r4, #28]
    mstRetVec.pData = (float*)v.nret;
    16b6:	6365      	str	r5, [r4, #52]	; 0x34
    arm_mat_mult_f32(&mstMat, &mstVec, &mstRetVec);
    16b8:	aa24      	add	r2, sp, #144	; 0x90
    16ba:	a91e      	add	r1, sp, #120	; 0x78
    16bc:	a81c      	add	r0, sp, #112	; 0x70
    16be:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	16be: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat.pData    = (float*)mat.m;
    16c2:	6166      	str	r6, [r4, #20]
    mstVec.pData    = (float*)v.n;
    16c4:	61e4      	str	r4, [r4, #28]
    mstRetVec.pData = (float*)v.nret;
    16c6:	6365      	str	r5, [r4, #52]	; 0x34
    arm_mat_mult_f32(&mstMat, &mstVec, &mstRetVec);
    16c8:	aa24      	add	r2, sp, #144	; 0x90
    16ca:	a91e      	add	r1, sp, #120	; 0x78
    16cc:	a81c      	add	r0, sp, #112	; 0x70
    16ce:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	16ce: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat.pData    = (float*)mat.m;
    16d2:	6166      	str	r6, [r4, #20]
    mstVec.pData    = (float*)v.n;
    16d4:	61e4      	str	r4, [r4, #28]
    mstRetVec.pData = (float*)v.nret;
    16d6:	6365      	str	r5, [r4, #52]	; 0x34
    arm_mat_mult_f32(&mstMat, &mstVec, &mstRetVec);
    16d8:	aa24      	add	r2, sp, #144	; 0x90
    16da:	a91e      	add	r1, sp, #120	; 0x78
    16dc:	a81c      	add	r0, sp, #112	; 0x70
    16de:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	16de: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat.pData    = (float*)mat.m;
    16e2:	6166      	str	r6, [r4, #20]
    mstVec.pData    = (float*)v.n;
    16e4:	61e4      	str	r4, [r4, #28]
    mstRetVec.pData = (float*)v.nret;
    16e6:	6365      	str	r5, [r4, #52]	; 0x34
    arm_mat_mult_f32(&mstMat, &mstVec, &mstRetVec);
    16e8:	aa24      	add	r2, sp, #144	; 0x90
    16ea:	a91e      	add	r1, sp, #120	; 0x78
    16ec:	a81c      	add	r0, sp, #112	; 0x70
    16ee:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	16ee: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat.pData    = (float*)mat.m;
    16f2:	6166      	str	r6, [r4, #20]
    mstVec.pData    = (float*)v.n;
    16f4:	61e4      	str	r4, [r4, #28]
    mstRetVec.pData = (float*)v.nret;
    16f6:	6365      	str	r5, [r4, #52]	; 0x34
    arm_mat_mult_f32(&mstMat, &mstVec, &mstRetVec);
    16f8:	aa24      	add	r2, sp, #144	; 0x90
    16fa:	a91e      	add	r1, sp, #120	; 0x78
    16fc:	a81c      	add	r0, sp, #112	; 0x70
    16fe:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	16fe: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat.pData    = (float*)mat.m;
    1702:	6166      	str	r6, [r4, #20]
    mstVec.pData    = (float*)v.n;
    1704:	61e4      	str	r4, [r4, #28]
    mstRetVec.pData = (float*)v.nret;
    1706:	6365      	str	r5, [r4, #52]	; 0x34
    arm_mat_mult_f32(&mstMat, &mstVec, &mstRetVec);
    1708:	aa24      	add	r2, sp, #144	; 0x90
    170a:	a91e      	add	r1, sp, #120	; 0x78
    170c:	a81c      	add	r0, sp, #112	; 0x70
    170e:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	170e: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat.pData    = (float*)mat.m;
    1712:	6166      	str	r6, [r4, #20]
    mstVec.pData    = (float*)v.n;
    1714:	61e4      	str	r4, [r4, #28]
    mstRetVec.pData = (float*)v.nret;
    1716:	6365      	str	r5, [r4, #52]	; 0x34
    arm_mat_mult_f32(&mstMat, &mstVec, &mstRetVec);
    1718:	aa24      	add	r2, sp, #144	; 0x90
    171a:	a91e      	add	r1, sp, #120	; 0x78
    171c:	a81c      	add	r0, sp, #112	; 0x70
    171e:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	171e: R_ARM_THM_CALL	arm_mat_mult_f32
    mstMat.pData    = (float*)mat.m;
    1722:	6166      	str	r6, [r4, #20]
    mstVec.pData    = (float*)v.n;
    1724:	61e4      	str	r4, [r4, #28]
    mstRetVec.pData = (float*)v.nret;
    1726:	6365      	str	r5, [r4, #52]	; 0x34
    arm_mat_mult_f32(&mstMat, &mstVec, &mstRetVec);
    1728:	aa24      	add	r2, sp, #144	; 0x90
    172a:	a91e      	add	r1, sp, #120	; 0x78
    172c:	a81c      	add	r0, sp, #112	; 0x70
    172e:	f7ff fffe 	bl	0 <arm_mat_mult_f32>	172e: R_ARM_THM_CALL	arm_mat_mult_f32
  for (lu32TestLoop = 0; lu32TestLoop < TEST_REPETITIONS; lu32TestLoop++)
    1732:	3701      	adds	r7, #1
    1734:	e7a6      	b.n	1684 <main+0x1684>
  lcStrOutput.Setf("4x4 Matrix Vec Mul DspLib Test: %s us", mcDiffTimer.toString());
    1736:	481c      	ldr	r0, [pc, #112]	; (17a8 <main+0x17a8>)
    1738:	f7ff fffe 	bl	0 <main>	1738: R_ARM_THM_CALL	cDiffTimer::toString()
    173c:	4602      	mov	r2, r0
    173e:	491f      	ldr	r1, [pc, #124]	; (17bc <main+0x17bc>)
    1740:	a816      	add	r0, sp, #88	; 0x58
    1742:	f7ff fffe 	bl	0 <main>	1742: R_ARM_THM_CALL	cStrBaseT<unsigned short>::Setf(char const*, ...)
      luiFreeByteCnt = cbArrayT<tyArrayExtIdxT>::muiSize - muiLen;
    1746:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    174a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
      if (luiFreeByteCnt)
    174e:	429a      	cmp	r2, r3
    1750:	d008      	beq.n	1764 <main+0x1764>
        cbArrayT<tyArrayExtIdxT>::mpu8Data[muiLen] = lui8Byte;
    1752:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
    1756:	2100      	movs	r1, #0
    1758:	54d1      	strb	r1, [r2, r3]
        muiLen++;
    175a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    175e:	3301      	adds	r3, #1
    1760:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
      return (char8*)cbArrayT<tyCStrT>::mpu8Data;
    1764:	f8dd 205a 	ldr.w	r2, [sp, #90]	; 0x5a
      mstStartPos.x = lixDestX;
    1768:	4b11      	ldr	r3, [pc, #68]	; (17b0 <main+0x17b0>)
    176a:	2100      	movs	r1, #0
    176c:	8499      	strh	r1, [r3, #36]	; 0x24
      mstStartPos.y = lixDestY;
    176e:	2182      	movs	r1, #130	; 0x82
    1770:	84d9      	strh	r1, [r3, #38]	; 0x26
    for (lpszTemp = lpszSrc; *lpszTemp; ++lpszTemp);
    1772:	4613      	mov	r3, r2
    1774:	f993 1000 	ldrsb.w	r1, [r3]
    1778:	b109      	cbz	r1, 177e <main+0x177e>
    177a:	3301      	adds	r3, #1
    177c:	e7fa      	b.n	1774 <main+0x1774>
    return (lpszTemp - lpszSrc);
    177e:	1a9b      	subs	r3, r3, r2
      cbArrayExtT<tyCStrT>::muiLen = (CSTRT_UINT)cStrT_strlen(lszStr);
    1780:	b29b      	uxth	r3, r3
    1782:	480b      	ldr	r0, [pc, #44]	; (17b0 <main+0x17b0>)
    1784:	8443      	strh	r3, [r0, #34]	; 0x22
      cbArrayT<tyCStrT>::muiSize = cbArrayExtT<tyCStrT>::muiLen;
    1786:	8383      	strh	r3, [r0, #28]
      cbArrayT<tyCStrT>::mpu8Data = (uint8*)lszStr;
    1788:	f8c0 201e 	str.w	r2, [r0, #30]
      return i8PutString(lpcScr, lbSizeOnly);
    178c:	6803      	ldr	r3, [r0, #0]
    178e:	681b      	ldr	r3, [r3, #0]
    1790:	2200      	movs	r2, #0
    1792:	4908      	ldr	r1, [pc, #32]	; (17b4 <main+0x17b4>)
    1794:	4798      	blx	r3
    1796:	90a5      	str	r0, [sp, #660]	; 0x294
  ILI9341_Show(&mc16GBm);
    1798:	4807      	ldr	r0, [pc, #28]	; (17b8 <main+0x17b8>)
    179a:	f7ff fffe 	bl	0 <ILI9341_Show>	179a: R_ARM_THM_CALL	ILI9341_Show
    CycCall_vIdle();
    179e:	f7ff fffe 	bl	0 <CycCall_vIdle>	179e: R_ARM_THM_CALL	CycCall_vIdle
    __asm("wfi");
    17a2:	bf30      	wfi
    17a4:	e7fb      	b.n	179e <main+0x179e>
    17a6:	bf00      	nop
    17a8:	00000000 	.word	0x00000000	17a8: R_ARM_ABS32	.bss.mcDiffTimer
    17ac:	000000d4 	.word	0x000000d4	17ac: R_ARM_ABS32	.rodata.main.str1.4
	...
	17b0: R_ARM_ABS32	.bss.cRFont_Res8b_Bpp1_1G_Full
	17b4: R_ARM_ABS32	.bss.mc16GScreen1
	17b8: R_ARM_ABS32	.bss.mc16GBm
    17bc:	000000f8 	.word	0x000000f8	17bc: R_ARM_ABS32	.rodata.main.str1.4

Disassembly of section .text._GLOBAL__sub_I_TimingDelay:

00000000 <_GLOBAL__sub_I_TimingDelay>:
}
   0:	b508      	push	{r3, lr}
   2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   6:	2001      	movs	r0, #1
   8:	f7ff fffe 	bl	0 <_GLOBAL__sub_I_TimingDelay>	8: R_ARM_THM_CALL	__static_initialization_and_destruction_0(int, int)
   c:	bd08      	pop	{r3, pc}

Disassembly of section .text._GLOBAL__sub_D_TimingDelay:

00000000 <_GLOBAL__sub_D_TimingDelay>:
   0:	b508      	push	{r3, lr}
   2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   6:	2000      	movs	r0, #0
   8:	f7ff fffe 	bl	0 <_GLOBAL__sub_D_TimingDelay>	8: R_ARM_THM_CALL	__static_initialization_and_destruction_0(int, int)
   c:	bd08      	pop	{r3, pc}
